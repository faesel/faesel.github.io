<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Faesel.com - Full-Stack Blogger]]></title><description><![CDATA[Personal blog of Faesel Saeed]]></description><link>https://www.faesel.com</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 23 Apr 2021 14:59:02 GMT</lastBuildDate><item><title><![CDATA[How to Deconstruct objects in C# like we do in Javascript]]></title><description><![CDATA[I've been using C# for about a decade now, and every now and again I discover something that surprises me. This week it's the ability to deconstruct as we do in Javascript (and I'm not talking about…]]></description><link>https://www.faesel.com/blog/deconstruct-objects-in-csharp-like-in-javascript</link><guid isPermaLink="true">https://www.faesel.com/blog/deconstruct-objects-in-csharp-like-in-javascript</guid><pubDate>Thu, 08 Apr 2021 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;ve been using C# for about a decade now, and every now and again I discover something that surprises me. This week it&apos;s the ability to deconstruct as we do in Javascript (and I&apos;m not talking about using Tuples!).&lt;/p&gt;
&lt;p&gt;Below is a simple example of deconstruction taking place to draw out the power, and defence property for our Trex object,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;const trex = {
    statistics: {
        power: 10,
        defence: 2
    },
    name: &amp;quot;T-Rex&amp;quot;, 
};

const { power, defence } = trex.statistics;

console.log(`Power ${power}, Defence ${defence}`);
//Power 10, Defence 2

//Better than doing:
//const power = trex.statistics.power;
//const defence = trex.statistics.defence;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;As Mozilla&apos;s definition states,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables - &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Destructuring assignment&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&apos;s a powerful syntactical sugar, especially in the scenarios where you have a nested object with long names. As deconstruction can lead to cleaner, more readable code its uses are great on large object types. Now let&apos;s take a look at the same thing but in C#,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;namespace deconstruction
{
    public record Statistics(int Power, int Defence);

    public class Trex
    {
        public Statistics Statistics;
        public string Name;

        public Trex()
        {
            Name = &amp;quot;T-Rex&amp;quot;;
            Statistics = new Statistics(10, 5);
        }

        // Return the first and last name.
        public void Deconstruct(out int power, out int defence)
        {
            power = Statistics.Power;
            defence = Statistics.Defence;
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Ok admittedly it&apos;s not as elegant as its Javascript counterpart as we need to define what we want to deconstruct upfront as well as have a function for each combination 😬! but it&apos;s still got its uses... check it out,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;using System;

namespace deconstruction
{
    class Program
    {
        static void Main(string[] args)
        {
            var trex = new Trex();
            var (power, defence) = trex;

            Console.WriteLine($&amp;quot;Power: {power}, Defence: {defence}&amp;quot;);
            //Power: 10, Defence: 5

            //Better than doing:
            //var power = trex.statistics.power;
            //var defence = trex.statistics.defence;
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Who knows what other hidden gems 💎 lie buried with the Microsoft docs!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ASP.NET GraphQL server with Hot Chocolate]]></title><description><![CDATA[Starting my journey with GraphQL Up till now, I've always heavily relied on RESTfull services to power API's, this recently got widened with GRPC which you can read about in my article .NET & GRPC…]]></description><link>https://www.faesel.com/blog/aspnet-graphql-server-with-hot-chocolate</link><guid isPermaLink="true">https://www.faesel.com/blog/aspnet-graphql-server-with-hot-chocolate</guid><pubDate>Sun, 04 Apr 2021 23:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;starting-my-journey-with-graphql&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#starting-my-journey-with-graphql&quot; aria-label=&quot;starting my journey with graphql permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Starting my journey with GraphQL&lt;/h1&gt;
&lt;p&gt;Up till now, I&apos;ve always heavily relied on RESTfull services to power API&apos;s, this recently got widened with GRPC which you can read about in my article &lt;a href=&quot;https://www.faesel.com/blog/dotnet-grpc-forgot-to-tell-you&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;.NET &amp;#x26; GRPC What they forgot to tell you&lt;/a&gt;. GraphQL was the third final frontier that needed exploring 🥾...until now.&lt;/p&gt;
&lt;p&gt;Having looked at it a year back the implementations for .NET were in their infancy, which meant that your server would only be as good as the framework you choose. Fast forward to 2021, &lt;a href=&quot;https://github.com/ChilliCream/hotchocolate&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Chilli Creams Hotchocolate&lt;/a&gt; has gained some serious ground and makes GraphQL an appealing proposition for developers.&lt;/p&gt;
&lt;p&gt;In this article I hope to cover two main points,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How REST is designed to break backend engineers&lt;/li&gt;
&lt;li&gt;How GraphQL saves the day&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;your-typical-rest-scenario&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#your-typical-rest-scenario&quot; aria-label=&quot;your typical rest scenario permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Your typical REST scenario&lt;/h1&gt;
&lt;p&gt;Let&apos;s paint the scene, your a backend engineer who&apos;s creating an endpoint for showing a list of cats. With your battle-tested REST knowledge, you set out to create your first basic endpoint in the &lt;code&gt;CatsController&lt;/code&gt; that returns all cats and the front end engineer is ready to integrate it into his UI.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;// api/cats
[HttpGet]
public async Task&amp;lt;IActionResult&amp;gt; GetCats()
{
    using (var context = contextFactory.CreateDbContext())
    {
        var cats = await context.Cats.ToListAsync();

        if(cat != null)
            return Ok(cats);
    }

    return NoContent();
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The app soon becomes a hit! your product manager decides to expand the functionality to filter by cat descriptions and to create a new cat information page. Getting to work you expand the endpoints for the front end engineers to use.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//api/cats/1
[HttpGet]
[Route(&amp;quot;{id}&amp;quot;)]
public async Task&amp;lt;IActionResult&amp;gt; GetCatsById([FromRoute] int id)
{
    using (var context = contextFactory.CreateDbContext())
    {
        var cats = await context.Cats.FirstOrDefaultAsync(x =&amp;gt; x.Id == id);

        if(cats != null)
            return Ok(cats);
    }

    return NoContent();
}

// api/cats/description/brown
[HttpGet]
[Route(&amp;quot;description/{description}&amp;quot;)]
public async Task&amp;lt;IActionResult&amp;gt; GetCatsByDescription([FromRoute] string description)
{
    using (var context = contextFactory.CreateDbContext())
    {
        var cats = await context.Cats.Where(x =&amp;gt; x.Description.Contains(description)).ToListAsync();

        if(cats != null)
            return Ok(payload);
    }

    return NoContent();
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The cycle continues with product owners coming up with more feature requests and at the bottom of the pile, you got the backend engineer being reactive to all the changes. By the time you&apos;ve wrapped up the project your left with a code smell of 10+ endpoints 💩.&lt;/p&gt;
&lt;p&gt;The situation further degrades after a year when the UI gets redesigned and features are culled based on user usage. You end up with random floating endpoints because quite frankly no one audits their endpoints for dead code.&lt;/p&gt;
&lt;p&gt;This is where GraphQL steps in, it switches the responsibility of an engineer from anticipating and creating endpoints to simply upfront displaying everything that&apos;s available with declarative meaning.&lt;/p&gt;
&lt;h1 id=&quot;hot-chocolate-net-graphql-server-framework&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hot-chocolate-net-graphql-server-framework&quot; aria-label=&quot;hot chocolate net graphql server framework permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Hot Chocolate (.NET GraphQL server framework)&lt;/h1&gt;
&lt;p&gt;Hot chocolate is one of the leading implementations of a GraphQL server, one important thing to note when choosing a framework is that your implementation will only be as good as the framework you choose. As the &lt;a href=&quot;http://spec.graphql.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GraphQL specification&lt;/a&gt; progresses you want a framework that keeps up to date with the changes... Hot Chocolate does that.&lt;/p&gt;
&lt;p&gt;To understand the basics of Hot Chocolate I recommend &lt;a href=&quot;https://www.youtube.com/user/binarythistle&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Les Jackson&apos;s&lt;/strong&gt;&lt;/a&gt; free course on youtube. It is a bit lengthy at 3 Hours and 45 Minutes but it allows you to create an ASP.NET implementation from scratch and understand basic concepts like Querys, Mutations and Subscriptions. By the end of the course, you have a GraphQL service that can do CRUD actions (do 👍 his video it&apos;s great!).&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/HuN94qNwQmM?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The source code he produces can also be found on his &lt;a href=&quot;https://github.com/binarythistle/S04E01---.NET-5-GraphQL-API&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;github repo&lt;/a&gt;. The source code is a great starting point as it creates a docker image containing an MSSQL database. The solution itself already has Entity Framework and Hot Chocolate bootstrapped, with two entities to test with.&lt;/p&gt;
&lt;p&gt;On top of this &lt;a href=&quot;https://github.com/ChilliCream/hotchocolate/blob/main/src/BananaCakePop&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Banana Cake Pop 🍌&lt;/a&gt; is also integrated which allows you to query your server through a browser (similar to swagger).&lt;/p&gt;
&lt;p&gt;As well as &lt;a href=&quot;https://github.com/APIs-guru/graphql-voyager&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GraphQL Voyager 🚀&lt;/a&gt; (do checkout the &lt;a href=&quot;https://apis.guru/graphql-voyager/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;live demo&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To understand the remainder of the article it&apos;s important to have some basic knowledge of Hot Chocolate.&lt;/p&gt;
&lt;h1 id=&quot;graphql-voyager&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#graphql-voyager&quot; aria-label=&quot;graphql voyager permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GraphQl Voyager&lt;/h1&gt;
&lt;p&gt;Whilst this is an addition to what&apos;s being discussed, it&apos;s worth briefly mentioning. Voyager helps facilitate the move of a backend engineer from creating and documenting prescriptive REST endpoints to simply becoming a harbour of documentation and entities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The marker of a quality API has shifted from creating a subjectively RESTfull API and how well it&apos;s documented to ... just how well it&apos;s documented 📝.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&apos;s a taste of what is looks like for our API,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/8f7Kb65mDXS5ZBSA4At50/08bcdb6bfe661bdb50965e7b9e8d5a81/graphql-voyager.png&quot; alt=&quot;Graphql Voyager&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;what-they-forgot-to-mention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-they-forgot-to-mention&quot; aria-label=&quot;what they forgot to mention permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What they forgot to mention&lt;/h1&gt;
&lt;p&gt;Up till now what we have discussed fits the 80% CRUD usecase, however as we know API&apos;s that are in the wild also deal with a range of other responsibilities. The remainder of this article is to shed some light on how this is done.&lt;/p&gt;
&lt;h2 id=&quot;how-to-version-your-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-version-your-api&quot; aria-label=&quot;how to version your api permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to version your API&lt;/h2&gt;
&lt;p&gt;The typical versioning strategy for REST is to version using URLs &lt;code&gt;https://api.cats.com/v1&lt;/code&gt; (when developers can be bothered). However with GraphQL as your only ever posting to a single endpoint that strategy is no longer a prefered solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While there&apos;s nothing that prevents a GraphQL service from being versioned just like any other REST API, GraphQL takes a strong opinion on avoiding versioning by providing the tools for the continuous evolution of a GraphQL schema.
&lt;em&gt;&lt;a href=&quot;https://graphql.org/learn/best-practices/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Taken from GraphQL Best Practices&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we begin on how to version, there are some distinct points to note.&lt;/p&gt;
&lt;p&gt;Non-breaking changes can continue as they would with REST, adding properties to entities (as you would with response models in REST), continues to be a way to evolve your API. Similarly adding new query types to your GraphQL server is also deemed as a non-breaking change, and is equivalent to adding new endpoints in REST.&lt;/p&gt;
&lt;p&gt;GraphQL aids in breaking changes caused due to nullability as &lt;strong&gt;everything&lt;/strong&gt; unless specified is treated as nullable. This leads to upfront resilience on the front end to missing data, the &lt;code&gt;id: Int!&lt;/code&gt; in the example below cannot be null.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;type Cats {
  id: Int!
  name: String
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Eventually, we do still hit circumstances where a breaking change is needed. In these situations we have two strategies. The first as &lt;a href=&quot;https://chillicream.com/docs/hotchocolate/defining-a-schema/versioning/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Chilli Cream Docs&lt;/a&gt; specify is to add deprecated flags to old properties and begin to shift usage to new versions.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class CatsType : ObjectType&amp;lt;Cats&amp;gt;
{
    protected override void Configure(IObjectTypeDescriptor&amp;lt;Cats&amp;gt; descriptor)
    {
        descriptor.Description(&amp;quot;Represents commands available on a platform&amp;quot;);

        descriptor.Field(x =&amp;gt; x.Name).Deprecated(&amp;quot;This is no longer used, use FirstName and LastName&amp;quot;);
        descriptor.Field(x =&amp;gt; x.FirstName);
        descriptor.Field(x =&amp;gt; x.LastName);
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;For client developers, this then creates warnings when using a deprecated property.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/2BkWWBcz1UAAU9fFVavBGQ/c812ee032ddcd8eb600b165616f68e5b/Screenshot_2021-03-26_153337.png&quot; alt=&quot;Depricated GraphQL property&quot;&gt;&lt;/p&gt;
&lt;p&gt;Whilst this approach works over time it could create a lot of noise if you have many deprecated properties, an alternative approach is to split the entity entirely, use different classes between the two versions. Here is an example, we start by creating two query types,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public record CatResponse1(int Id, string Name);
public record CatResponse2(int Id, string FirstName, string LastName);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Both of these would contain their own Code First type files&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class CatType1 : ObjectType&amp;lt;CatResponse1&amp;gt;
{
    protected override void Configure(IObjectTypeDescriptor&amp;lt;CatResponse1&amp;gt; descriptor)
    {
        descriptor.Description(&amp;quot;Represents cats!&amp;quot;);

        descriptor.Field(x =&amp;gt; x.Name)
            .Description(&amp;quot;Represents the name of the cat&amp;quot;)
            .Deprecated(&amp;quot;This is no longer used, use FirstName and LastName from Cat2&amp;quot;);
    }
}

public class CatType2 : ObjectType&amp;lt;CatResponse2&amp;gt;
{
    protected override void Configure(IObjectTypeDescriptor&amp;lt;CatResponse2&amp;gt; descriptor)
    {
        descriptor.Description(&amp;quot;Represents cats!&amp;quot;);

        descriptor.Field(x =&amp;gt; x.FirstName)
            .Description(&amp;quot;Represents the name firstname of the cat&amp;quot;);
        descriptor.Field(x =&amp;gt; x.LastName)
            .Description(&amp;quot;Represents the name lastname of the cat&amp;quot;);
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The final piece of code is to use the intermediary response models. Under the hood we are still using the same EF entity.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class Query
{
    [UseDbContext(typeof(AppDbContext))]
    [UseFiltering]
    [UseSorting]
    public IQueryable&amp;lt;CatResponse1&amp;gt; GetCat1([ScopedService] AppDbContext context)
    {
        var cats = context.Cats;

        return cats.Select(x =&amp;gt; new CatResponse1(x.Id, x.Name));
    }

    [UseDbContext(typeof(AppDbContext))]
    [UseFiltering]
    [UseSorting]
    public IQueryable&amp;lt;CatResponse2&amp;gt; GetCat2([ScopedService] AppDbContext context)
    {
        var cats = context.Cats;

        return cats.Select(x =&amp;gt; new CatResponse2(x.Id, x.FirstName, x.LastName));
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;These changes now allow us to split our models, the two can be queried independently.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4RSPAHISSIpKS3qFfZbRq1/b53386073d0e86bc0e14a95b30ff857a/versioned-entities.png&quot; alt=&quot;Versioned types&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-to-do-authentication&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-do-authentication&quot; aria-label=&quot;how to do authentication permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to do Authentication&lt;/h2&gt;
&lt;p&gt;Since Hot Chocolate works on top of ASP.NET we can leverage on all the traditional Authentication pipelines we use for REST, nothing changes! To demonstrate this I&apos;m going to extend the base implementation with a basic authentication mechanism using a header value &lt;code&gt;x-api-key&lt;/code&gt; and a key defined in the &lt;code&gt;appsettings.json&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;adding-key-based-authentication&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#adding-key-based-authentication&quot; aria-label=&quot;adding key based authentication permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding key-based authentication&lt;/h3&gt;
&lt;p&gt;To begin let&apos;s first add basic app settings to hold our authentication key (this represents the key the client will pass to the server to authentication their request), and create a class to deserialise into using &lt;code&gt;IOptions&lt;/code&gt; interface.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//Code goes into appsettings.json
&amp;quot;AuthenticationSettings&amp;quot;: {
    &amp;quot;AuthenticationToken&amp;quot;: &amp;quot;secret123&amp;quot;
}

//New class to serialize into
public class AuthenticationSettings
{
    public string AuthenticationToken { get; set; }
}

//Register the configuration in Startup.cs &amp;gt; ConfigureServices function
services.Configure&amp;lt;AuthenticationSettings&amp;gt;(Configuration.GetSection(nameof(AuthenticationSettings)));&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Next we will create authentication scheme options as follows,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class ApiKeyAuthenticationOptions : AuthenticationSchemeOptions
{
    public const string DefaultScheme = &amp;quot;KeyBasedScheme&amp;quot;;
    public string Scheme =&amp;gt; DefaultScheme;
    public string AuthenticationType = DefaultScheme;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The next part is where the crux of the code is, the &lt;code&gt;AuthenticationHandler&lt;/code&gt; is what determines whether the request was correctly authenticated. On a successful attempt, it populates the ClaimsPrinciple.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class ApiKeyAuthenticationHandler : AuthenticationHandler&amp;lt;ApiKeyAuthenticationOptions&amp;gt;
{
    private const string ProblemDetailsContentType = &amp;quot;application/problem+json&amp;quot;;
    private const string AuthenticationHeaderName = &amp;quot;x-api-key&amp;quot;;
    private readonly AuthenticationSettings AuthenticationSettings;

    public ApiKeyAuthenticationHandler(
        IOptionsMonitor&amp;lt;ApiKeyAuthenticationOptions&amp;gt; options,
        ILoggerFactory logger,
        UrlEncoder encoder,
        ISystemClock clock,
        IOptions&amp;lt;AuthenticationSettings&amp;gt; authenticationSettings) : base(options, logger, encoder, clock)
    {
        AuthenticationSettings = authenticationSettings.Value;
    }

    protected override Task&amp;lt;AuthenticateResult&amp;gt; HandleAuthenticateAsync()
    {
        if (!Request.Headers.TryGetValue(AuthenticationHeaderName, out var apiKeyHeaderValues))
        {
            return Task.FromResult(AuthenticateResult.NoResult());
        }

        var providedApiKey = apiKeyHeaderValues.FirstOrDefault();

        if (apiKeyHeaderValues.Count == 0 || string.IsNullOrWhiteSpace(providedApiKey))
        {
            return Task.FromResult(AuthenticateResult.NoResult());
        }

        var isMatchingKey = providedApiKey.Equals(AuthenticationSettings.AuthenticationToken);

        if (isMatchingKey)
        {
            var claims = new List&amp;lt;Claim&amp;gt; {
                //Add your claims here
            };
            var identity = new ClaimsIdentity(claims, Options.AuthenticationType);
            var identities = new List&amp;lt;ClaimsIdentity&amp;gt; { identity };
            var principal = new ClaimsPrincipal(identities);
            var ticket = new AuthenticationTicket(principal, Options.Scheme);

            return Task.FromResult(AuthenticateResult.Success(ticket));
        }

        return Task.FromResult(AuthenticateResult.Fail(&amp;quot;Invalid API Key provided.&amp;quot;));
    }

    protected override async Task HandleChallengeAsync(AuthenticationProperties properties)
    {
        Response.StatusCode = (int)HttpStatusCode.Unauthorized;
        Response.ContentType = ProblemDetailsContentType;
        var problemDetails = new { Information = &amp;quot;Unauthorized&amp;quot; };

        await Response.WriteAsync(JsonSerializer.Serialize(problemDetails));
    }

    protected override async Task HandleForbiddenAsync(AuthenticationProperties properties)
    {
        Response.StatusCode = (int)HttpStatusCode.Forbidden;
        Response.ContentType = ProblemDetailsContentType;
        var problemDetails = new { Information = &amp;quot;Forbidden&amp;quot; };

        await Response.WriteAsync(JsonSerializer.Serialize(problemDetails));
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The final part need is to register this in our startup class, below are the two bits of code needed. Once we have this in place the &lt;code&gt;[Authorize]&lt;/code&gt; tag will work for regular REST requests, any request sent without an &lt;code&gt;x-api-key&lt;/code&gt; value of &apos;secret123&apos; will be rejected. The next step is to see how we replicate this in GraphQL.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
    ...
    services.AddAuthentication(options =&amp;gt;
    {
        options.DefaultAuthenticateScheme = ApiKeyAuthenticationOptions.DefaultScheme;
        options.DefaultChallengeScheme = ApiKeyAuthenticationOptions.DefaultScheme;
    }).AddScheme&amp;lt;ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler&amp;gt;(
        ApiKeyAuthenticationOptions.DefaultScheme,
        null
    );
    services.AddAuthorization();
}

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    ...
    app.UseAuthentication();
    app.UseAuthorization();
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;authenticating-a-graphql-entity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#authenticating-a-graphql-entity&quot; aria-label=&quot;authenticating a graphql entity permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Authenticating a GraphQl Entity&lt;/h3&gt;
&lt;p&gt;Authentication in GraphQL works by authorizing individual models, to begin we first need to add the HotChocolate Authorization package &lt;code&gt;HotChocolate.AspNetCore.Authorization&lt;/code&gt; and enable it in the &lt;code&gt;Startup.cs&lt;/code&gt; class, its a one-liner,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;services.AddAuthorizeDirectiveType()&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now similar to the &lt;code&gt;[Authorize]&lt;/code&gt; tag we use for REST we can enable Authorization in for our individual ObjectTypes by adding a simple &lt;code&gt;descriptor.Authorize()&lt;/code&gt; call.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class CatType1 : ObjectType&amp;lt;CatResponse1&amp;gt;
{
    protected override void Configure(IObjectTypeDescriptor&amp;lt;CatResponse1&amp;gt; descriptor)
    {
        descriptor.Authorize();
        ...
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Once this has been added making calls without the header will return an unauthenticated result that looks like this,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;{
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;The current user is not authorized to access this resource.&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 3,
          &amp;quot;column&amp;quot;: 5
        }
      ],
      &amp;quot;path&amp;quot;: [
        &amp;quot;cat1&amp;quot;,
        1,
        &amp;quot;id&amp;quot;
      ],
      &amp;quot;extensions&amp;quot;: {
        &amp;quot;code&amp;quot;: &amp;quot;AUTH_NOT_AUTHENTICATED&amp;quot;
      }
    },
    ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;how-to-do-authorisation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-do-authorisation&quot; aria-label=&quot;how to do authorisation permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to do Authorisation&lt;/h2&gt;
&lt;p&gt;Extending the code to work with Authorization is also a quick change, in this example we will authorize based on the user&apos;s role. To begin we will extend our &lt;code&gt;ApiKeyAuthenticationHandler&lt;/code&gt; to populate a claim when the authentication key has matched,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var claims = new List&amp;lt;Claim&amp;gt; {
    new Claim(&amp;quot;http://schemas.microsoft.com/ws/2008/06/identity/claims/role&amp;quot;, &amp;quot;Admin&amp;quot;)
};&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Next we can pass a list of accepted roles into the ObjectType &lt;code&gt;CatType1&lt;/code&gt;, in this example I have intentionally added a role that doesn&apos;t exist.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var roles = new string[] { &amp;quot;NotAdmin&amp;quot; };
descriptor.Authorize(roles);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Making a request now will spark an unauthorized error,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;{
  &amp;quot;errors&amp;quot;: [
    {
      &amp;quot;message&amp;quot;: &amp;quot;The current user is not authorized to access this resource.&amp;quot;,
      &amp;quot;locations&amp;quot;: [
        {
          &amp;quot;line&amp;quot;: 3,
          &amp;quot;column&amp;quot;: 5
        }
      ],
      &amp;quot;path&amp;quot;: [
        &amp;quot;cat1&amp;quot;,
        1,
        &amp;quot;id&amp;quot;
      ],
      &amp;quot;extensions&amp;quot;: {
        &amp;quot;code&amp;quot;: &amp;quot;AUTH_NOT_AUTHORIZED&amp;quot;
      }
    },
    ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;how-does-logging-work&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-does-logging-work&quot; aria-label=&quot;how does logging work permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does logging work&lt;/h2&gt;
&lt;p&gt;Regarding logging Chilli Cream has created a guide to adding an &lt;code&gt;AddDiagnosticEventListener&lt;/code&gt; that&apos;s able to trace incoming requests, check out the article &lt;a href=&quot;https://chillicream.com/blog/2021/01/10/hot-chocolate-logging&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Log Your Queries While Building a GraphQL Server&lt;/a&gt;. It would be interesting to create an example that&apos;s &lt;code&gt;OpenTelemetry&lt;/code&gt; compliant... perhaps that&apos;s one for another day (this articles getting a bit long 😩).&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#conclusion&quot; aria-label=&quot;conclusion permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;That&apos;s it folks! We&apos;ve seen that the Hot Chocolate implementation nicely fulfils not just the 80% crud use case but can also deal with the other responsibilities we typically see with our REST services in the wild.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Adding environments to ASP.NET Core with React.js SPA]]></title><description><![CDATA[Recently I started working on a project that was created from the ASP.NET SPA template for react. It's one of the templates you get by default with dotnet and can be created by running dotnet new…]]></description><link>https://www.faesel.com/blog/aspnet-core-react-spa-adding-environments</link><guid isPermaLink="true">https://www.faesel.com/blog/aspnet-core-react-spa-adding-environments</guid><pubDate>Tue, 19 Jan 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Recently I started working on a project that was created from the &lt;strong&gt;ASP.NET SPA template for react&lt;/strong&gt;. It&apos;s one of the templates you get by default with dotnet and can be created by running &lt;code&gt;dotnet new react&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The template creates a dotnet webapp which is designed to be an API backend and links it with a react project to power the UI. When running the project from dotnet, static files are built from the react project and served up.&lt;/p&gt;
&lt;p&gt;In terms of running the application with different environments, the dotnet perspective is fairly straight forward as we can simply use the environment variable &lt;code&gt;ASPNETCORE_ENVIRONMENT&lt;/code&gt;. But the question is how do we pass this variable to the SPA so that we can shift between different environments?&lt;/p&gt;
&lt;p&gt;Having trawled the internet I didn&apos;t see any examples, so I decided to create my own!&lt;/p&gt;
&lt;h1 id=&quot;understanding-the-aspnet-spa-template-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#understanding-the-aspnet-spa-template-&quot; aria-label=&quot;understanding the aspnet spa template  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Understanding the ASP.NET spa template 🔍&lt;/h1&gt;
&lt;p&gt;Let&apos;s begin by creating a boilerplate solution with &lt;code&gt;dotnet new react&lt;/code&gt;. Once the solution is created we end up with a backend API with a &lt;code&gt;WeatherForecastController&lt;/code&gt;, and a front end app located in the &lt;code&gt;ClientApp&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/65iH6wUZxUc6JSNON5gWTK/a704de8ffa2dd0d4a33eef19ebf92390/folder-structure.png&quot; alt=&quot;Dotnet SPA Folder Structure&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since this is an integrated spa, from the root of the project we are able to &lt;code&gt;dotnet run&lt;/code&gt; and spin up not only the dotnet project but also the react spa.&lt;/p&gt;
&lt;h2 id=&quot;client-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#client-app&quot; aria-label=&quot;client app permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Client App&lt;/h2&gt;
&lt;p&gt;The client app itself is in a completely segregated app, there&apos;s nothing special added here to make it all connect up. All your standard commands to &lt;code&gt;npm install/build&lt;/code&gt; are all available to you. In fact, the template has been build based on the implementation of &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can also start up the project from here with &lt;code&gt;npm run start&lt;/code&gt; command which will spin up a development server &lt;strong&gt;independent of your backend code&lt;/strong&gt;. The execution and configuration is handled for us using &lt;code&gt;react-scripts&lt;/code&gt; which was designed to help set up react projects without stress, featuring things like hot module reloading, deployment builds etc ... all standard-issue so far. So you get these npm scripts setup for you,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;rimraf ./build &amp;amp;&amp;amp; react-scripts start&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;react-scripts build&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;cross-env CI=true react-scripts test --env=jsdom&amp;quot;,
    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;,
    &amp;quot;lint&amp;quot;: &amp;quot;eslint ./src/&amp;quot;
  },&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;startup-class&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#startup-class&quot; aria-label=&quot;startup class permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Startup Class&lt;/h2&gt;
&lt;p&gt;The glue that connects the backend to the frontend can be found in the &lt;code&gt;Startup.cs&lt;/code&gt; class. Working from top down the first code block of interest is within the &lt;em&gt;ConfigureServices&lt;/em&gt; function,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;services.AddSpaStaticFiles(configuration =&amp;gt;
{
  configuration.RootPath = &amp;quot;ClientApp/build&amp;quot;;
});&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This block essentially tells your dotnet app where to find the static resources (production builds) of your spa within its bin folder. So running the command &lt;code&gt;dotnet publish --configuration Release&lt;/code&gt; creates a &lt;strong&gt;ClientApp/Build&lt;/strong&gt; folder with a production optimised (ie npm run build) version of our SPA, the root path simply points to this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4tIwYVA6pYWrGctHAzMXHT/d0836b601480a1962a7693bf4cd8b653/spa-build-folder.png&quot; alt=&quot;clientapp-build-folder&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next block to notice is in the &lt;em&gt;Configure&lt;/em&gt; function,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;app.UseEndpoints(endpoints =&amp;gt;
{
    endpoints.MapControllerRoute(
        name: &amp;quot;default&amp;quot;,
        pattern: &amp;quot;{controller}/{action=Index}/{id?}&amp;quot;);
});

app.UseSpa(spa =&amp;gt;
{
    spa.Options.SourcePath = &amp;quot;ClientApp&amp;quot;;

    if (env.IsDevelopment())
    {
        spa.UseReactDevelopmentServer(npmScript: &amp;quot;start&amp;quot;);
    }
});&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;There are two things that are happening here, the first is that we have dotnet server side routing connected up (with app.UseEndpoints() middleware), this means that upon receiving a HTTP request server-side routing will always take priority over client-side routing. If server-side routes fall through without matching an endpoint, we use the app.UseSpa() middleware to redirect all requests to the default page (which is your index.html file triggering the spa to load).&lt;/p&gt;
&lt;p&gt;The next point is that from here we can also configure the location of our client-side source code, and the command we need to use to run our react spa as a development server when debugging.&lt;/p&gt;
&lt;h2 id=&quot;msbuild--running-npm-commands&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#msbuild--running-npm-commands&quot; aria-label=&quot;msbuild  running npm commands permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MSBuild &amp;#x26; Running NPM Commands&lt;/h2&gt;
&lt;p&gt;The remaining magic is all located in the .csproj file we got 2 core components here the first is the Debug target,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;Target Name=&amp;quot;DebugEnsureNodeEnv&amp;quot; BeforeTargets=&amp;quot;Build&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Debug&amp;#39; And !Exists(&amp;#39;$(SpaRoot)node_modules&amp;#39;) &amp;quot;&amp;gt;
  &amp;lt;!-- Ensure Node.js is installed --&amp;gt;
  &amp;lt;Exec Command=&amp;quot;node --version&amp;quot; ContinueOnError=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;Output TaskParameter=&amp;quot;ExitCode&amp;quot; PropertyName=&amp;quot;ErrorCode&amp;quot; /&amp;gt;
  &amp;lt;/Exec&amp;gt;
  &amp;lt;Error Condition=&amp;quot;&amp;#39;$(ErrorCode)&amp;#39; != &amp;#39;0&amp;#39;&amp;quot; Text=&amp;quot;Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE.&amp;quot; /&amp;gt;
  &amp;lt;Message Importance=&amp;quot;high&amp;quot; Text=&amp;quot;Restoring dependencies using &amp;#39;npm&amp;#39;. This may take several minutes...&amp;quot; /&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm install&amp;quot; /&amp;gt;
&amp;lt;/Target&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This chunky block of code runs an &lt;code&gt;npm install&lt;/code&gt; command before building your dotnet application. It also features a nice check to ensure you got Node.js installed (I guess for the backend people 😁). It does this with the &lt;code&gt;&amp;#x3C;Exec WorkingDirectory=&quot;$(SpaRoot)&quot; Command=&quot;npm install&quot; /&gt;&lt;/code&gt; command runner (note SpaRoot is defined a the top as a static property pointing to &lt;strong&gt;ClientApp\&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;The second part is the publish target,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;Target Name=&amp;quot;PublishRunWebpack&amp;quot; AfterTargets=&amp;quot;ComputeFilesToPublish&amp;quot;&amp;gt;
  &amp;lt;!-- As part of publishing, ensure the JS resources are freshly built in production mode --&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm install&amp;quot; /&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm run build&amp;quot; /&amp;gt;

  &amp;lt;!-- Include the newly-built files in the publish output --&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DistFiles Include=&amp;quot;$(SpaRoot)build\**&amp;quot; /&amp;gt;
    &amp;lt;ResolvedFileToPublish Include=&amp;quot;@(DistFiles-&amp;gt;&amp;#39;%(FullPath)&amp;#39;)&amp;quot; Exclude=&amp;quot;@(ResolvedFileToPublish)&amp;quot;&amp;gt;
      &amp;lt;RelativePath&amp;gt;%(DistFiles.Identity)&amp;lt;/RelativePath&amp;gt;
      &amp;lt;CopyToPublishDirectory&amp;gt;PreserveNewest&amp;lt;/CopyToPublishDirectory&amp;gt;
      &amp;lt;ExcludeFromSingleFile&amp;gt;true&amp;lt;/ExcludeFromSingleFile&amp;gt;
    &amp;lt;/ResolvedFileToPublish&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Target&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Again fairly similar concept running a publish first installs dependencies then builds the project. The build artefacts get created in the &lt;strong&gt;ClientApp\build&lt;/strong&gt; folder. The item group block then ensures the build assets are included in your &lt;strong&gt;bin\ClientApp\build&lt;/strong&gt; folder.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;So to summarise, when running in debug mode&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We npm install dependencies&lt;/li&gt;
&lt;li&gt;Build and run the dotnet app&lt;/li&gt;
&lt;li&gt;Run an npm development server&lt;/li&gt;
&lt;li&gt;Begin routing all calls to the backend, and where it fails to the default client page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the case of a published application&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create a published version of the dotnet application&lt;/li&gt;
&lt;li&gt;We npm install dependencies&lt;/li&gt;
&lt;li&gt;We create a production build of the spa in the folder &lt;strong&gt;ClientApp\build&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Static files from the spa are included in the output&lt;/li&gt;
&lt;li&gt;Running the application now has a packaged version of the spa its static files are served up upon running the backend. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is all well and great so far... but the react app gets pre built.. what if we need to run it as part of a different environment? Currently, it&apos;s all running off a single &lt;code&gt;.env&lt;/code&gt; file!&lt;/p&gt;
&lt;h1 id=&quot;adding-environments-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#adding-environments-&quot; aria-label=&quot;adding environments  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding environments 🆕&lt;/h1&gt;
&lt;p&gt;Below is my solution for getting environments running across the stack, it also conforms to the dev-ops ethos of,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build once and deploy many times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;install-the-dependencies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#install-the-dependencies&quot; aria-label=&quot;install the dependencies permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Install the dependencies&lt;/h2&gt;
&lt;p&gt;To being adding environments we first need to ensure our npm app can support it. For this, we will use the well know &lt;a href=&quot;https://www.npmjs.com/package/env-cmd&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;env-cmd&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;We will also be needing something to manipulate the build folders generated by react-scripts. Since all operating systems are equipped with CLI commands to rename/remove files we don&apos;t need anything special to do this. However, because these commands differ from one operating system to the next, it&apos;s always a good practice to use something like &lt;a href=&quot;https://www.npmjs.com/package/shx&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;shx&lt;/a&gt; to ensure it works cross-platform.&lt;/p&gt;
&lt;p&gt;So let&apos;s start with running the install command in the ClientApp folder,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install env-cmd shx --save-dev&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;add-your-environment-files&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#add-your-environment-files&quot; aria-label=&quot;add your environment files permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add your environment files&lt;/h2&gt;
&lt;p&gt;Next let&apos;s start creating some environment files, the file structure should look something like this, with the .env file containing settings shared across all the environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.env&lt;/li&gt;
&lt;li&gt;.env.staging&lt;/li&gt;
&lt;li&gt;.env.production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any key on these files need to be prefixed with &lt;code&gt;REACT_APP_&lt;/code&gt; this is a safety feature build in,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You must create custom environment variables beginning with REACT&lt;em&gt;APP&lt;/em&gt;. Any other variables except NODE_ENV will be ignored to avoid accidentally exposing a private key on the machine that could have the same name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For now, let&apos;s add just add an environment variable that tells us which environment we are in. Do this for both production and staging .env files.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;REACT_APP_ENV=&amp;#39;production&amp;#39;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;To show our environment on the page lets also create a &lt;em&gt;config.js&lt;/em&gt; file, that accesses the environment variable.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;export const config = {
    ENVIRONMENT: process.env.REACT_APP_ENV 
};&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;And finally output it to the page,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React, { Component } from &amp;#39;react&amp;#39;;
import { Container } from &amp;#39;reactstrap&amp;#39;;
import { NavMenu } from &amp;#39;./NavMenu&amp;#39;;
import { config } from &amp;#39;../config&amp;#39;;

export class Layout extends Component {
  static displayName = Layout.name;

  render () {
    return (
      &amp;lt;div&amp;gt;
        {config.ENVIRONMENT}
        &amp;lt;NavMenu /&amp;gt;
        &amp;lt;Container&amp;gt;
          {this.props.children}
        &amp;lt;/Container&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;add-your-build-scripts&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#add-your-build-scripts&quot; aria-label=&quot;add your build scripts permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Add your build scripts&lt;/h2&gt;
&lt;p&gt;Build scripts are now needed to trigger the environments, we need to make the following amends to the npm scripts section,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build:staging&amp;quot;: &amp;quot;env-cmd -f .env.staging react-scripts build &amp;amp;&amp;amp; shx rm -rf staging &amp;amp;&amp;amp; shx cp -r build staging&amp;quot;,
    &amp;quot;build:production&amp;quot;: &amp;quot;env-cmd -f .env.production react-scripts build &amp;amp;&amp;amp; shx rm -rf production &amp;amp;&amp;amp; shx cp -r build production&amp;quot;,
    &amp;quot;start:staging&amp;quot;: &amp;quot;rimraf ./build &amp;amp;&amp;amp; env-cmd -f .env.staging react-scripts start&amp;quot;,
    &amp;quot;start:production&amp;quot;: &amp;quot;rimraf ./build &amp;amp;&amp;amp; env-cmd -f .env.production react-scripts start&amp;quot;,
  }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The scripts prefixed with &lt;em&gt;build&lt;/em&gt; are using env-cmd with its respective environment file to create a production build of the app. The shx part is then firstly removing the folder staging/production then copying the &lt;em&gt;build&lt;/em&gt; files react-script creates into an environment specific folder.&lt;/p&gt;
&lt;p&gt;Similarly the scripts prefixed with &lt;em&gt;start&lt;/em&gt; run the app using a certain environment. Note if your trying to run this from the dotnet app, you will need to change the Startup.cs &gt; UseReactDevelopmentServer function to,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;spa.UseReactDevelopmentServer(npmScript: &amp;quot;start:production&amp;quot;);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now that this is set up, running the app should show the environment variables.&lt;/p&gt;
&lt;h2 id=&quot;modifying-your-csproj&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#modifying-your-csproj&quot; aria-label=&quot;modifying your csproj permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modifying your .csproj&lt;/h2&gt;
&lt;p&gt;The next step is to get this working with &lt;code&gt;dotnet publish&lt;/code&gt;! To do this we need to modify the &lt;strong&gt;PublishRunWebpack&lt;/strong&gt; target in the .csproj file to,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;Target Name=&amp;quot;PublishRunWebpack&amp;quot; AfterTargets=&amp;quot;ComputeFilesToPublish&amp;quot;&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm install&amp;quot;/&amp;gt;

  &amp;lt;Message Importance=&amp;quot;high&amp;quot; Text=&amp;quot;Started building staging version of the spa ...&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot;/&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm run build:staging&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot;/&amp;gt;
  &amp;lt;Message Importance=&amp;quot;high&amp;quot; Text=&amp;quot;Started building production version of the spa ...&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot;/&amp;gt;
  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm run build:production&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot;/&amp;gt;

  &amp;lt;Exec WorkingDirectory=&amp;quot;$(SpaRoot)&amp;quot; Command=&amp;quot;npm run build&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Debug&amp;#39; &amp;quot; /&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;DistFiles Include=&amp;quot;$(SpaRoot)build\**&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Debug&amp;#39; &amp;quot; /&amp;gt;
    &amp;lt;DistFiles Include=&amp;quot;$(SpaRoot)staging\**&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot; /&amp;gt;
    &amp;lt;DistFiles Include=&amp;quot;$(SpaRoot)production\**&amp;quot; Condition=&amp;quot; &amp;#39;$(Configuration)&amp;#39; == &amp;#39;Release&amp;#39; &amp;quot; /&amp;gt;
    &amp;lt;ResolvedFileToPublish Include=&amp;quot;@(DistFiles-&amp;gt;&amp;#39;%(FullPath)&amp;#39;)&amp;quot; Exclude=&amp;quot;@(ResolvedFileToPublish)&amp;quot;&amp;gt;
      &amp;lt;RelativePath&amp;gt;%(DistFiles.Identity)&amp;lt;/RelativePath&amp;gt;
      &amp;lt;CopyToPublishDirectory&amp;gt;PreserveNewest&amp;lt;/CopyToPublishDirectory&amp;gt;
      &amp;lt;ExcludeFromSingleFile&amp;gt;true&amp;lt;/ExcludeFromSingleFile&amp;gt;
    &amp;lt;/ResolvedFileToPublish&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Target&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;To summarise what&apos;s happening here, when building in debug mode we are continuing to use the &lt;code&gt;npm run build&lt;/code&gt; command to create a production build and the spa files get stored in the build folder &lt;code&gt;$(SpaRoot)build\**&lt;/code&gt;. The output looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;publish&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClientApp&lt;/li&gt;
&lt;li&gt;build
-spa files go here!   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However in release mode we now create two versions of the spa (one for each environment) using out new npm environment builds, &lt;code&gt;npm run build:staging&lt;/code&gt; and  &lt;code&gt;npm run build:production&lt;/code&gt;. The builds also get moved to their corresponding folders.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bin&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Release&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;publish&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClientApp&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;staging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staging spa files go here!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;production&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;production spa files go here!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once thats setup you can test it out with &lt;code&gt;dotnet publish --configuration Release&lt;/code&gt;, the build output should look something like this,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6gBCaZH5bJ6vaNW2wf8QPD/7b1fcf59b5a716760ebf49c95aaaab85/BuildExample.png&quot; alt=&quot;build-output-spa&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;modifying-your-startupcs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#modifying-your-startupcs&quot; aria-label=&quot;modifying your startupcs permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modifying your startup.cs&lt;/h2&gt;
&lt;p&gt;The final step is to modify your Startup.cs file to switch out which spa to use based on the environment variable,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;services.AddSpaStaticFiles(configuration =&amp;gt; configuration.RootPath = WebHostEnvironment.IsDevelopment()
                ? &amp;quot;ClientApp/build&amp;quot;
                : $&amp;quot;ClientApp/{WebHostEnvironment.EnvironmentName}&amp;quot;);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h1 id=&quot;how-to-deploy-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-deploy-&quot; aria-label=&quot;how to deploy  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to deploy 🚀&lt;/h1&gt;
&lt;p&gt;Deployment is now a simple case of running &lt;code&gt;dotnet publish --configuration Release&lt;/code&gt;, once the published artefacts are deployed the app can now take its environment and run the appropriate spa. Build once and deploy anywhere!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My journey of creating a .NET CLI tool]]></title><description><![CDATA[Why I started building a CLI As a .NET engineer, I work with Azure storage a lot, its versatility, ease of use, as well as cost makes it a common staple amongst developers. Its application is also…]]></description><link>https://www.faesel.com/blog/my-journey-of-creating-a-dotnet-cli-tool</link><guid isPermaLink="true">https://www.faesel.com/blog/my-journey-of-creating-a-dotnet-cli-tool</guid><pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;why-i-started-building-a-cli&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-i-started-building-a-cli&quot; aria-label=&quot;why i started building a cli permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why I started building a CLI&lt;/h1&gt;
&lt;p&gt;As a .NET engineer, I work with Azure storage a lot, its versatility, ease of use, as well as cost makes it a common staple amongst developers. Its application is also widespread from leveraging queues on a basic console app to storing uploaded images from a web application.&lt;/p&gt;
&lt;p&gt;Typically as an engineer, I have always interfaced with azure storage using &lt;a href=&quot;https://azure.microsoft.com/en-gb/features/storage-explorer/#features&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Azure Storage Manager&lt;/a&gt;, but as a UI tool, its always been two clicks away from the information I need or was just slow to navigate. &lt;/p&gt;
&lt;p&gt;So I ended up taking my destiny into my own hands and built a CLI tool called &lt;a href=&quot;https://github.com/faesel/az-lazy&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Az-Lazy&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;packages-used-when-i-started&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#packages-used-when-i-started&quot; aria-label=&quot;packages used when i started permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Packages used when I started&lt;/h1&gt;
&lt;p&gt;So as with all projects, I started with a shopping list of packages I wanted to use/needed to make a great CLI experience. &lt;/p&gt;
&lt;h3 id=&quot;1-commandlineparser&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-commandlineparser&quot; aria-label=&quot;1 commandlineparser permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. &lt;a href=&quot;https://github.com/commandlineparser/commandline&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;CommandLineParser&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Whilst there are many command parsers on the market, I found this implementation particular nice to use. The end result allows you to to get a command pattern similar to most of the Microsoft dotnet tools,  &lt;code&gt;azlazy connection --list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Defining available commands is as easy as decorating a class with attributes, and the help options for each command is automatically generated for you (azlazy addcontainer --help).&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[Verb(&amp;quot;addcontainer&amp;quot;, HelpText = &amp;quot;Creates a new storage container&amp;quot;)]
    public class AddContainerOptions : ICommandOptions
    {
        [Option(&amp;#39;n&amp;#39;, &amp;quot;name&amp;quot;, Required = true, HelpText = &amp;quot;Name of the container to create&amp;quot;)]
        public string Name { get; set; }

        [Option(&amp;#39;p&amp;#39;, &amp;quot;publicAccess&amp;quot;, Required = false, HelpText = &amp;quot;Options are None, Blob, BlobContainer&amp;quot;)]
        public string PublicAccess { get; set; }
    }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;2-pastel&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-pastel&quot; aria-label=&quot;2 pastel permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;a href=&quot;https://github.com/silkfire/Pastel&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Pastel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Splash of colour is always a sign of a great CLI experience and seeing red or green are key indicators of successful execution of a command. &lt;em&gt;Pastel&lt;/em&gt; lets you do exactly that! its got a range of preset vibrant colours to choose from and allows you to easily RGB your console output. &lt;/p&gt;
&lt;p&gt;The extension method style syntax is also great and doesn&apos;t distract you away from the code.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;quot;You successfully deleted all your data&amp;quot;.Pastel(Color.LightGreen);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;3-consoletables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-consoletables&quot; aria-label=&quot;3 consoletables permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. &lt;a href=&quot;https://github.com/khalidabuhakmeh/ConsoleTables&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ConsoleTables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As Az-Lazy deals with table storeage, it was only a matter of time till i needed to output a table to the console. After a quick search on Nuget Gallery &lt;em&gt;ConsoleTables&lt;/em&gt; showed up. With a simple minimilist table implementation it was quick to get setup,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var table = new ConsoleTable(&amp;quot;Id&amp;quot;, &amp;quot;Blob&amp;quot;, &amp;quot;Size&amp;quot;);
table.AddRow(1, &amp;quot;dinopic1.jpg&amp;quot;, 300)
     .AddRow(2, &amp;quot;dinopic2.jpb&amp;quot;, 450);

table.Write();&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;However, I later had to drop this package for something slightly more advanced (Alba.CsConsoleFormat) as I needed to word wrap large cells (particularly when displaying JSON snippets). &lt;/p&gt;
&lt;h3 id=&quot;4-albacsconsoleformat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-albacsconsoleformat&quot; aria-label=&quot;4 albacsconsoleformat permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. &lt;a href=&quot;https://github.com/Athari/CsConsoleFormat&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Alba.CsConsoleFormat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned above &lt;em&gt;Alba.CsConsoleFormat&lt;/em&gt; was a replacement package to render tables. With great options to not only style your table with colours but also specify word wrap options, it was a good choice for rendering large volumes of data.&lt;/p&gt;
&lt;p&gt;I did find its syntax a little verbose to work with,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var headerThickness = new LineThickness(LineWidth.Double, LineWidth.Single);

var doc = new Document(
    new Span(&amp;quot;Dinosaurs #&amp;quot;) { Color = Yellow }, Order.Id, &amp;quot;\n&amp;quot;,
    new Span(&amp;quot;Type: &amp;quot;) { Color = Yellow }, Order.Customer.Name,
    new Grid {
        Color = Gray,
        Columns = { GridLength.Auto, GridLength.Star(1), GridLength.Auto },
        Children = {
            new Cell(&amp;quot;Id&amp;quot;) { Stroke = headerThickness },
            new Cell(&amp;quot;Name&amp;quot;) { Stroke = headerThickness },
            new Cell(&amp;quot;Count&amp;quot;) { Stroke = headerThickness },
            Order.OrderItems.Select(item =&amp;gt; new[] {
                new Cell(item.Id),
                new Cell(item.Name),
                new Cell(item.Count) { Align = Align.Right },
            })
        }
    }
);

ConsoleRenderer.RenderDocument(doc);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Buy my oh my does it produce a great console table 👨‍🎨&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/tfEbNlJ8U1oqZCdmXGfq0/7d9eae3125e0c3053c4dfe91335a104e/peekmessages.png&quot; alt=&quot;CsConsoleFormat table output&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-litedb&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-litedb&quot; aria-label=&quot;5 litedb permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. &lt;a href=&quot;https://github.com/mbdavid/LiteDB&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;LiteDb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One of the requirements of Az-Lazy was to store a list of connections to be reused at any time. Since CLI&apos;s don&apos;t have any state, I needed a lightweight storage mechanism that can easily ship with the tool.&lt;/p&gt;
&lt;p&gt;In comes &lt;em&gt;LiteDb&lt;/em&gt;! With its entity framework style CRUD syntax, I really felt at home with this framework,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;// Create your POCO class
public class Dinosaur
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}

using(var db = new LiteDatabase(@&amp;quot;DinoDb.db&amp;quot;))
{
    var collection = db.GetCollection&amp;lt;Dinosaur&amp;gt;(&amp;quot;dinosaurs&amp;quot;);

    var dinosaur = new Dinosaur
    { 
        Id = 1
        Name = &amp;quot;T-Rex&amp;quot;, 
        Age = 39
    };

    collection.Insert(dinosaur);

    var oldDinosaurs = col.Find(x =&amp;gt; x.Age &amp;gt; 50);
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Since &lt;em&gt;LiteDb&lt;/em&gt; stores all its data into one file, from a tool perspective it ensures your not littering your client&apos;s computer with files.&lt;/p&gt;
&lt;h1 id=&quot;packages-used-now&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#packages-used-now&quot; aria-label=&quot;packages used now permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Packages used now&lt;/h1&gt;
&lt;h3 id=&quot;1-commandlineparser-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-commandlineparser-1&quot; aria-label=&quot;1 commandlineparser 1 permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. &lt;a href=&quot;https://github.com/commandlineparser/commandline&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;CommandLineParser&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&apos;ve still continued to use &lt;em&gt;CommandLineParser&lt;/em&gt; however it&apos;s starting to hit some limitations, namely nesting of commands. So something like &lt;code&gt;azlazy connection add --name &quot;test&quot; --connection &quot;connectionString&quot;&lt;/code&gt; is not allowed.&lt;/p&gt;
&lt;p&gt;Whilst this package has been great to get me started, I might start looking at other options as Az-Lazy starts supporting more complex commands.&lt;/p&gt;
&lt;h3 id=&quot;2-litedb&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-litedb&quot; aria-label=&quot;2 litedb permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;a href=&quot;https://github.com/mbdavid/LiteDB&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;LiteDb&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It just works, still happy with this package. Really recommend it for CLI tools!&lt;/p&gt;
&lt;h3 id=&quot;2-spectreconsole&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-spectreconsole&quot; aria-label=&quot;2 spectreconsole permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. &lt;a href=&quot;https://github.com/spectresystems/spectre.console&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Spectre.Console&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Spectre.Console&lt;/em&gt; was a big find for me, from the writer of &lt;a href=&quot;https://github.com/cake-build/cake&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Cake&lt;/a&gt; (&lt;a href=&quot;https://github.com/patriksvensson&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Patrik Svensson&lt;/a&gt;) it&apos;s a one-stop-shop for all your CLI needs. Just to name a few of the features,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Console Colours&lt;/li&gt;
&lt;li&gt;Progress bars&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Prompts&lt;/li&gt;
&lt;li&gt;Spinners&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After discovering this package I ended up doing a NuGet cull 🪓 which is why this list now stops at 3 (That culls still in progress as I&apos;m removing Pascal for Specters implementation).&lt;/p&gt;
&lt;p&gt;I won&apos;t go into all the code samples for this, but here are a few, beginning with progress indicators (also note the syntax to colour the output).&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;await AnsiConsole.Progress()
    .StartAsync(async ctx =&amp;gt;
    {
        // Define tasks
        var dinoTask = ctx.AddTask(&amp;quot;[green]Uploading dinosaurs[/]&amp;quot;);

        while (!ctx.IsFinished)
        {
            // Simulate some work
            await Task.Delay(250);
            dinoTask.Increment(1.5);
        }
    });&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Check out how it looks in action, it&apos;s great for long-running tasks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/7I5IMPuMYHvUIUyan3iNLY/d7b5e472fed4daba62218d4d2d3165ee/uploaddirectory.png&quot; alt=&quot;Upload progress bar&quot;&gt;&lt;/p&gt;
&lt;p&gt;Table&apos;s are also strightforward to create,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;// Create a table
var table = new Table();

// Add some columns
table.AddColumn(&amp;quot;Foo&amp;quot;);
table.AddColumn(new TableColumn(&amp;quot;Bar&amp;quot;).Centered());

// Add some rows
table.AddRow(&amp;quot;Baz&amp;quot;, &amp;quot;[green]Qux[/]&amp;quot;);
table.AddRow(new Markup(&amp;quot;[blue]Corgi[/]&amp;quot;), new Panel(&amp;quot;Waldo&amp;quot;));

// Render the table to the console
AnsiConsole.Render(table);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h1 id=&quot;other-great-code-snippets&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#other-great-code-snippets&quot; aria-label=&quot;other great code snippets permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other great code snippets&lt;/h1&gt;
&lt;p&gt;The only thing lacking for me in &lt;em&gt;Specter.Console&lt;/em&gt; was display a tree structure which is useful for folder hierarchies, (there is an open issue here if you want to &lt;a href=&quot;https://github.com/spectresystems/spectre.console/issues/144&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;show your interest&lt;/a&gt;) 🙏.&lt;/p&gt;
&lt;p&gt;To fulfil this requirement, I found a great article by Andrew Lock which renders this structure, &lt;a href=&quot;https://andrewlock.net/creating-an-ascii-art-tree-in-csharp/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Creating an ASCII-art tree in C#&lt;/a&gt;. Here&apos;s what it looks like for me,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6DeIXSOgHE0DO7STrDJPrw/281dd0130f40d8764dc9cdb6e3933509/containertree.png&quot; alt=&quot;Printing Tree structure&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;why-i-chose-net&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-i-chose-net&quot; aria-label=&quot;why i chose net permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why I chose .NET&lt;/h1&gt;
&lt;p&gt;So initially I was torn between Node JS and C#, there was an especially compelling article by &lt;a href=&quot;https://www.twilio.com/blog/how-to-build-a-cli-with-node-js&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Twilio&lt;/a&gt; outlining how you can create a great CLI experience that was winning me over. They also went so far as suggesting some interesting packages to make use of, here&apos;s a snippet of whats comparable with what I used for az-lazy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/inquirer&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;inquirer&lt;/a&gt;, &lt;a href=&quot;http://npm.im/enquirer&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;enquirer&lt;/a&gt; or &lt;a href=&quot;https://npm.im/prompts&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;prompts&lt;/a&gt; for complex input prompts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/chalk&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;chalk&lt;/a&gt; or &lt;a href=&quot;https://npm.im/kleur&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;kleur&lt;/a&gt; for colored output&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/ora&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ora&lt;/a&gt; for beautiful spinners&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/boxen&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;boxen&lt;/a&gt; for drawing boxes around your output&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/stmux&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;stmux&lt;/a&gt; for a tmux like UI&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/listr&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;listr&lt;/a&gt; for progress lists&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/meow&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;meow&lt;/a&gt; or &lt;a href=&quot;http://npm.im/arg&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;arg&lt;/a&gt; for basic argument parsing&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.im/commander&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;commander&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/yargs&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;yargs&lt;/a&gt; for complex argument parsing and subcommand support&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://oclif.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;oclif&lt;/a&gt; a framework for building extensible CLIs by Heroku (&lt;a href=&quot;https://infinitered.github.io/gluegun/#/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;gluegun&lt;/a&gt; as an alternative)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst the NuGet ecosystem is not as diverse as npm, after discovering &lt;em&gt;Spectre.Console&lt;/em&gt;, I found that its a one-stop-shop for most of those npm packages mentioned above.&lt;/p&gt;
&lt;p&gt;The deciding factor for me however was down to the userbase I was targeting. I figured the majority of my userbase would be more familiar with dotnet than npm, and this solidified the decision. However, whatever platform you choose I believe theres enough packages available to make a great CLI experience.&lt;/p&gt;
&lt;h1 id=&quot;how-to-create-a-net-cli-tool&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-create-a-net-cli-tool&quot; aria-label=&quot;how to create a net cli tool permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to create a .NET CLI tool&lt;/h1&gt;
&lt;p&gt;This guide shows you how to create a bare-bones .NET CLI tool.&lt;/p&gt;
&lt;h3 id=&quot;1-creating-a-new-project&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-creating-a-new-project&quot; aria-label=&quot;1 creating a new project permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Creating a new project&lt;/h3&gt;
&lt;p&gt;Let&apos;s start by creating a new directory and console application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mkdir barebonescli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd barebonescli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet new console&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The console app will already come with a standard-issue &lt;code&gt;Console.Writeline(&quot;Hello World&quot;);&lt;/code&gt; 😁&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-package-as-a-tool&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-package-as-a-tool&quot; aria-label=&quot;2 package as a tool permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Package as a tool&lt;/h3&gt;
&lt;p&gt;What distinguishes your console app from a dotnet tool is purly the .csproj file. In particular the package as a tool option &lt;code&gt;&amp;#x3C;PackAsTool&gt;true&amp;#x3C;/PackAsTool&gt;&lt;/code&gt;, Id which needs to be unique across all the NuGet packages in the gallery &lt;code&gt;&amp;#x3C;Id&gt;azlazy&amp;#x3C;/Id&gt;&lt;/code&gt; and tool command name &lt;code&gt;&amp;#x3C;ToolCommandName&gt;azlazy&amp;#x3C;/ToolCommandName&gt;&lt;/code&gt;. The full .csproj should look like this,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;RootNamespace&amp;gt;barebonescli&amp;lt;/RootNamespace&amp;gt;
    &amp;lt;PackAsTool&amp;gt;true&amp;lt;/PackAsTool&amp;gt;
    &amp;lt;ToolCommandName&amp;gt;barebones&amp;lt;/ToolCommandName&amp;gt;
    &amp;lt;PackageOutputPath&amp;gt;./nupkg&amp;lt;/PackageOutputPath&amp;gt;
    &amp;lt;Version&amp;gt;1.0.0&amp;lt;/Version&amp;gt;
    &amp;lt;Id&amp;gt;barebonescli&amp;lt;/Id&amp;gt;
    &amp;lt;Authors&amp;gt;Faesel Saeed&amp;lt;/Authors&amp;gt;
    &amp;lt;Owners&amp;gt;Faesel Saeed&amp;lt;/Owners&amp;gt;
    &amp;lt;Title&amp;gt;Demo app to show a bare bones CLI&amp;lt;/Title&amp;gt;
    &amp;lt;Description&amp;gt;This great CLI can greet the world&amp;lt;/Description&amp;gt;
    &amp;lt;Copyright&amp;gt;Copyright 2020 Faesel Saeed&amp;lt;/Copyright&amp;gt;
    &amp;lt;PackageRequireLicenseAcceptance&amp;gt;false&amp;lt;/PackageRequireLicenseAcceptance&amp;gt;
    &amp;lt;PackageLicenseFile&amp;gt;LICENSE.txt&amp;lt;/PackageLicenseFile&amp;gt;
    &amp;lt;PackageIconUrl&amp;gt;https://raw.githubusercontent.com/faesel/barebonescli/main/barebones/icon.png&amp;lt;/PackageIconUrl&amp;gt;
    &amp;lt;PackageTags&amp;gt;barebones greeting cli&amp;lt;/PackageTags&amp;gt;
    &amp;lt;RepositoryUrl&amp;gt;https://github.com/faesel/barebonescli.git&amp;lt;/RepositoryUrl&amp;gt;
    &amp;lt;RepositoryType&amp;gt;git&amp;lt;/RepositoryType&amp;gt;
    &amp;lt;RepositoryBranch&amp;gt;main&amp;lt;/RepositoryBranch&amp;gt;
    &amp;lt;PackageProjectUrl&amp;gt;https://github.com/faesel/barebonescli&amp;lt;/PackageProjectUrl&amp;gt;
    &amp;lt;PackageIcon&amp;gt;icon.png&amp;lt;/PackageIcon&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.Extensions.DependencyInjection&amp;quot; Version=&amp;quot;3.1.9&amp;quot; /&amp;gt;
    ...
    &amp;lt;None Include=&amp;quot;LICENSE.txt&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;$(PackageLicenseFile)&amp;quot; /&amp;gt;
    &amp;lt;None Include=&amp;quot;icon.png&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;\&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;em&gt;The Github links are fictional, you can replace them with your project.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To make your package more credible in the NuGet gallery there are other fields you can fill in. For the licence and package icon, you will need to place the files in the same project, the folder structure will look something like this, &lt;/p&gt;
&lt;p&gt;barebonescli&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;barebonescli.csproj&lt;/li&gt;
&lt;li&gt;Program.cs&lt;/li&gt;
&lt;li&gt;icon.png&lt;/li&gt;
&lt;li&gt;LICENCE.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-package-your-cli&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-package-your-cli&quot; aria-label=&quot;3 package your cli permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Package your CLI&lt;/h3&gt;
&lt;p&gt;The next step is to create a NuGet package, if you specified a &lt;code&gt;PackageOutputPath&lt;/code&gt; in your .csproj you will see the NuGet package in that folder. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;dotnet pack&lt;/code&gt; on the project&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once executed you should have a &lt;code&gt;barebonescli.1.0.0.nupkg&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&quot;4-upload-your-package-to-the-nuget-gallery&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-upload-your-package-to-the-nuget-gallery&quot; aria-label=&quot;4 upload your package to the nuget gallery permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Upload your package to the &lt;a href=&quot;https://www.nuget.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Nuget gallery&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Click on your profile&lt;/li&gt;
&lt;li&gt;Select upload package and upload the nupkg file&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4nzpdnGHTMflgXhTNRw57Y/a37a98cfc3a5bcf56e6ba1cbb7bbb5ac/uploadingpackages.png&quot; alt=&quot;Nuget package upload&quot;&gt;&lt;/p&gt;
&lt;p&gt;You could also alternatively use the CLI to push with &lt;code&gt;nuget push barebonescli.1.0.0.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once uploaded it will be ready to install as soon as its indexed,  &lt;code&gt;dotnet tool install --global barebonescli --version 1.0.0&lt;/code&gt; 😎&lt;/p&gt;
&lt;p&gt;From here the packages mentioned in this article can help you create a professional-looking CLI.&lt;/p&gt;
&lt;h1 id=&quot;more-about-az-lazy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#more-about-az-lazy&quot; aria-label=&quot;more about az lazy permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More about Az-Lazy&lt;/h1&gt;
&lt;p&gt;If you&apos;re interested in checking out Az-Lazy, you can install in with the command,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet tool install --global az-lazy&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;usefull-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#usefull-links&quot; aria-label=&quot;usefull links permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Usefull links&lt;/h1&gt;
&lt;p&gt;Do checkout &lt;em&gt;Nuget Must Haves&lt;/em&gt; command-line tagged package list, there&apos;s some great options in there that are not mentioned in this article.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nugetmusthaves.com/Tag/Commandline?page=1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Nuet Must Haves - CommandLine Packages&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[.NET & GRPC What they forgot to tell you]]></title><description><![CDATA[As an engineer, I have always had a heavy reliance on REST'ful API's for passing information between applications. With the introduction of open API specification now in version 3.0.3, integration has…]]></description><link>https://www.faesel.com/blog/dotnet-grpc-forgot-to-tell-you</link><guid isPermaLink="true">https://www.faesel.com/blog/dotnet-grpc-forgot-to-tell-you</guid><pubDate>Mon, 07 Sep 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As an engineer, I have always had a heavy reliance on REST&apos;ful API&apos;s for passing information between applications. With the introduction of &lt;a href=&quot;https://swagger.io/specification/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;open API specification&lt;/a&gt; now in version 3.0.3, integration has never been easier. The push to break monoliths into microservices has further boosted its usage, however I always found one size never fits all.&lt;/p&gt;
&lt;h2 id=&quot;where-rest-falls-down-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#where-rest-falls-down-&quot; aria-label=&quot;where rest falls down  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where REST falls down 👎&lt;/h2&gt;
&lt;p&gt;RESTful services have many shortfalls built in, if you&apos;re in my boat and most of the time your creating services and working on client applications. Having to tailor a client library to call those services has always been a tiresome task. 3rd party tooling like &lt;a href=&quot;https://github.com/RicoSuter/NSwag&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Nswag&lt;/a&gt; made some attempt to fix this problem however I still find breaking changes between versions that make huge changesets across all your endpoints. If your working across multiple languages like C# and Javascript your work doubles up. &lt;/p&gt;
&lt;p&gt;There are also encumbrances experienced when mixing batch/bulk operations, overnight jobs with REST&apos;ful APIs. Leading to complex solutions that auto scale or spread load over time. Having to go through each request-response cycle on bulk is just in-efficient.&lt;/p&gt;
&lt;p&gt;In most cases, responses are also in the form of JSON which is designed to cater for human readability at the expense of being inefficient. If you talking machine to machine readability is not a concern?  &lt;/p&gt;
&lt;p&gt;Lets also not mention those endless subjective PR threads trying to decide whats RESTful and whats not 😇.&lt;/p&gt;
&lt;h2 id=&quot;can-grpc-fill-the-gaps-🤷♂️&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#can-grpc-fill-the-gaps-%F0%9F%A4%B7%E2%99%82%EF%B8%8F&quot; aria-label=&quot;can grpc fill the gaps 🤷♂️ permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can GRPC fill the gaps 🤷‍♂️&lt;/h2&gt;
&lt;p&gt;If you experienced the REST&apos;ful pains above, GRPC&apos;s got your back. To get a quick demonstration of its capabilities, I recommend &lt;a href=&quot;http://wildermuth.com/2020/07/09/gRPC-Talk-at-netPonto&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Shawn Wildermuth&apos;s gRPC Talk at netPonto User Group (2020)&lt;/a&gt; he explains it in a easy to understand way.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/3wUtQb6C7to?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;To sum up its capabilities it has two key differences to REST (if your already familiar with this, skip to section &lt;strong&gt;Things to look into&lt;/strong&gt;).&lt;/p&gt;
&lt;h3 id=&quot;1-proto-files&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-proto-files&quot; aria-label=&quot;1 proto files permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Proto files&lt;/h3&gt;
&lt;p&gt;Proto files contain the definition of your API in a structured spec compliant way. The code below shows a simple &lt;em&gt;GreetingsService&lt;/em&gt; with a basic request and response.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;syntax = &amp;quot;proto3&amp;quot;;

option csharp_namespace = &amp;quot;HelloService&amp;quot;;

service GreetingsService {
    rpc GetHello (HelloRequest) returns (HelloResponse);
}

message HelloRequest {
    int32 HelloCount = 1;
}

message HelloResponse {
    string HelloDescription = 1;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Proto files can then be used to transpile code &lt;a href=&quot;https://grpc.io/docs/languages/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;into many languages&lt;/a&gt;. When transpiling we have the option to either create code for a &lt;strong&gt;server&lt;/strong&gt; or &lt;strong&gt;client&lt;/strong&gt;. Code generation creates a base class &lt;strong&gt;GreetingsServiceBase&lt;/strong&gt; for us (it&apos;s generated in the bin folder on build time). Eventually, you end up with a service that looks like this:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;using Grpc.Core;
using HelloServer;
using System.Threading.Tasks;

namespace TaxServer.Services
{
    public class HelloGrpcService : GreetingsService.GreetingsServiceBase
    {
        public override async Task&amp;lt;HelloResponse&amp;gt; GetHello(HelloRequest request, ServerCallContext context)
        {
            return new HelloResponse { HelloDescription = $&amp;quot;{request.HelloCount} Hellos to you!&amp;quot; };
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The act of sharing and distributing proto files means that consuming clients can easily create their own client code and be completely agnostic of language.&lt;/p&gt;
&lt;h3 id=&quot;2-defining-requestresponse-lifecycle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-defining-requestresponse-lifecycle&quot; aria-label=&quot;2 defining requestresponse lifecycle permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Defining request/response lifecycle&lt;/h3&gt;
&lt;p&gt;GRPC allows you to change its request/response lifecycle, it has 4 options described below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unary RPC&apos;s&lt;/strong&gt;: Unary RPCs where the client sends a single request to the server and gets a single response back.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server Streaming RPC&apos;s&lt;/strong&gt;: Server streaming RPCs where the client sends a request to the server and gets a stream to read a sequence of messages back.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client Streaming RPC&apos;s&lt;/strong&gt;: Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bi-Directional Streaming RPC&apos;s&lt;/strong&gt;: Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/what-is-grpc/core-concepts/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;em&gt;Taken from GRPC.io&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These additional modes are more suited for batch processing over your traditional request/response lifecycle.&lt;/p&gt;
&lt;h2 id=&quot;things-to-look-into-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#things-to-look-into-&quot; aria-label=&quot;things to look into  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Things to look into ✅&lt;/h2&gt;
&lt;p&gt;So far so great, getting to this point is relatively easy and straightforward. Problem is all the tutorials seem to end at this point 😟. To have a live API several additional concerns need to be addressed. My list was as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check how we can consume/distribute .proto files&lt;/li&gt;
&lt;li&gt;How to create a health checking probe for a GRPC service&lt;/li&gt;
&lt;li&gt;How to version endpoints&lt;/li&gt;
&lt;li&gt;Can a .NET Framework client app consume a .NET Core GRPC server?&lt;/li&gt;
&lt;li&gt;How to debug with tools, call an endpoint&lt;/li&gt;
&lt;li&gt;Authentication and authorization&lt;/li&gt;
&lt;li&gt;Can you call the service from a browser?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-check-how-we-can-consumedistribute-proto-files&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-check-how-we-can-consumedistribute-proto-files&quot; aria-label=&quot;1 check how we can consumedistribute proto files permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Check how we can consume/distribute .proto files&lt;/h3&gt;
&lt;p&gt;There are two different approaches to achieve this, mainly dependent on whether your service is internal or external public facing.&lt;/p&gt;
&lt;h4 id=&quot;option-1---with-nuget-packages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#option-1---with-nuget-packages&quot; aria-label=&quot;option 1   with nuget packages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Option 1 - With nuget packages&lt;/h4&gt;
&lt;p&gt;Option one is to distribute your proto files using Nuget packages. This solution is recommended in the situation where you are using GRPC for internal services. Your solution structure would look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HelloService.Protos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hello.protos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HelloService.Server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server code ... &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case we would use a Nuspec file to package the .protos and output it into the following structure in the client app. Considering you could be consuming more than one GRPC service it might make sense to create subfolders to know where the proto file comes from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HelloClient
/Protos/&lt;strong&gt;service name goes gere&lt;/strong&gt;/Hello.protos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here the client application can generate its client service code using the protofile. If you want to go one step further there is a dotnet command you can use to integrate the proto file into the &lt;strong&gt;.csproj&lt;/strong&gt; file using a &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/grpc/dotnet-grpc?view=aspnetcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;dotnet command&lt;/a&gt; which can be triggered after the installation of the package.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc add-file Hello.proto&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h4 id=&quot;option-2---with-a-discovery-endpoint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#option-2---with-a-discovery-endpoint&quot; aria-label=&quot;option 2   with a discovery endpoint permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Option 2 - With a discovery endpoint&lt;/h4&gt;
&lt;p&gt;This approach is recommended if your GRPC service is a service meant for external consumers. The idea behind this approach is to expose which services/endpoints are available. The method is dependent on the &lt;a href=&quot;https://www.nuget.org/packages/Grpc.Reflection/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Grpc.Reflection&lt;/strong&gt;&lt;/a&gt; Nuget package.&lt;/p&gt;
&lt;p&gt;The general approach is outlined &lt;a href=&quot;https://github.com/grpc/grpc/blob/master/doc/csharp/server_reflection.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Once implemented it allows you to use an endpoint from the server code to generate your client code. Dotnet has a &lt;a href=&quot;https://www.nuget.org/packages/dotnet-grpc-cli/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GRPC CLI tool&lt;/a&gt;, that can read from a server reflection endpoint and produce a proto file out of it. The command looks like this,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc-cli dump https://localhost:5001 Reflection.HelloService&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;You can also write the proto file to disk using this command&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc-cli dump http://localhost:10042 Reflection.HelloService -o ./prot&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;2-how-to-create-a-health-checking-probe-for-a-grpc-service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-how-to-create-a-health-checking-probe-for-a-grpc-service&quot; aria-label=&quot;2 how to create a health checking probe for a grpc service permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. How to create a health checking probe for a GRPC service&lt;/h3&gt;
&lt;p&gt;Health checking probe endpoints are useful for monitoring uptime as well as managing containers when services are unresponsive. GRPC specification has a defined structure for creating your health checking endpoint called the &lt;a href=&quot;https://github.com/grpc/grpc/blob/master/doc/health-checking.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;GRPC Health Checking Protocol&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;However, since we are using asp.net core we can get away from this and rely on middleware to do this for us with little code.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
  services.AddGrpc();
  services.AddHealthChecks();
  ...
}

public void Configure(IApplicationBuilder app)
{
  app.UseEndpoints(endpoints =&amp;gt;
  {
    endpoints.MapHealthChecks(&amp;quot;/healthz&amp;quot;);
    ...
  });
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now when running locally &lt;strong&gt;&lt;a href=&quot;https://localhost:5001/healthz&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://localhost:5001/healthz&lt;/a&gt;&lt;/strong&gt; we can get a 200 response. Here is what the output logs look like:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;      Request starting HTTP/2 GET https://localhost:5001/healthz
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint &amp;#39;Health checks&amp;#39;
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint &amp;#39;Health checks&amp;#39;
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished in 19.056ms 200 text/plain&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;3-how-to-version-endpoints&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-how-to-version-endpoints&quot; aria-label=&quot;3 how to version endpoints permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. How to version endpoints&lt;/h3&gt;
&lt;p&gt;The problem of versioning is easily solved using namespaces, it&apos;s just a case of incorporating your version number into the namespace like so,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;option csharp_namespace = &amp;quot;HelloService.v1&amp;quot;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;For each version, you would have different proto files and different service implementations. When inheriting from the base we can be specific on the version we need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server Code&lt;/strong&gt;&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class HelloGrpcService : HelloService.v1.GreetingsService.GreetingsServiceBase
{
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;strong&gt;Client Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The namespaces segregate the types so it just works out.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//Version 1
using var channel = GrpcChannel.ForAddress(&amp;quot;https://localhost:5001&amp;quot;);
var client = new HelloService.v1.GreetingsService.GreetingsServiceClient(channel);
var response = await client.GetHello(new HelloService.v1.HelloRequest() { 
      HelloCount = 1
});

//Version 2
using var channel2 = GrpcChannel.ForAddress(&amp;quot;https://localhost:5001&amp;quot;);
var client2 = new HelloService.v2.GreetingsService.GreetingsServiceClient(channel);
var response2 = await client2.GetHello(new HelloService.v2.HelloRequest() {
      HelloCount = 2
});&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;4-can-a-net-framework-client-app-consume-a-net-core-grpc-server&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-can-a-net-framework-client-app-consume-a-net-core-grpc-server&quot; aria-label=&quot;4 can a net framework client app consume a net core grpc server permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Can a .NET Framework client app consume a .NET Core GRPC server?&lt;/h3&gt;
&lt;p&gt;Turns out it can yes, however ... as GRPC is built upon HTTP/2 which is not supported in .net framework, making secure connections to your API is not possible. The client code for .net framework is very similar, we just pass a &lt;strong&gt;ChannelCredentials.Insecure&lt;/strong&gt; option in when building the client.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var channel = new Channel(&amp;quot;127.0.0.1&amp;quot;, 5000, ChannelCredentials.Insecure);
var client = new GreetingsService.GreetingsServiceClient(channel);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;5-how-to-debug-with-tools-call-an-endpoint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-how-to-debug-with-tools-call-an-endpoint&quot; aria-label=&quot;5 how to debug with tools call an endpoint permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. How to debug with tools, call an endpoint&lt;/h3&gt;
&lt;p&gt;If you&apos;re like me and you&apos;ve come from a REST background your most likely used to polished tools like Postman or Insomnia to test out your endpoints. Sadly these tools don&apos;t support GRPC 😢... yet anyway...&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/grpc-ecosystem/awesome-grpc#lang-cs&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GRPC Tooling Community&lt;/a&gt; is still in its infancy. There are however some new players that are emerging that get the job done, most notably for me BloomRPC. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6p6bGkCU7Tpa3tMwPsoRxO/adb23285ed92ea9c2c757ef62a4600a9/BloomRPC.png&quot; alt=&quot;BloomRPC&quot;&gt;&lt;/p&gt;
&lt;p&gt;After importing in your proto files you get a great swagger-esk UI that automatically build up your request body from your proto file.&lt;/p&gt;
&lt;h3 id=&quot;6-authentication-and-authorization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-authentication-and-authorization&quot; aria-label=&quot;6 authentication and authorization permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Authentication and authorization&lt;/h3&gt;
&lt;p&gt;Because we are working under the guise of asp.net core we can take advantage of its authentication middleware. The following authentication methods are supported.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Active Directory&lt;/li&gt;
&lt;li&gt;Client Certificate&lt;/li&gt;
&lt;li&gt;IdentityServer&lt;/li&gt;
&lt;li&gt;JWT Token&lt;/li&gt;
&lt;li&gt;OAuth 2.0&lt;/li&gt;
&lt;li&gt;OpenID Connect&lt;/li&gt;
&lt;li&gt;WS-Federation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a simple code example of authenticating a JWT token with an identity service. As you can see its no different from a REST service.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
    var authority = &amp;quot;https://myidentityserver.com&amp;quot;;

    services
        .AddAuthentication(&amp;quot;Bearer&amp;quot;)
        .AddJwtBearer(&amp;quot;Bearer&amp;quot;, options =&amp;gt;
        {
            options.Authority = authority;
            options.RequireHttpsMetadata = false;
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateAudience = false,
            };
            options.ConfigurationManager = new ConfigurationManager&amp;lt;OpenIdConnectConfiguration&amp;gt;
            (
                metadataAddress: authority + &amp;quot;/.well-known/openid-configuration&amp;quot;,
                configRetriever: new OpenIdConnectConfigurationRetriever(),
                docRetriever: new HttpDocumentRetriever { RequireHttps = false }
            );
            options.Events = new JwtBearerEvents
            {
                OnTokenValidated = context =&amp;gt;
                {
                    var ci = (ClaimsIdentity)context.Principal.Identity;
                    var authHeader = context.Request.Headers[&amp;quot;Authorization&amp;quot;];
                    var token = authHeader.FirstOrDefault()?.Substring(7);
                    if (token != null)
                    {
                        ci.AddClaim(new Claim(&amp;quot;token&amp;quot;, token));
                    }

                    return Task.CompletedTask;
                }
            };
        });

    services.AddAuthorization();
    ...
}

public void Configure(IApplicationBuilder app)
{
    app.UseAuthentication();
    app.UseAuthorization();
    ...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Below is output from an authenticated request:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;      Request starting HTTP/2 POST https://localhost:5001/HelloGrpcService.GreetingsService/GetHello application/grpc
info: Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler[2]
      Successfully validated the token.
info: Microsoft.AspNetCore.Authorization.DefaultAuthorizationService[1]
      Authorization was successful.
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint &amp;#39;gRPC - /HelloGrpcService.GreetingsService/GetHello&amp;#39;
Request parameter 1
Request came from test-client-id
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint &amp;#39;gRPC - /HelloGrpcService.GreetingsService/GetHello&amp;#39;
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished in 5865.2411ms 200 application/grpc&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;7-can-you-call-the-service-from-a-browser&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-can-you-call-the-service-from-a-browser&quot; aria-label=&quot;7 can you call the service from a browser permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Can you call the service from a browser?&lt;/h3&gt;
&lt;p&gt;Currently, as it stands the answer is no, browsers don&apos;t offer fine-grained control over API requests to support GRPC. However, there is some light at the end of the tunnel.&lt;/p&gt;
&lt;p&gt;Back in 2016 Google started working on a specification for &quot;GRPC for the browser&quot;. You can read more about it &lt;a href=&quot;https://grpc.io/blog/state-of-grpc-web/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; but in essence,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic idea is to have the browser send normal HTTP requests (with Fetch or XHR) and have a small proxy in front of the gRPC server to translate the requests and responses to something the browser can use - grpc.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the C# world, Microsoft has an implementation of this specification in their docs, &lt;a href=&quot;https://docs.microsoft.com/en-gb/aspnet/core/grpc/browser?view=aspnetcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Use gRPC in browser apps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some disclaimers to this, as gRPC supports streaming and bidirectional requests this addition is only recommended for unary requests. Due to this limiting factor helpers are present to turn it on and off for services when setting up GRPC services in the startup,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;endpoints.MapGrpcService&amp;lt;HelloGrpcService&amp;gt;().EnableGrpcWeb().RequireCors(&amp;quot;AllowAll&amp;quot;);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;What I find particularly interesting is that the problem grpc-web solves is similar to the problems we have with .net framework (https/2 is not supported). Could this perhaps be an answer to getting secure requests working? ... sadly not yet! at the moment its not possible as grpc-web was was built on .net standard 2.1 so .net framework is not supported. Perhaps there might be movement on this in time to come.&lt;/p&gt;
&lt;h2 id=&quot;things-i-missed-out&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#things-i-missed-out&quot; aria-label=&quot;things i missed out permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Things I missed out&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Integration Testing, im a big fan of using in memory testing with Test Server it would be interesting to see if this works with a GRPC service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;useful-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useful-links&quot; aria-label=&quot;useful links permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Useful Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc/tree/master/src/csharp&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;C# Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-dotnet/tree/master/examples&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;More c# examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Evolving your Windows Terminal using Powershell libraries]]></title><description><![CDATA[As a windows user the terminal experience has always been lacking, up till the new windows terminal was released. Incorporating WSL (Windows Subsystem for Lynx) really helped bridge that gap as it…]]></description><link>https://www.faesel.com/blog/evolving-windows-terminal</link><guid isPermaLink="true">https://www.faesel.com/blog/evolving-windows-terminal</guid><pubDate>Fri, 24 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As a windows user the terminal experience has always been lacking, up till the new &lt;a href=&quot;https://www.microsoft.com/en-gb/p/windows-terminal/9n0dx20hk701?rtc=1&amp;#x26;activetab=pivot:overviewtab&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;windows terminal&lt;/a&gt; was released. Incorporating &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;WSL (Windows Subsystem for Lynx)&lt;/a&gt; really helped bridge that gap as it opens up console experience that makes use of &lt;strong&gt;apt-get&lt;/strong&gt; use the plethora of packages available. &lt;/p&gt;
&lt;p&gt;Having tried using this for react apps I found the experience really slow when building apps. Running the same app in Powershell would start up in a fraction of the time. This got me thinking..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I evolve my Powershell console experience in the same way I can with WSL?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at &lt;a href=&quot;https://www.powershellgallery.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Powershells Gallery&lt;/a&gt;, they have a total of &lt;strong&gt;7,091&lt;/strong&gt; unique packages. There must be some things here we can use.&lt;/p&gt;
&lt;p&gt;This article is about my journey from reading this blog post &lt;a href=&quot;https://www.hanselman.com/blog/HowToMakeAPrettyPromptInWindowsTerminalWithPowerlineNerdFontsCascadiaCodeWSLAndOhmyposh.aspx&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&quot;How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-posh&quot;&lt;/a&gt; by Scott Hanselman, to taking the experience one step further to evolve my terminal. Video on it here:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/lu__oGZVT98?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes you have already read Hanselman&apos;s article and kitted your terminal out with the following (if not do so):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added Cascadia Ligature Font, for more compact and expressive text.&lt;/li&gt;
&lt;li&gt;Added oh-my-posh, for better git branch information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;making-use-of-your-powershell-profile&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#making-use-of-your-powershell-profile&quot; aria-label=&quot;making use of your powershell profile permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making use of your Powershell profile&lt;/h2&gt;
&lt;p&gt;Before your Powershell window starts, any code in your Powershell profile is executed first. You can find your profile directory location by typing the following in your console,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;$PROFILE&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;It&apos;s from this file we can begin importing in scripts and adding custom functions. If you followed the prerequisites, your profile file will be mostly empty except perhaps a command to set the theme in oh-my-posh.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Set-Theme Paradox&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;incorporating-packages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#incorporating-packages&quot; aria-label=&quot;incorporating packages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Incorporating packages&lt;/h2&gt;
&lt;p&gt;Before we start importing packages we need to get &lt;strong&gt;PowerShellGet&lt;/strong&gt; setup, installation steps can be found here &lt;a href=&quot;https://docs.microsoft.com/en-gb/powershell/scripting/gallery/installing-psget?view=powershell-7&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Installing PowerShellGet&lt;/a&gt;. Once complete you can start installing scripts like so,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name WifiTools &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;That&apos;s it, you can actually start checking your wifi signal with &lt;code&gt;Show-WifiState&lt;/code&gt; 📶! Aside from wifi tools here are some choice selections, some of these are recommended as it helps create building blocks for your own custom scripts:&lt;/p&gt;
&lt;h3 id=&quot;1-terminal-icons&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-terminal-icons&quot; aria-label=&quot;1 terminal icons permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Terminal-Icons/0.1.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;1. Terminal Icons&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Terminal-Icons/0.1.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Terminal-Icons&lt;/a&gt; really helps improve visibility when navigating. It also allows you to format your directory list wide so that you can see all the files and folders without scrolling down.&lt;/p&gt;
&lt;p&gt;You can activate it in your Powershell profile by adding the following import&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Import-Module -Name Terminal-Icons&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;And that&apos;s it! witness the beauty:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5GsSsHw0n1zQ2ST9ItYIM6/1f8e2a1d08542fdfaa24acc1b35dbc02/terminal-icons.png&quot; alt=&quot;Terminal Icons&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-tree&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-tree&quot; aria-label=&quot;2 tree permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Tree/1.0.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;2. Tree&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Tree/1.0.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tree&lt;/a&gt; helps with directory discover and searching by printing in (as the name suggests) a tree structure. I alias this package and mainly use it for listing and searching, below is what you need in your Powershell profile,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name Tree &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# Shows a tree structure of the current directory (excluding folders you want to ignore)
function treels {
    Get-ChildItemTree . -I &amp;#39;node_modules|bin|obj|.git|.vs&amp;#39;
}

# Searches the current directory for a pattern (wildcards * are accepted) and returns the tree view with matching files
function treef ([string] $pattern) {
    Get-ChildItemTree . -P $pattern -I &amp;#39;node_modules|bin|obj|.git|.vs&amp;#39;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Example showing a directory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/2TiqouIH6bTQ4U6quojGO7/0c1d294bac92233dd453300b482afb93/TreeList.png&quot; alt=&quot;Tree Directory List&quot;&gt;&lt;/p&gt;
&lt;p&gt;Example search for a file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/p7NOrYHf5oRdLz9IqwDzR/7de6b06b6233dc5d308dead818926593/TreeSearch.png&quot; alt=&quot;Tree Search&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-burnt-toast&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-burnt-toast&quot; aria-label=&quot;3 burnt toast permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/BurntToast/0.7.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;3. Burnt Toast&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/BurntToast/0.7.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;BurntToast&lt;/a&gt; great package to notify yourself of any long running tasks. It hooks into the native windows toast notification system and has a plethora of options. One ideal use for this is cloning a repo (I&apos;m talking about that repo dating back to the dinosaurs 🐉) since it lets you kick it off and automatically get a notification when done. &lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name BurntToast&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# clones a repo and notify with a toast
function clonem([string] $url) {
    git clone $url
    New-BurntToastNotification -AppLogo &amp;#39;C:\Icons\completed.png&amp;#39; -Text &amp;quot;Finished!&amp;quot;, &amp;#39;Finished cloning repo&amp;#39;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;I also find it great for scheduling in reminders, this one is dependent on a function which I import at the top of the profile &lt;a href=&quot;https://github.com/Windos/BurntToast/blob/master/Examples/Example05/New-ToastReminder.ps1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;code example found here&lt;/a&gt;.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# IMPORT CUSTOM FILES
. &amp;quot;C:\Users\faese\Documents\WindowsPowerShell\Custom\BurntToast.ps1&amp;quot;

# trigger a remind after x minuites with some custom text
function reminder([int]$minuites, [string]$text) {
    New-ToastReminder -AppLogo &amp;#39;C:\Icons\reminder.png&amp;#39; -Minutes $minuites -ReminderTitle &amp;#39;Reminder Reminder!&amp;#39; -ReminderText $text
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Example to ensure you never eggless,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4zg5SUqQ14zjuZE6QArrj0/6f2809c3942708f89aea47dd3c815bdb/reminder.png&quot; alt=&quot;Toast Reminder&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-coloredtext&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-coloredtext&quot; aria-label=&quot;4 coloredtext permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/ColoredText/1.0.6&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;4. ColoredText&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This library essentially allows you to print in different colours pure and simple. I mainly use this as a confirmation line when chaining together several commands so your eye just looks for coloured text to look for completion.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name ColoredText&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# create a new branch
function newb([string]$branchName){
    git branch $branchName
    git checkout $branchName --track

    $message = &amp;quot;Finished creating branch: &amp;quot; + $branchName

    cprint black $message on rainbow print
}

# publish branch
function publish {
    $branchName = git rev-parse --abbrev-ref HEAD
    git push --set-upstream origin $branchName

    $message = &amp;quot;Finished publishing branch: &amp;quot; + $branchName

    cprint black $message on rainbow print
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6IctC3h57SGaYFmQelmlx4/2840d80d68895fe0dde359b64328c345/coloredtext.png&quot; alt=&quot;Colored Text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;some-other-honourable-mentions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#some-other-honourable-mentions&quot; aria-label=&quot;some other honourable mentions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some other honourable mentions&lt;/h3&gt;
&lt;p&gt;Below are some other honourable mentions that I needed more time to investigate,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/ps-menu/1.0.6&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;PS Menu&lt;/a&gt;, allows you to create a multi-select menu of options.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/WTToolBox/1.6.0&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;WTToolBox&lt;/a&gt;, helps manage your windows terminal, I was mainly going to use this to get a list of shortcuts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;download-my-profile-code-here&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#download-my-profile-code-here&quot; aria-label=&quot;download my profile code here permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download my profile code here&lt;/h2&gt;
&lt;p&gt;You can download my complete profile code &lt;a href=&quot;https://github.com/faesel/terminal-profile&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;I&apos;m still on a path of discovery with Powershell, I&apos;ve seen some great packages that can help make my terminal experience fast and efficient. However, I do feel I&apos;m at the very beginning of this journey and with the continued improvements to WSL, I may flip flop to the Linux side.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GatsbyJS SEO and Open Graph with Helmet]]></title><description><![CDATA[I recently recreated my blog in GatsbyJs, you can download a template of it here gatsby-techblog-starter. In the joy of sharing its simplicity to the world, I tweet about my intro article with a link…]]></description><link>https://www.faesel.com/blog/gatsby-seo-opengraph-helmet</link><guid isPermaLink="true">https://www.faesel.com/blog/gatsby-seo-opengraph-helmet</guid><pubDate>Sat, 11 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I recently recreated my blog in GatsbyJs, you can download a template of it here &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;gatsby-techblog-starter&lt;/a&gt;. In the joy of sharing its simplicity to the world, I tweet about my &lt;a href=&quot;https://www.faesel.com/blog/gatsby-tech-blog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;intro article&lt;/a&gt; with a link to my website. To my dismay, I noticed the tweet was lacking a lot of formatting and information on the link... would you even see that link 👀?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/37l0W6HYcNXrTDrAbMDJSn/04d9b245622621d5b0eafaf59657ea07/twitter-no-opengraph.png&quot; alt=&quot;Twitter without opengraph&quot;&gt;&lt;/p&gt;
&lt;p&gt;I realised the secret sauce I was missing was called &lt;strong&gt;Open Graph Protocol&lt;/strong&gt;. From the &lt;a href=&quot;https://ogp.me/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;specifications website&lt;/a&gt; itself, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In essence its the mata tags you see below, that sites like Twitter, Linked In, Facebook use to correctly render an enriched link of the page on their website,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;meta data-react-helmet=&amp;quot;true&amp;quot; name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;summary_large_image&amp;quot;&amp;gt;
&amp;lt;meta data-react-helmet=&amp;quot;true&amp;quot; name=&amp;quot;twitter:site&amp;quot; contact=&amp;quot;@faeselsaeed&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content=&amp;quot;&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:title&amp;quot; content=&amp;quot;Creating my dream tech blog with GatsbyJS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:description&amp;quot; content=&amp;quot;I&amp;#39;m someone who&amp;#39;s always had my own tech blog, I…&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content=&amp;quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;

&amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;Creating my dream tech blog with GatsbyJS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;https://www.faesel.com/blog/gatsby-tech-blog-starter&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:description&amp;quot; content=&amp;quot;I&amp;#39;m someone who&amp;#39;s always had my own tech blog, I…&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:image&amp;quot; content=&amp;quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:image:alt&amp;quot; content=&amp;quot;Gatsby JS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This article is about how I used &lt;a href=&quot;https://helmetjs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Helmet JS&lt;/a&gt; to improve my sites shareability and improving its SEO capabilities.&lt;/p&gt;
&lt;h2 id=&quot;step-1---install-those-dependencies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---install-those-dependencies&quot; aria-label=&quot;step 1   install those dependencies permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Install those dependencies&lt;/h2&gt;
&lt;p&gt;The dependencies we are interested in are as follows:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;npm intall gatsby-plugin-react-helmet react-helmet&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;You can read more about the gatsby plugin &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-react-helmet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; along with more detailed information on Helmet js and all its supported tabs &lt;a href=&quot;https://github.com/nfl/react-helmet&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-2---store-your-constants-in-your-gatsby-config&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---store-your-constants-in-your-gatsby-config&quot; aria-label=&quot;step 2   store your constants in your gatsby config permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Store your constant&apos;s in your gatsby config&lt;/h2&gt;
&lt;p&gt;When creating a Gatsby website we always have a config file in the root of the project called &lt;strong&gt;gatsby-config.js&lt;/strong&gt;, from here we can add various plugins like so,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    plugins: [
        &amp;#39;gatsby-plugin-react-helmet&amp;#39;
    ]
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This config file is also the place to store all you common reusable information in Gatsby&apos;s predefined &lt;strong&gt;siteMetadata&lt;/strong&gt; tag (this tag makes it accessible through GraphQl). We will be using this later on to populate our head with various information.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;json&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    siteMetadata: {
        title: &amp;#39;FAESEL.COM&amp;#39;,
        author: &amp;#39;Faesel Saeed&amp;#39;,
        description: &amp;#39;Personal blog of Faesel Saeed&amp;#39;,
        siteUrl: &amp;#39;https://www.faesel.com&amp;#39;,
        social: {
            linkedin: &amp;#39;https://www.linkedin.com/in/faesel-saeed-a97b1614&amp;#39;,
            twitter: &amp;#39;https://twitter.com/@faeselsaeed&amp;#39;,
            twitterUsername: &amp;#39;@faeselsaeed&amp;#39;,
            github: &amp;#39;https://github.com/faesel&amp;#39;,
            flickr: &amp;#39;https://www.flickr.com/photos/faesel/&amp;#39;,
            email: &amp;#39;faesel@outlook.com&amp;#39;
        },
        rssFeedUrl: &amp;#39;/rss.xml&amp;#39;
    },
    ...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-3---create-your-head-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---create-your-head-component&quot; aria-label=&quot;step 3   create your head component permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Create your head component&lt;/h2&gt;
&lt;p&gt;Now that we have all our static information in the config we can query this out using GraphQl through the objects &gt; &lt;strong&gt;site&lt;/strong&gt; &gt; &lt;strong&gt;siteMetadata&lt;/strong&gt;. We can also import in &lt;strong&gt;Helmet&lt;/strong&gt; and start building up our Head meta data. My Head component looks like this,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;#39;react&amp;#39;
import { Helmet } from &amp;#39;react-helmet&amp;#39;
import { useStaticQuery, graphql } from &amp;#39;gatsby&amp;#39;

import favicon from &amp;#39;../../static/favicon.ico&amp;#39;

const Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type datePublished }) =&amp;gt; {
    const data = useStaticQuery(graphql`
        query {
            site {
                siteMetadata {
                    siteUrl,
                    title,
                    author,
                    social {
                        twitterUsername
                    }
                }
            }
        }
    `)

    return (
        &amp;lt;&amp;gt;
            &amp;lt;Helmet title={`${pageTitle} | ${data.site.siteMetadata.title}`} /&amp;gt;
            &amp;lt;Helmet&amp;gt;
                &amp;lt;link rel=&amp;quot;icon&amp;quot; href={favicon} /&amp;gt;

                &amp;lt;meta name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;summary_large_image&amp;quot;&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:site&amp;quot; contact={data.site.siteMetadata.social.twitterUsername}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content={data.site.siteMetadata.twitterUsername}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:title&amp;quot; content={title}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:description&amp;quot; content={description}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content={imageUrl}&amp;gt;&amp;lt;/meta&amp;gt;

                &amp;lt;meta property=&amp;quot;og:locale&amp;quot; content=&amp;quot;en_GB&amp;quot; /&amp;gt;
                &amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content={data.site.siteMetadata.title} /&amp;gt;
                &amp;lt;meta property=&amp;quot;og:title&amp;quot; content={title}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:url&amp;quot; content={url}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:description&amp;quot; content={description}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:image&amp;quot; content={imageUrl}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:image:alt&amp;quot; content={imageAlt}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:type&amp;quot; content={type} /&amp;gt;
            &amp;lt;/Helmet&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Head&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;(Note some of the properties get fleshed out later on in the article)&lt;/p&gt;
&lt;p&gt;The Helmet component injects in HTML tags into the head of the HTML document. To understand what the tags represent within the Helmet component, and to see a full range of what&apos;s available use the following two links.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ogp.me/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tags from Open Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tags from Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-3---using-your-head-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---using-your-head-component&quot; aria-label=&quot;step 3   using your head component permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Using your head component&lt;/h2&gt;
&lt;p&gt;Using your head component is quite straight forward, its more a case of working out where to source all your properties. Here&apos;s what my page looks like,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;quot;react&amp;quot;
import { graphql } from &amp;quot;gatsby&amp;quot;
import Layout from &amp;quot;../components/layout&amp;quot;
import Head from &amp;quot;../components/head&amp;quot;

// Add some code here to get all your data from markdown, cms etc.

const Blog = props =&amp;gt; {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;Head 
        pageTitle={props.data.title}
        title={props.data.title}
        description={props.data.bodym.childMarkdownRemark.excerpt}
        url={`${props.data.site.siteMetadata.siteUrl}/blog/${props.data.slug}`}
        imageUrl={props.data.hero.file.url}
        imageAlt={props.data.hero.title} 
        type=&amp;#39;article&amp;#39; 
        datePublished={props.data.contentfulBlog.iso8601DatePublished}/&amp;gt;

      &amp;lt;h1&amp;gt;My Great Blog Post&amp;lt;/h1&amp;gt;
      ...
    &amp;lt;/Layout&amp;gt;
  )
}

export default Blog&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-4---go-further-with-json-ld-and-linked-data&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---go-further-with-json-ld-and-linked-data&quot; aria-label=&quot;step 4   go further with json ld and linked data permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Go further with JSON-LD and Linked data&lt;/h2&gt;
&lt;p&gt;So far so great, we have enough here for most social media sites to understand the structure of our data and to use this to correctly format the information on a consuming website. But what do search engines use?&lt;/p&gt;
&lt;p&gt;The answer is &lt;a href=&quot;https://json-ld.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Json-ld and linked data&lt;/a&gt;, best explained by the specs website itself,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON-LD is a lightweight Linked Data format. It is easy for humans to read and write. It is based on the already successful JSON format and provides a way to help JSON data interoperate at Web-scale. JSON-LD is an ideal data format for programming environments, REST Web services, and unstructured databases such as Apache CouchDB and MongoDB.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linked Data empowers people that publish and use information on the Web. It is a way to create a network of standards-based, machine-readable data across Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To sum it up in one sentence &lt;em&gt;we are using JSON data to create structured information so that websites can deep link with each other&lt;/em&gt;. With this in mind our head component looks like this:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;#39;react&amp;#39;
import { Helmet } from &amp;#39;react-helmet&amp;#39;
import { useStaticQuery, graphql } from &amp;#39;gatsby&amp;#39;

const Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type, datePublished }) =&amp;gt; {
    const data = useStaticQuery(graphql`
        query {
            site {
                siteMetadata {
                    siteUrl,
                    title,
                    author,
                    social {
                        twitterUsername
                    }
                }
            }
        }
    `)

    const ldJsonBreadcrumb = {
        &amp;#39;@context&amp;#39;: &amp;#39;https://schema.org&amp;#39;,
        &amp;#39;@type&amp;#39;: &amp;#39;BreadcrumbList&amp;#39;,
        &amp;#39;itemListElement&amp;#39;: [{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 1,
            &amp;#39;name&amp;#39;: &amp;#39;Home&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/home`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 2,
            &amp;#39;name&amp;#39;: &amp;#39;Blog&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/blog`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 3,
            &amp;#39;name&amp;#39;: &amp;#39;Projects&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/projects`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 4,
            &amp;#39;name&amp;#39;: &amp;#39;Contact&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/contact`
        }]
      };

    const jsonldArticle = {
        &amp;#39;@context&amp;#39;: &amp;#39;http://schema.org&amp;#39;,
        &amp;#39;@type&amp;#39;: `${type}`,
        &amp;#39;description&amp;#39;: `${description}`,
        &amp;#39;image&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;ImageObject&amp;#39;,
            &amp;#39;url&amp;#39;: `${imageUrl}`
        },
        &amp;#39;mainEntityOfPage&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;WebPage&amp;#39;,
            &amp;#39;@id&amp;#39;: `${data.site.siteMetadata.siteUrl}`
         },
        &amp;#39;inLanguage&amp;#39;: &amp;#39;en&amp;#39;,
        &amp;#39;name&amp;#39;: `${title}`,
        &amp;#39;headline&amp;#39;: `${title}`,
        &amp;#39;url&amp;#39;: `${url}`,
        &amp;#39;datePublished&amp;#39;: `${datePublished}`,
        &amp;#39;dateModified&amp;#39;: `${datePublished}`,
        &amp;#39;author&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;Person&amp;#39;,
            &amp;#39;name&amp;#39;: `${data.site.siteMetadata.author}`
        },
        &amp;#39;publisher&amp;#39; : {
            &amp;#39;@type&amp;#39;: &amp;#39;Organization&amp;#39;,
            &amp;#39;name&amp;#39;: `${data.site.siteMetadata.author}`,
            &amp;#39;logo&amp;#39;: {
                &amp;#39;@type&amp;#39;: &amp;#39;ImageObject&amp;#39;,
                &amp;#39;url&amp;#39;: `https://images.ctfassets.net/wjg1udsw901v/4RI5COhSqeYFCbvzYFeFZW/af52277ab41da56c1be5f72f316befe9/logo.png`
            }
        }
    };

    return (
        &amp;lt;&amp;gt;
            &amp;lt;Helmet&amp;gt;
                {/* other head elements go here */}
      
                &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;
                    {JSON.stringify(ldJsonBreadcrumb)}
                &amp;lt;/script&amp;gt;
                
                {type === &amp;#39;article&amp;#39; &amp;amp;&amp;amp; (
                   &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;
                        {JSON.stringify(jsonldArticle)}
                    &amp;lt;/script&amp;gt;
                )}
  
                {/* Meta properties go here */}
                
            &amp;lt;/Helmet&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Head&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;For more information on the structure you can read up on the &lt;a href=&quot;https://www.w3.org/2018/jsonld-cg-reports/json-ld/#introduction&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;W3C Json-LD specification document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get an idea of the full range of tags available take a look at these two links (in the case of my website I only use &lt;strong&gt;BreadcrumbList&lt;/strong&gt; and &lt;strong&gt;Article&lt;/strong&gt; types depending on what content you have you may show something else).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://schema.org/BreadcrumbList&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;BreadcrumbList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://schema.org/Article&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do note for the property &lt;strong&gt;datePublished&lt;/strong&gt; you need to format your dates in &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ISO-8601&lt;/a&gt; format. To save you a trip in google this up you can use the GraphQl query snippet below. The format definition comes from &lt;a href=&quot;https://momentjs.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Moment JS&lt;/a&gt; which Gatsby is using under the hood.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;iso8601DatePublished: datePublished(formatString: &amp;quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&amp;quot;)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-5---validating-your-tags&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---validating-your-tags&quot; aria-label=&quot;step 5   validating your tags permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Validating your tags&lt;/h2&gt;
&lt;p&gt;There are actually various websites we can use to validate your tags and data. When building my website I used the following sources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cards-dev.twitter.com/validator&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Twitters Card testing tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.google.com/structured-data/testing-tool/u/0/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Googles link for testing json-ld&lt;/a&gt;, testing and validating tool for JSON-LD. It goes as far as telling you if there are any missing tags.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://metatags.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Matatags.io&lt;/a&gt;, great for previewing how you website links will render on all the social media websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TIP 😎! If your implementing this retrospectively twitter will update all your previous tweets with with extra formatting, but it does take about a week. If you want to refresh it quicker, you can use the &lt;strong&gt;Twitters Card testing tool&lt;/strong&gt; mentioned above to clear out the cache for an individual post.&lt;/p&gt;
&lt;p&gt;After that you can begin to tweet with confidence 😁&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/2ojzLoP0kubfHc6NdpTiIz/483dd1458ab941764b34ba1e3d5e67e9/TweetFormat.png&quot; alt=&quot;Tweet Format&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating my dream tech blog with GatsbyJS]]></title><description><![CDATA[I'm someone who's always had my own tech blog, I've gone through two revisions already with the last revision updating out of a 1997 style book. How much I contribute to the blog has always depended…]]></description><link>https://www.faesel.com/blog/gatsby-tech-blog-starter</link><guid isPermaLink="true">https://www.faesel.com/blog/gatsby-tech-blog-starter</guid><pubDate>Tue, 07 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m someone who&apos;s always had my own tech blog, I&apos;ve gone through two revisions already with the last revision updating out of a 1997 style book. How much I contribute to the blog has always depended on how much friction and effort it takes to write content, manage and upload photos and paste in code. &lt;/p&gt;
&lt;p&gt;My previous revisions at its core have always been dependent on using opensource wysiwyg editors. Which for me have been deficient in several ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Behind the scenes, they produce HTML which always contains ghost 👻 spaces.&lt;/li&gt;
&lt;li&gt;You always have to build in your own system to upload and manage photos.&lt;/li&gt;
&lt;li&gt;Pasting in code and getting it to format correctly has always been difficult.
The content I write belongs to the actual website, so every time I change or rebuild my website I have to migrate all my content across.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With all this in mind, I wanted a solution that leverages a content management system that supports markdown. Is free and open source, and easily extendable using a modern JavaScript framework. The combination I chose contains the following,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gatsby&lt;/strong&gt; Framework built on React that creates a really fast experience and is easily extendable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contentful&lt;/strong&gt; One of the leading content management systems that support markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disqus&lt;/strong&gt; One of the most popular commenting systems mainly chose this as a continuation from my previous website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Github Pages&lt;/strong&gt; Free hosting by the GitHub guys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to everything being either free or opensource, you can download the source code &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;, follow the steps in the readme or below in this article and get started with your own tech blog.&lt;/p&gt;
&lt;h2 id=&quot;why-use-contentful&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-contentful&quot; aria-label=&quot;why use contentful permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Contentful?&lt;/h2&gt;
&lt;p&gt;If your someone like me and you don&apos;t want to be restricted to the world of WordPress websites, Contentful is the next best thing. As the name describes its a repository for your content and nothing else. Where Contentful really shines is in how easy it is to get your content out. Everything is API accessible and in a JSON format, so if I ever decide to build v4 its just a case of hooking up the CMS.&lt;/p&gt;
&lt;p&gt;Contentful also supports writing in markdown format which is absolutely crucial if you&apos;re going to be pasting in code (as markdown supports syntax highlighting you will get the most accurate code colours when rendering).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/107DfGPIMth9cXJcd7aXNf/73b9fa04c61fbb34a5f33efda16e82d4/contentful.png&quot; alt=&quot;Contentful UI&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-use-disqus&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-disqus&quot; aria-label=&quot;why use disqus permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Disqus?&lt;/h2&gt;
&lt;p&gt;As mentioned Disqus was mainly a continuation from the previous version of my website, there are however some plus points to using Disqus. Namely the popularity (See image below), Disqus is by far the most popular commenting system out there, its also incredibly easy to get set up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4y1BkGbHeRGvzMNEX6D0lO/d92bb715335b7119b10d8352da2e1c5e/disqus-vs-commento.png&quot; alt=&quot;Disqus vs Commento&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are some annoyances however, namely the lack of markdown support, which could be an issue if a commenter wants to post a code snippet.&lt;/p&gt;
&lt;p&gt;Perhaps at some point I will migrate to using &lt;a href=&quot;https://commento.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Commento&lt;/a&gt;, theres a great article comparing the two &lt;a href=&quot;https://victorzhou.com/blog/replacing-disqus/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-github-pages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-github-pages&quot; aria-label=&quot;why github pages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why GitHub pages?&lt;/h2&gt;
&lt;p&gt;Firstly it&apos;s free hosting! What more do you want...&lt;/p&gt;
&lt;p&gt;I have always relied on using Azure to host my pages but unless you got a Biztalk account there&apos;s a cost in doing so. Github allows you to host content on their website for absolutely free, its got two forms of public pages. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Personal pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This sits under your personal repository path, so in my case my username is faesel (&lt;a href=&quot;https://github.com/faesel/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://github.com/faesel/&lt;/a&gt;), when creating a repository called &apos;faesel&apos; and enabling pages. GitHub gives you the domain &lt;a href=&quot;https://faesel.github.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://faesel.github.io&lt;/a&gt;. What&apos;s amazing is (provided your DNS is setup correctly) they also handle SSL certificates for your behalf.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Project pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github also supports project pages which sit under a subdomain of your repository, for example a repository with the link &lt;a href=&quot;https://github.com/faesel/faesel-blog&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://github.com/faesel/faesel-blog&lt;/a&gt; would resolve into public page URL for &lt;a href=&quot;https://faesel.github.io/faesel-blog&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://faesel.github.io/faesel-blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my blog option 1 was chosen. There is one caveat to personal pages, your published output needs to reside in master and your actual source code needs to be in another branch. The Gatsby template I have created, uses master and source as the two main branches as you can see &lt;a href=&quot;https://github.com/faesel/faesel.github.io/branches&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-use-gatsby&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-gatsby&quot; aria-label=&quot;why use gatsby permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Gatsby?&lt;/h2&gt;
&lt;p&gt;Gatsby lightning fast when it comes to rendering pages, behind the scenes it builds up static pages which you deploy to your website. As it&apos;s designed to be a progressive web app, pre-fetching is built it, so when your cycles through different pages on your website the load times are instant.&lt;/p&gt;
&lt;p&gt;Gatsby supports a wide range of plugins, &lt;strong&gt;2162&lt;/strong&gt; at the time of writing this article. Admittedly some of them are duplicates, but overall they have enough coverage to integrate the vast majority of 3rd party platforms. Below are some plugins I used for my blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-feed&lt;/strong&gt; Used for generating an RSS feed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-sitemap&lt;/strong&gt; Used for generating a sitemap xml file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-gtag&lt;/strong&gt; Used for integrating google analytics into your blog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-react-helmet&lt;/strong&gt; SEO plugin used for setting titles and metadata&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-sass&lt;/strong&gt; Integrating sass&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-remark-highlight-code&lt;/strong&gt; Used for highlighting code syntax&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-source-contentful&lt;/strong&gt; Used for getting data from Contentful&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-transformer-remark&lt;/strong&gt; Used for transforming markdown into HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full list of their plugins can be found &lt;a href=&quot;https://www.gatsbyjs.org/plugins/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As Gatsby is built on top of React which means extending your website&apos;s functionality is easy. In addition to this data access is all powered through GraphQL which really helps tailor the requests for data in accordance with your UI. All this is setup for you right out the box.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-the-blog-template-to-create-my-own-tech-blog&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-use-the-blog-template-to-create-my-own-tech-blog&quot; aria-label=&quot;how to use the blog template to create my own tech blog permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to use the blog template to create my own tech blog?&lt;/h2&gt;
&lt;p&gt;As mentioned I have created a Gatsby blog template that you can clone yourself, setup and host all at no cost at all. The code can be found &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some pre-requisites we need to get through before we can begin, mainly creating accounts in the following 3rd partys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.contentful.com/sign-up/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Contentful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;step-1---configuring-contentful&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---configuring-contentful&quot; aria-label=&quot;step 1   configuring contentful permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Configuring Contentful&lt;/h3&gt;
&lt;p&gt;The first step is to configure Contentful by creating a content model. A content model represents all the building blocks required to represent a single blog post. Below is a screenshot of the content model needed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/leOFhubn56i1CiN7MeIjK/442336bb18392148c6ac4e16ed496375/content-model.png&quot; alt=&quot;Gatsby blog content model&quot;&gt;&lt;/p&gt;
&lt;p&gt;If your creating it manually do remember to set the field &apos;BodyM&apos; as a markdown field. Once this model is in place, you can begin writing up your first markdown post. To create this model programatically you can run the following command:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;npm run setup SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The management token can be sourced from &lt;strong&gt;Settings&lt;/strong&gt; &gt; &lt;strong&gt;API Keys&lt;/strong&gt; &gt; &lt;strong&gt;Content management tokens&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two settings we need to take a note of that are needed for &lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Space Id&lt;/li&gt;
&lt;li&gt;Space Access Token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these can be sourced from &lt;strong&gt;Settings&lt;/strong&gt; &gt; &lt;strong&gt;API Keys&lt;/strong&gt; &gt; &lt;strong&gt;Content delivery / preview tokens&lt;/strong&gt;, &lt;/p&gt;
&lt;h3 id=&quot;step-2---configuring-environment-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---configuring-environment-variables&quot; aria-label=&quot;step 2   configuring environment variables permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Configuring Environment Variables&lt;/h3&gt;
&lt;p&gt;The next step is to populate your environment variables, the two Contentful keys can be accessed by following Step 1. Setting up google and Discus is optional.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;CONTENTFUL_SPACE_ID=
CONTENTFUL_ACCESS_TOKEN=
GOOGLE_TRACKING_ID=
GATSBY_DISQUS_NAME=&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;step-3---configuring-your-gatsby-config&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---configuring-your-gatsby-config&quot; aria-label=&quot;step 3   configuring your gatsby config permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Configuring your gatsby config&lt;/h3&gt;
&lt;p&gt;The gatsby config file is at the root of this project, it contains all the plugins installed into this project.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    siteMetadata: {
        title: &amp;#39;FAESEL.COM&amp;#39;,
        author: &amp;#39;Faesel Saeed&amp;#39;,
        description: &amp;#39;Welcome to my great blog&amp;#39;,
        siteUrl: &amp;#39;https://www.faesel.com&amp;#39;, //Use the fully qualified url
        social: {
            twitter: &amp;#39;https://twitter.com/@faeselsaeed&amp;#39;, //Use the fully qualified url
            linkedin: &amp;#39;https://www.linkedin.com/....&amp;#39;,
            github: &amp;#39;https://github.com/....&amp;#39;,
            flickr: &amp;#39;https://www.flickr.com/....&amp;#39;, //Feel free to remove this :)
            email: &amp;#39;someone@gmail.com&amp;#39;
        },
    },
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Once This is filled in your all set to run the project!&lt;/p&gt;
&lt;h3 id=&quot;step-4---running-the-project&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---running-the-project&quot; aria-label=&quot;step 4   running the project permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Running the project&lt;/h3&gt;
&lt;p&gt;Begin by installing dependencies: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Followed by running the website:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm run develop&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-5---deployment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---deployment&quot; aria-label=&quot;step 5   deployment permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Deployment&lt;/h2&gt;
&lt;p&gt;To deploy the project begin by creating a repository containing your GitHub username &quot;faesel.github.io&quot;.&lt;/p&gt;
&lt;p&gt;Copy all your code into a branch called &lt;strong&gt;source&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Run the following command&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm run publish&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The command will publish all the static files Gatsby generates into the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;p&gt;To enable github pages navigate to the &lt;strong&gt;Repository&lt;/strong&gt; &gt; &lt;strong&gt;Settings&lt;/strong&gt; &gt; Scroll down to github pages and select the source branch as &lt;strong&gt;master&lt;/strong&gt;. Also at this step if you can enter in your custom domain. Once setup it should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/1Yc9sjRgkxBBCaHx8svVIq/5f94cf13095287375f58e96648ee799f/github_pages.png&quot; alt=&quot;Github Pages&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;Its as easy as that, you know have a blog whos content is powered by Contentful! ... time to blog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5jtQ1A9KGisfOeDCLQqPdT/49d682dbf90be3495ca0c6ad31ab85e1/website.png&quot; alt=&quot;Gatsby blog template&quot;&gt;&lt;/p&gt;
&lt;p&gt;As with all things in tech, there are some improvements that got taken off the bucket list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate deployments by making use of webhooks triggered when publishing content.&lt;/li&gt;
&lt;li&gt;Add a plugin to allow embeding content like tweets, youtube posts ect.&lt;/li&gt;
&lt;li&gt;Add a searching mechanism&lt;/li&gt;
&lt;li&gt;Add pagination&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-honourable-mention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-honourable-mention&quot; aria-label=&quot;the honourable mention permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Honourable mention&lt;/h2&gt;
&lt;p&gt;This article and the project was inspired by Andrew Mead&apos;s &lt;a href=&quot;https://www.youtube.com/watch?v=kzWIUX3CpuI&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;&apos;The Great Gatsby Bootcamp&apos;&lt;/strong&gt;&lt;/a&gt; course which I highly recommend in learning the basics.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/kzWIUX3CpuI?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Making a Azure poison queue Slack notifier]]></title><description><![CDATA[I'm currently working at a place were we are using queue triggered Webjobs to handle the sending of messages like email and SMS (using Send Grid and Twilio). Using a queue based system for this is…]]></description><link>https://www.faesel.com/blog/azure-poison-queue-notifier</link><guid isPermaLink="true">https://www.faesel.com/blog/azure-poison-queue-notifier</guid><pubDate>Fri, 22 Sep 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m currently working at a place were we are using queue triggered Webjobs to handle the sending of messages like email and SMS (using Send Grid and Twilio). Using a queue based system for this is great because it allows us to replay any queue messages, should one of the 3rd party&apos;s (or our code) fail to send the message. &lt;/p&gt;
&lt;p&gt;Since we are connecting into 3rd party&apos;s you can almost guarantee there&apos;s going to be some form of failure. So its always good practice to leverage on this type of architecture to handle the unknown. We have the following setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Website &gt; Storage Queue &gt; Web Job &gt; Send Grid&lt;/li&gt;
&lt;li&gt;Website &gt; Storage Queue &gt; Web Job &gt; Twillio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a failure occurs, queue messages are automatically moved from the
message queue into a poison queue, these queues are always suffixed with &quot;poison&quot; (MS really wanted to highlight how toxic your problems are) like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email - For normal operation&lt;/li&gt;
&lt;li&gt;email-poison - Messages moved here when a failure occurs&lt;/li&gt;
&lt;li&gt;sms&lt;/li&gt;
&lt;li&gt;sms-poison&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gaining visibility of what&apos;s in a poison queue is really important in knowing
the health of your system. So I embarked upon a task in seeking out an
alert setting buried deep somewhere in the Azure portal to help surface
any messages going into the poison queue. I knew this would be a metric
alert of some kind either in the &apos;Storage Account&apos;, &apos;Alerts&apos; or perhaps
even &apos;Application Insights&apos; blade. &lt;/p&gt;
&lt;p&gt;After having spent a while searching for it as well as posting this Stack Overflow question (it wasn&apos;t a popular one..), I started doubting whether it even existed!&lt;/p&gt;
&lt;p&gt;I even tried the search box at the top of the azure dashboard as a last ditch effort, hoping it will provide answers. You think this would
exists somewhere (if it does and my eyes have deceived me please do get
in touch) or at the very least be visible and easily findable? Alas this was not the case..&lt;/p&gt;
&lt;p&gt;So I decided to do something about it, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why not have an Azure function that takes a storage account and looks through all the queues to check if any poison queue messages exist. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst were at it we could also check if messages are stacking up in the non-poison queues (just in-case a Webjob has been turned off or cant process a certain message), and even provide the content of a problematic queue message. Since our team uses slack for communication I decided to send the notification to Slack. Below are the steps I took:&lt;/p&gt;
&lt;h1 id=&quot;step-1---setting-up-slack&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---setting-up-slack&quot; aria-label=&quot;step 1   setting up slack permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Setting up slack&lt;/h1&gt;
&lt;p&gt;Setting up slack is quick and easy, just create a &apos;poison-queue&apos; channel, and create a new integration in the custom integrations section (Note your gonna have to get admin access to do this (I have provided a link at the bottom of this article as its nested deep in their UI). An integration is essentially a web hook endpoint for us to post JSON data to (I have added a link for Slacks JSON format below too, as well as a message builder to help customise the look and feel).&lt;/p&gt;
&lt;p&gt;The picture below show where you can get your web hook URL from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/1y3YcZQRnN6yhsilboTyhL/5c9fad66a9601cc851c9377d26198258/slackwebhook.jpg&quot; alt=&quot;Azure Queue Notifier - Slack Integration&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;step-2---create-your-azure-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---create-your-azure-function&quot; aria-label=&quot;step 2   create your azure function permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Create your Azure Function&lt;/h1&gt;
&lt;p&gt;Since this is not a tutorial on Azure Functions, I&apos;m going to skip going into detail here. Microsoft however have provided some great documentation on this (with pictures!) to help you out. Links are at the end until MS break them. By the way your gonna need a cron expression to define the timeframe for this function to work in, if you hate cron as much as I do worry not! Use my cron expression for a daily sobering alert at 9:00 - 0 0 9 * * *&lt;/p&gt;
&lt;h1 id=&quot;step-3---create-your-slack-message-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---create-your-slack-message-structure&quot; aria-label=&quot;step 3   create your slack message structure permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Create your slack message structure&lt;/h1&gt;
&lt;p&gt;Next we can create the basic structure needed for our Slack message, expressed as a C# class. My class is actually quite simple and missing quite a few properties, to get a sense of all the customisations Slack offers have a look at the links below.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Newtonsoft.Json&amp;quot;

#load &amp;quot;Attachments.csx&amp;quot;

using Newtonsoft.Json;
using System.Collections.Generic;

public sealed class SlackMessage
{
    public SlackMessage()
    {
        Attachments = new List&amp;lt;Attachments&amp;gt;();
    }

    [JsonProperty(&amp;quot;channel&amp;quot;)]
    public string Channel { get; set; }

    [JsonProperty(&amp;quot;username&amp;quot;)]
    public string UserName { get; set; }

    [JsonProperty(&amp;quot;text&amp;quot;)]
    public string Text { get; set; }

    [JsonProperty(&amp;quot;attachments&amp;quot;)]
    public List&amp;lt;Attachments&amp;gt; Attachments { get; set; }

    [JsonProperty(&amp;quot;icon_emoji&amp;quot;)]
    public string Icon
    {
        get { return &amp;quot;:computer:&amp;quot;; }
    }
}

#r &amp;quot;Newtonsoft.Json&amp;quot;

using Newtonsoft.Json;

public class Attachments
{
    [JsonProperty(&amp;quot;color&amp;quot;)]
    public string Colour { get; set; }

    [JsonProperty(&amp;quot;title&amp;quot;)]
    public string Title { get; set; }

    [JsonProperty(&amp;quot;text&amp;quot;)]
    public string Text { get; set; }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Remember to create these classes as .csx files for the Azure function to understand them.&lt;/p&gt;
&lt;h1 id=&quot;step-4---create-a-slack-client-to-post-the-message&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---create-a-slack-client-to-post-the-message&quot; aria-label=&quot;step 4   create a slack client to post the message permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Create a slack client to post the message&lt;/h1&gt;
&lt;p&gt;Now that we have our message structure we can create a class to serialize and post the JSON to Slack using the Webhook created in &lt;strong&gt;Step 1&lt;/strong&gt;, below is the code to do this,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Newtonsoft.Json&amp;quot;
#r &amp;quot;System.Web.Extensions&amp;quot;
#r &amp;quot;System.Web&amp;quot;

#load &amp;quot;SlackMessage.csx&amp;quot;
#load &amp;quot;Attachments.csx&amp;quot;

using System.Net;
using Newtonsoft.Json;
using System.Collections.Specialized;

public class SlackClient
{
    public static readonly string WebHook = @&amp;quot;https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;quot;;

    public void SendMessage(SlackMessage message)
    {
        string payloadJson = JsonConvert.SerializeObject(message);
        
        using (WebClient client = new WebClient())
        {
            NameValueCollection data = new NameValueCollection();
            data[&amp;quot;payload&amp;quot;] = payloadJson;
            client.UploadValues(WebHook, &amp;quot;POST&amp;quot;, data);
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Its good practice to move the Webhook URL into the settings file, for simplicity I have included it into this class.&lt;/p&gt;
&lt;h1 id=&quot;step-5---queue-checker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---queue-checker&quot; aria-label=&quot;step 5   queue checker permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Queue Checker&lt;/h1&gt;
&lt;p&gt;Next we need to add code to loop through any connections string we pass it, check all the queues and send messages if we think there&apos;s something wrong.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Microsoft.WindowsAzure.Storage&amp;quot;

#load &amp;quot;SlackClient.csx&amp;quot;
#load &amp;quot;SlackMessage.csx&amp;quot;
#load &amp;quot;Attachments.csx&amp;quot;

using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;

public class PoisonQueueChecker
{
    public void CheckPoisonQueues(Dictionary&amp;lt;string, string&amp;gt; storageConnectionStrings)
    {
        var slackClient = new SlackClient();
        var slackMessage = new SlackMessage { Text = &amp;quot;Poison Queue Alerts&amp;quot;, Channel = &amp;quot;poison-queue&amp;quot; };

        foreach (var storageConnectionString in storageConnectionStrings)
        {
            var storageCredentials = new StorageCredentials(storageConnectionString.Key, storageConnectionString.Value);
            var storageAccount = new CloudStorageAccount(storageCredentials, true);
            var queueClient = storageAccount.CreateCloudQueueClient();

            var queues = queueClient.ListQueues();
            foreach (var queue in queues)
            {
                queue.FetchAttributes();
                //Gets the total messages in the queue
                var queueCount = queue.ApproximateMessageCount;

                if (queueCount &amp;gt; 0)
                {
                    var isPoisonQueue = queue.Name.EndsWith(&amp;quot;poison&amp;quot;);
                    var attachment = new Attachments();
                    attachment.Title = $&amp;quot;Queue: {queue.Name}, Message Count: {queueCount}&amp;quot;;
                    attachment.Colour = isPoisonQueue ? &amp;quot;danger&amp;quot; : &amp;quot;warning&amp;quot;;

                    //Note the peek function will not dequeue the message
                    var message = queue.PeekMessage();
                    attachment.Text = $@&amp;quot;Insertion Time: {message.InsertionTime}, Sample Contents:\n&amp;quot; +
                                        $&amp;quot; {message.AsString}&amp;quot;;                        

                    slackMessage.Attachments.Add(attachment);
                }
            }

            //Add a message showing all is well
            if (!slackMessage.Attachments.Any())
            {
                slackMessage.Attachments.Add(new Attachments { Title = &amp;quot;All queues are operational and empty&amp;quot;, Colour = &amp;quot;good&amp;quot; });
            }
        }

        slackClient.SendMessage(slackMessage);
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h1 id=&quot;step-6---being-it-all-together&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-6---being-it-all-together&quot; aria-label=&quot;step 6   being it all together permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 6 - Being it all together&lt;/h1&gt;
&lt;p&gt;Final step is to hook up the functions run method like so:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#load &amp;quot;PoisonQueueChecker.csx&amp;quot;

using System;
using System.Collections.Generic;

public static void Run(TimerInfo myTimer, TraceWriter log)
{
    log.Info($&amp;quot;C# Timer trigger function executed at: {DateTime.Now}&amp;quot;);

    var storageConnectionStrings = new Dictionary();
    storageConnectionStrings.Add(&amp;quot;storagename&amp;quot;, &amp;quot;storagekey&amp;quot;);

    var poisonQueueChecker = new PoisonQueueChecker();
    poisonQueueChecker.CheckPoisonQueues(storageConnectionStrings);
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;And that&apos;s it, 9 O&apos;clock tomorrow you can finally start gaining visibility of those poison queues and start worrying about those dodgy lines of code causing your messages to be poisoned.&lt;/p&gt;
&lt;h1 id=&quot;helpful-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#helpful-links&quot; aria-label=&quot;helpful links permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Helpful Links&lt;/h1&gt;
&lt;p&gt;Custom Integrations&lt;/p&gt;
&lt;p&gt;https://&amp;#x3C;&lt;yourslackgroupname&gt;&gt;.slack.com/apps/manage/custom-integrations&lt;/p&gt;
&lt;p&gt;Customising your slack message&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.slack.com/docs/messages/builder&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://api.slack.com/docs/messages/builder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to send a slack message to your web hook:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.slack.com/custom-integrations/incoming-webhooks&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://api.slack.com/custom-integrations/incoming-webhooks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to create a azure function:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to code up a azure function:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Fix poor project structure with Convention Based Programming]]></title><description><![CDATA[Having looked at a number of projects in my lifetime, I always come across classes named something like "CustomerService" with similar variations (usually in the same project calling each other…]]></description><link>https://www.faesel.com/blog/convention-based-programming</link><guid isPermaLink="true">https://www.faesel.com/blog/convention-based-programming</guid><pubDate>Sat, 19 Aug 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Having looked at a number of projects in my lifetime, I always come across classes named something like &quot;CustomerService&quot; with similar variations (usually in the same project calling each other) ranging from &quot;CustomerProvider / Helper /Manager / Store / etc...&quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors - PhilKarlton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a new developer working on a project it becomes really hard to figure out what the structure is, and in the case of adding code what to name classes. Naming and structure always seem to be a developers achilles heel(almost akin to superman and kryptonite).&lt;/p&gt;
&lt;p&gt;So, I wanted to come up with a solution to the problem, something more structured that helps facilitate better naming and structuring and the way I decided to do this is through dependency injection. &lt;/p&gt;
&lt;p&gt;By now we are all familiar with Inversion of control, and comfortable using it to decouple dependencies within our applications. Most of us have dabbled with the usual suspects CastleWindsor, AutoFaq, Ninject to name a few. &lt;/p&gt;
&lt;p&gt;One thing people don’t realise is we can also utilise these frameworks to enforce good structure as well as unit test the structure itself to ensure new developers don’t stray from the named path. For the examples below I&apos;m going to use Castle Windsor.&lt;/p&gt;
&lt;h1 id=&quot;step-1--define-the-structure-and-start-naming-the-onion-layers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1--define-the-structure-and-start-naming-the-onion-layers&quot; aria-label=&quot;step 1  define the structure and start naming the onion layers permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 – Define the structure and start naming the onion layers&lt;/h1&gt;
&lt;p&gt;The codebases of yester-year were usually architected using a n-tier structure typically following the pattern: &lt;/p&gt;
&lt;p&gt;Presentation Layer (Controller) &gt; Business Layer (Service) &gt; Data Layer (Repository)&lt;/p&gt;
&lt;p&gt;As time progressed new patterns emerged the structure became more complex however we still try to adopt some form of onion layering within the application. Whether it’s one onion or many within a single solution we should always strive to define what the layers are in the application.&lt;/p&gt;
&lt;p&gt;So, to start we should define:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What the onion layer is named (forming groups of similar classes).&lt;/li&gt;
&lt;li&gt;What the responsibility of each layer is.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;step-2--create-your-conventions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2--create-your-conventions&quot; aria-label=&quot;step 2  create your conventions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 – Create your conventions&lt;/h1&gt;
&lt;p&gt;Now that we have some understanding of the layers, we can start defining them in code. I use an empty interface to do this. Note Castle distinguishes these layers as &apos;Conventions&apos;.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains business logic, it also does not directly access any data source.
public interface IService
{
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Note the interface has no bearing on logic, and does not alter how the app behaves. It’s simply used as a marker to distinguish the layers of the application. A small description is also provided to define what the responsibility of the layer is. These conventions are also a way to document the structure of the application.&lt;/p&gt;
&lt;h1 id=&quot;step-3--install-all-dependencys-using-the-convention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3--install-all-dependencys-using-the-convention&quot; aria-label=&quot;step 3  install all dependencys using the convention permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 – Install all dependency’s using the convention.&lt;/h1&gt;
&lt;p&gt;Now that we have a convention we can blanket install all classes subscribing to that convention, if your using castle Windsor there is a slight difference in how this is done depending on whether you apply the convention directly on the class itself or if you apply it to another interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applying it to an interface&lt;/strong&gt;&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains business logic, it also does not directly access any data source.
public interface IService
{
}

/// Blanket install all IServies
container.Register(Classes.FromAssembly(Assembly.Load(&amp;quot;Assembly name goes here&amp;quot;))
    .BasedOn(IService)
    .WithService.AllInterfaces()
    .LifestyleSingleton());

/// Example usage
public interface ICustomerService : IService
public class CustomerService : ICustomerService&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;strong&gt;Applying it to a class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When applying it to class the installation has a slight difference.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains a business rule, it validates whether the rule has been met
public interface IRule
{
 string ApplyRule();
}

container.Register(Classes.FromAssembly(Assembly.Load(&amp;quot;Assembly name goes here&amp;quot;))
 .BasedOn(IRule)
 .WithService.Base()
 .LifestyleSingleton());

public class CustomerRule : IRule&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;When creating a new class that fits within a pre-defined convention installation becomes a walk in the park, just apply the convention interface and you’re done.&lt;/p&gt;
&lt;h1 id=&quot;step-4--unit-testing-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4--unit-testing-structure&quot; aria-label=&quot;step 4  unit testing structure permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 – Unit testing structure&lt;/h1&gt;
&lt;p&gt;Now that we have our convention setup and we are installing all classes with that convention we can apply a unit tests that will check against the structure. We are testing on two things here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only Services should have a‘Service’ Suffix&lt;/li&gt;
&lt;li&gt;Only Services should exist in a ‘Service’ namespace&lt;/li&gt;
&lt;/ol&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[TestFixture]
public class TestSolutionConventionTests
{
    [SetUp]
    public void Setup()
    {
        // Register all dependencys in the project using castle
        RegisterDependencies(); 
    }

    [Test]
    public void OnlyServices_HaveServiceSuffix()
    {
        // Get access to IWindsorContainer
        var container = DependencyResolver.Container; 
        // Get all classes in the application where the name ends with Service (using reflection).
        var allServices = GetPublicClassesFromApplicationAssembly(c =&amp;gt; c.Name.EndsWith(&amp;quot;Service&amp;quot;), &amp;quot;Assembly name where service exists goes here&amp;quot;);
        // Get all services installed within castles container that use the interface IService
        var registeredServices = GetImplementationTypesFor(typeof(IService), container);

        // Assert the names all match and are equal
        allServices.ToList().Should().Equal(registeredManagers, (ac, rc) =&amp;gt; ac.Name == rc.Name);
    }

    [Test]
    public void OnlyServices_LiveInServicesNamespace()
    {
        var container = DependencyResolver.Container; 
        // Get all classes in the application where the namespace contains Service
        var allServices = GetPublicClassesFromApplicationAssembly(c =&amp;gt; c.Namespace.Contains(&amp;quot;Service&amp;quot;), &amp;quot;Assembly name where service exists goes here&amp;quot;);
        var registeredServices = GetImplementationTypesFor(typeof(IService), container);

        allServices.ToList().Should().Equal(registeredManager, (ac, rc) =&amp;gt; ac.Name == rc.Name);
    }

    private Type[] GetPublicClassesFromApplicationAssembly(Predicate where, string assemblyName)
    {
        return Assembly.Load(assemblyName).GetExportedTypes()
            .Where(t =&amp;gt; t.IsClass)
            .Where(t =&amp;gt; t.IsAbstract == false)
            .Where(where.Invoke)
            .OrderBy(t =&amp;gt; t.Name)
            .ToArray();
    }

    private Type[] GetImplementationTypesFor(Type type, IWindsorContainer container)
    {
        return container.Kernel.GetAssignableHandlers(type)
            .Select(h =&amp;gt; h.ComponentModel.Implementation)
            .OrderBy(t =&amp;gt; t.Name)
            .ToArray();
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Picture below describes what these unit tests protect against:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5DsNc00VzOuEgttxz02Wh0/a5d882981f31c1fad410cea2e30af5dd/conventionexample.jpg&quot; alt=&quot;Convention Based Programming - Unit tests&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;step-5--introducing-new-conventions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5--introducing-new-conventions&quot; aria-label=&quot;step 5  introducing new conventions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 – Introducing new conventions&lt;/h1&gt;
&lt;p&gt;As your solution evolves you’re going to come across certain scenarios where the responsibilities of a class don’t fit into the conventions defined (as we have a list of conventions with descriptions it’s easy to distinguish if a new convention is needed). These scenarios will mainly occur at the beginning phase of a new application (as its rapidly evolving) and as conventions get defined you will find that having to define a new one will become an increasingly rare activity.&lt;/p&gt;
&lt;p&gt;This process should mitigate the scenario of having a customer/service/manager/provider…&lt;/p&gt;
&lt;h1 id=&quot;step-6--sharing-conventions-across-projects-unified-code-base&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-6--sharing-conventions-across-projects-unified-code-base&quot; aria-label=&quot;step 6  sharing conventions across projects unified code base permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 6 – Sharing conventions across projects unified code base&lt;/h1&gt;
&lt;p&gt;Once we’ve established some conventions for a project we can easily extract these out into a separate project and package it as a NuGet package. This allows us to apply the conventions to other solutions giving us a unified structure that looks the same from one solution to another.&lt;/p&gt;
&lt;p&gt;New developers will surely appreciate this, and as a co-worker sitting next to them the wtf count will be below uncomfortable thresholds!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Splitting NUnit Unit Tests With TeamCity To Decrease CI Time]]></title><description><![CDATA[This is a quick guide on how to split unit tests into different categories to decrease the time it takes for your CI build to run. The categories can be used to distinguish different areas of your…]]></description><link>https://www.faesel.com/blog/nunit-test-ci-split</link><guid isPermaLink="true">https://www.faesel.com/blog/nunit-test-ci-split</guid><pubDate>Fri, 31 Mar 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a quick guide on how to split unit tests into different categories to decrease the time it takes for your CI build to run. The categories can be used to distinguish different areas of your tests to break down the CI Builds (typically used to run different categories in parallel) or to separate slow running tests into a separate build, all in the aim of speeding up the feedback cycle for developers. So to create a category you simple add a category attribute to either a test or a test fixture like so:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[Category(&amp;quot;CategoryOne&amp;quot;)] 
[TestFixture] 
public void FunkyMethod() 
{ 
    string pointless = &amp;quot;this is code&amp;quot;; 
} 

[Category(&amp;quot;CategoryFour&amp;quot;)] 
[TestFixture] 
public class UpgradeControllerTests 
{ 
  ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;When segregating tests sometimes you will find a tests intersects multiple categories, in this case you can add multiple attributes. Later on we will see the different types of expressions you are able to enter when running the tests through TeamCity. Below is an example of using multiple categories&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[Category(&amp;quot;CategoryOne&amp;quot;)] 
[Category(&amp;quot;CategoryTwo&amp;quot;)] 
[Test] 
public void FunkyMethod() 
{ 
    string pointless = &amp;quot;this is code&amp;quot;; 
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;So far creating categories like this is fine however having magic strings all over your code is not great. So to fix this we can create a custom attribute which does exactly the same thing as shown below. The custom attribute inherits from CategoryAttribute.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//Used for a test fixture 
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] 
public sealed class CategoryFiveAttribute : CategoryAttribute { } 
//Used for a test 
[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] 
public sealed class CategoryThreeAttribute : CategoryAttribute { }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now that we have the attributes ready we can use them like so.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[TestFixture, CategoryFiveAttribute] 
public class SignOutControllerTests 
{ 
  ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;To configure team city to run certain categories is fairly straightforward. Start by creating a Build step with the runner type set to “NUnit”.  Under Run tests from select your test project dll file. And then under Nunit categories include list the categories you want to test out by writing&lt;/p&gt;
&lt;p&gt;/Include: CategoryOne&lt;/p&gt;
&lt;p&gt;Note that you can also do the inverse and exclude certain tests by adding the following in the section named Nunit categories exclude&lt;/p&gt;
&lt;p&gt;/Exclude: CategoryOne&lt;/p&gt;
&lt;p&gt;NUnit also supports quite complex expressions, to see a full list click here (section “Specifying test categories to include or exclude”). &lt;/p&gt;
&lt;p&gt;A screenshot is included for a full list of settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/56EtPebPnDplF4gswxjpJH/f4ac2ffe01af7d3933838d4425d26bc8/teamcitytestcategory.png&quot; alt=&quot;Nunit Test - Teamcity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you have this in place your unit tests will run with lightening speed.&lt;/p&gt;</content:encoded></item></channel></rss>