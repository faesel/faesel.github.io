<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Faesel.com - Full-Stack Blogger]]></title><description><![CDATA[Personal blog of Faesel Saeed]]></description><link>https://www.faesel.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 22 Oct 2020 08:18:01 GMT</lastBuildDate><item><title><![CDATA[.NET & GRPC What they forgot to tell you]]></title><description><![CDATA[As an engineer, I have always had a heavy reliance on REST'ful API's for passing information between applications. With the introduction of open API specification now in version 3.0.3, integration has‚Ä¶]]></description><link>https://www.faesel.com/blog/dotnet-grpc-forgot-to-tell-you</link><guid isPermaLink="true">https://www.faesel.com/blog/dotnet-grpc-forgot-to-tell-you</guid><pubDate>Mon, 07 Sep 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As an engineer, I have always had a heavy reliance on REST&apos;ful API&apos;s for passing information between applications. With the introduction of &lt;a href=&quot;https://swagger.io/specification/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;open API specification&lt;/a&gt; now in version 3.0.3, integration has never been easier. The push to break monoliths into microservices has further boosted its usage, however I always found one size never fits all.&lt;/p&gt;
&lt;h2 id=&quot;where-rest-falls-down-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#where-rest-falls-down-&quot; aria-label=&quot;where rest falls down  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Where REST falls down üëé&lt;/h2&gt;
&lt;p&gt;RESTful services have many shortfalls built in, if you&apos;re in my boat and most of the time your creating services and working on client applications. Having to tailor a client library to call those services has always been a tiresome task. 3rd party tooling like &lt;a href=&quot;https://github.com/RicoSuter/NSwag&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Nswag&lt;/a&gt; made some attempt to fix this problem however I still find breaking changes between versions that make huge changesets across all your endpoints. If your working across multiple languages like C# and Javascript your work doubles up. &lt;/p&gt;
&lt;p&gt;There are also encumbrances experienced when mixing batch/bulk operations, overnight jobs with REST&apos;ful APIs. Leading to complex solutions that auto scale or spread load over time. Having to go through each request-response cycle on bulk is just in-efficient.&lt;/p&gt;
&lt;p&gt;In most cases, responses are also in the form of JSON which is designed to cater for human readability at the expense of being inefficient. If you talking machine to machine readability is not a concern?  &lt;/p&gt;
&lt;p&gt;Lets also not mention those endless subjective PR threads trying to decide whats RESTful and whats not üòá.&lt;/p&gt;
&lt;h2 id=&quot;can-grpc-fill-the-gaps-ü§∑‚ôÇÔ∏è&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#can-grpc-fill-the-gaps-%F0%9F%A4%B7%E2%99%82%EF%B8%8F&quot; aria-label=&quot;can grpc fill the gaps ü§∑‚ôÇÔ∏è permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can GRPC fill the gaps ü§∑‚Äç‚ôÇÔ∏è&lt;/h2&gt;
&lt;p&gt;If you experienced the REST&apos;ful pains above, GRPC&apos;s got your back. To get a quick demonstration of its capabilities, I recommend &lt;a href=&quot;http://wildermuth.com/2020/07/09/gRPC-Talk-at-netPonto&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Shawn Wildermuth&apos;s gRPC Talk at netPonto User Group (2020)&lt;/a&gt; he explains it in a easy to understand way.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/3wUtQb6C7to?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;To sum up its capabilities it has two key differences to REST (if your already familiar with this, skip to section &lt;strong&gt;Things to look into&lt;/strong&gt;).&lt;/p&gt;
&lt;h3 id=&quot;1-proto-files&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-proto-files&quot; aria-label=&quot;1 proto files permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Proto files&lt;/h3&gt;
&lt;p&gt;Proto files contain the definition of your API in a structured spec compliant way. The code below shows a simple &lt;em&gt;GreetingsService&lt;/em&gt; with a basic request and response.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;syntax = &amp;quot;proto3&amp;quot;;

option csharp_namespace = &amp;quot;HelloService&amp;quot;;

service GreetingsService {
    rpc GetHello (HelloRequest) returns (HelloResponse);
}

message HelloRequest {
    int32 HelloCount = 1;
}

message HelloResponse {
    string HelloDescription = 1;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Proto files can then be used to transpile code &lt;a href=&quot;https://grpc.io/docs/languages/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;into many languages&lt;/a&gt;. When transpiling we have the option to either create code for a &lt;strong&gt;server&lt;/strong&gt; or &lt;strong&gt;client&lt;/strong&gt;. Code generation creates a base class &lt;strong&gt;GreetingsServiceBase&lt;/strong&gt; for us (it&apos;s generated in the bin folder on build time). Eventually, you end up with a service that looks like this:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;using Grpc.Core;
using HelloServer;
using System.Threading.Tasks;

namespace TaxServer.Services
{
    public class HelloGrpcService : GreetingsService.GreetingsServiceBase
    {
        public override async Task&amp;lt;HelloResponse&amp;gt; GetHello(HelloRequest request, ServerCallContext context)
        {
            return new HelloResponse { HelloDescription = $&amp;quot;{request.HelloCount} Hellos to you!&amp;quot; };
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The act of sharing and distributing proto files means that consuming clients can easily create their own client code and be completely agnostic of language.&lt;/p&gt;
&lt;h3 id=&quot;2-defining-requestresponse-lifecycle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-defining-requestresponse-lifecycle&quot; aria-label=&quot;2 defining requestresponse lifecycle permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Defining request/response lifecycle&lt;/h3&gt;
&lt;p&gt;GRPC allows you to change its request/response lifecycle, it has 4 options described below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unary RPC&apos;s&lt;/strong&gt;: Unary RPCs where the client sends a single request to the server and gets a single response back.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server Streaming RPC&apos;s&lt;/strong&gt;: Server streaming RPCs where the client sends a request to the server and gets a stream to read a sequence of messages back.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Client Streaming RPC&apos;s&lt;/strong&gt;: Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bi-Directional Streaming RPC&apos;s&lt;/strong&gt;: Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://grpc.io/docs/what-is-grpc/core-concepts/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;em&gt;Taken from GRPC.io&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These additional modes are more suited for batch processing over your traditional request/response lifecycle.&lt;/p&gt;
&lt;h2 id=&quot;things-to-look-into-&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#things-to-look-into-&quot; aria-label=&quot;things to look into  permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Things to look into ‚úÖ&lt;/h2&gt;
&lt;p&gt;So far so great, getting to this point is relatively easy and straightforward. Problem is all the tutorials seem to end at this point üòü. To have a live API several additional concerns need to be addressed. My list was as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check how we can consume/distribute .proto files&lt;/li&gt;
&lt;li&gt;How to create a health checking probe for a GRPC service&lt;/li&gt;
&lt;li&gt;How to version endpoints&lt;/li&gt;
&lt;li&gt;Can a .NET Framework client app consume a .NET Core GRPC server?&lt;/li&gt;
&lt;li&gt;How to debug with tools, call an endpoint&lt;/li&gt;
&lt;li&gt;Authentication and authorization&lt;/li&gt;
&lt;li&gt;Can you call the service from a browser?&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;1-check-how-we-can-consumedistribute-proto-files&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-check-how-we-can-consumedistribute-proto-files&quot; aria-label=&quot;1 check how we can consumedistribute proto files permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Check how we can consume/distribute .proto files&lt;/h3&gt;
&lt;p&gt;There are two different approaches to achieve this, mainly dependent on whether your service is internal or external public facing.&lt;/p&gt;
&lt;h4 id=&quot;option-1---with-nuget-packages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#option-1---with-nuget-packages&quot; aria-label=&quot;option 1   with nuget packages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Option 1 - With nuget packages&lt;/h4&gt;
&lt;p&gt;Option one is to distribute your proto files using Nuget packages. This solution is recommended in the situation where you are using GRPC for internal services. Your solution structure would look something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HelloService.Protos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hello.protos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HelloService.Server&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server code ... &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case we would use a Nuspec file to package the .protos and output it into the following structure in the client app. Considering you could be consuming more than one GRPC service it might make sense to create subfolders to know where the proto file comes from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HelloClient
/Protos/&lt;strong&gt;service name goes gere&lt;/strong&gt;/Hello.protos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here the client application can generate its client service code using the protofile. If you want to go one step further there is a dotnet command you can use to integrate the proto file into the &lt;strong&gt;.csproj&lt;/strong&gt; file using a &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/grpc/dotnet-grpc?view=aspnetcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;dotnet command&lt;/a&gt; which can be triggered after the installation of the package.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc add-file Hello.proto&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h4 id=&quot;option-2---with-a-discovery-endpoint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#option-2---with-a-discovery-endpoint&quot; aria-label=&quot;option 2   with a discovery endpoint permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Option 2 - With a discovery endpoint&lt;/h4&gt;
&lt;p&gt;This approach is recommended if your GRPC service is a service meant for external consumers. The idea behind this approach is to expose which services/endpoints are available. The method is dependent on the &lt;a href=&quot;https://www.nuget.org/packages/Grpc.Reflection/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;Grpc.Reflection&lt;/strong&gt;&lt;/a&gt; Nuget package.&lt;/p&gt;
&lt;p&gt;The general approach is outlined &lt;a href=&quot;https://github.com/grpc/grpc/blob/master/doc/csharp/server_reflection.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Once implemented it allows you to use an endpoint from the server code to generate your client code. Dotnet has a &lt;a href=&quot;https://www.nuget.org/packages/dotnet-grpc-cli/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GRPC CLI tool&lt;/a&gt;, that can read from a server reflection endpoint and produce a proto file out of it. The command looks like this,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc-cli dump https://localhost:5001 Reflection.HelloService&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;You can also write the proto file to disk using this command&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;dotnet grpc-cli dump http://localhost:10042 Reflection.HelloService -o ./prot&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;2-how-to-create-a-health-checking-probe-for-a-grpc-service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-how-to-create-a-health-checking-probe-for-a-grpc-service&quot; aria-label=&quot;2 how to create a health checking probe for a grpc service permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. How to create a health checking probe for a GRPC service&lt;/h3&gt;
&lt;p&gt;Health checking probe endpoints are useful for monitoring uptime as well as managing containers when services are unresponsive. GRPC specification has a defined structure for creating your health checking endpoint called the &lt;a href=&quot;https://github.com/grpc/grpc/blob/master/doc/health-checking.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;GRPC Health Checking Protocol&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;However, since we are using asp.net core we can get away from this and rely on middleware to do this for us with little code.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
  services.AddGrpc();
  services.AddHealthChecks();
  ...
}

public void Configure(IApplicationBuilder app)
{
  app.UseEndpoints(endpoints =&amp;gt;
  {
    endpoints.MapHealthChecks(&amp;quot;/healthz&amp;quot;);
    ...
  });
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now when running locally &lt;strong&gt;&lt;a href=&quot;https://localhost:5001/healthz&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://localhost:5001/healthz&lt;/a&gt;&lt;/strong&gt; we can get a 200 response. Here is what the output logs look like:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;      Request starting HTTP/2 GET https://localhost:5001/healthz
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint &amp;#39;Health checks&amp;#39;
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint &amp;#39;Health checks&amp;#39;
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished in 19.056ms 200 text/plain&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;3-how-to-version-endpoints&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-how-to-version-endpoints&quot; aria-label=&quot;3 how to version endpoints permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. How to version endpoints&lt;/h3&gt;
&lt;p&gt;The problem of versioning is easily solved using namespaces, it&apos;s just a case of incorporating your version number into the namespace like so,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;option csharp_namespace = &amp;quot;HelloService.v1&amp;quot;;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;For each version, you would have different proto files and different service implementations. When inheriting from the base we can be specific on the version we need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Server Code&lt;/strong&gt;&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public class HelloGrpcService : HelloService.v1.GreetingsService.GreetingsServiceBase
{
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;strong&gt;Client Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The namespaces segregate the types so it just works out.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//Version 1
using var channel = GrpcChannel.ForAddress(&amp;quot;https://localhost:5001&amp;quot;);
var client = new HelloService.v1.GreetingsService.GreetingsServiceClient(channel);
var response = await client.GetHello(new HelloService.v1.HelloRequest() { 
      HelloCount = 1
});

//Version 2
using var channel2 = GrpcChannel.ForAddress(&amp;quot;https://localhost:5001&amp;quot;);
var client2 = new HelloService.v2.GreetingsService.GreetingsServiceClient(channel);
var response2 = await client2.GetHello(new HelloService.v2.HelloRequest() {
      HelloCount = 2
});&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;4-can-a-net-framework-client-app-consume-a-net-core-grpc-server&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-can-a-net-framework-client-app-consume-a-net-core-grpc-server&quot; aria-label=&quot;4 can a net framework client app consume a net core grpc server permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Can a .NET Framework client app consume a .NET Core GRPC server?&lt;/h3&gt;
&lt;p&gt;Turns out it can yes, however ... as GRPC is built upon HTTP/2 which is not supported in .net framework, making secure connections to your API is not possible. The client code for .net framework is very similar, we just pass a &lt;strong&gt;ChannelCredentials.Insecure&lt;/strong&gt; option in when building the client.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;var channel = new Channel(&amp;quot;127.0.0.1&amp;quot;, 5000, ChannelCredentials.Insecure);
var client = new GreetingsService.GreetingsServiceClient(channel);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;5-how-to-debug-with-tools-call-an-endpoint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-how-to-debug-with-tools-call-an-endpoint&quot; aria-label=&quot;5 how to debug with tools call an endpoint permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. How to debug with tools, call an endpoint&lt;/h3&gt;
&lt;p&gt;If you&apos;re like me and you&apos;ve come from a REST background your most likely used to polished tools like Postman or Insomnia to test out your endpoints. Sadly these tools don&apos;t support GRPC üò¢... yet anyway...&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/grpc-ecosystem/awesome-grpc#lang-cs&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;GRPC Tooling Community&lt;/a&gt; is still in its infancy. There are however some new players that are emerging that get the job done, most notably for me BloomRPC. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6p6bGkCU7Tpa3tMwPsoRxO/adb23285ed92ea9c2c757ef62a4600a9/BloomRPC.png&quot; alt=&quot;BloomRPC&quot;&gt;&lt;/p&gt;
&lt;p&gt;After importing in your proto files you get a great swagger-esk UI that automatically build up your request body from your proto file.&lt;/p&gt;
&lt;h3 id=&quot;6-authentication-and-authorization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-authentication-and-authorization&quot; aria-label=&quot;6 authentication and authorization permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. Authentication and authorization&lt;/h3&gt;
&lt;p&gt;Because we are working under the guise of asp.net core we can take advantage of its authentication middleware. The following authentication methods are supported.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Active Directory&lt;/li&gt;
&lt;li&gt;Client Certificate&lt;/li&gt;
&lt;li&gt;IdentityServer&lt;/li&gt;
&lt;li&gt;JWT Token&lt;/li&gt;
&lt;li&gt;OAuth 2.0&lt;/li&gt;
&lt;li&gt;OpenID Connect&lt;/li&gt;
&lt;li&gt;WS-Federation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a simple code example of authenticating a JWT token with an identity service. As you can see its no different from a REST service.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;public void ConfigureServices(IServiceCollection services)
{
    var authority = &amp;quot;https://myidentityserver.com&amp;quot;;

    services
        .AddAuthentication(&amp;quot;Bearer&amp;quot;)
        .AddJwtBearer(&amp;quot;Bearer&amp;quot;, options =&amp;gt;
        {
            options.Authority = authority;
            options.RequireHttpsMetadata = false;
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateAudience = false,
            };
            options.ConfigurationManager = new ConfigurationManager&amp;lt;OpenIdConnectConfiguration&amp;gt;
            (
                metadataAddress: authority + &amp;quot;/.well-known/openid-configuration&amp;quot;,
                configRetriever: new OpenIdConnectConfigurationRetriever(),
                docRetriever: new HttpDocumentRetriever { RequireHttps = false }
            );
            options.Events = new JwtBearerEvents
            {
                OnTokenValidated = context =&amp;gt;
                {
                    var ci = (ClaimsIdentity)context.Principal.Identity;
                    var authHeader = context.Request.Headers[&amp;quot;Authorization&amp;quot;];
                    var token = authHeader.FirstOrDefault()?.Substring(7);
                    if (token != null)
                    {
                        ci.AddClaim(new Claim(&amp;quot;token&amp;quot;, token));
                    }

                    return Task.CompletedTask;
                }
            };
        });

    services.AddAuthorization();
    ...
}

public void Configure(IApplicationBuilder app)
{
    app.UseAuthentication();
    app.UseAuthorization();
    ...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Below is output from an authenticated request:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;      Request starting HTTP/2 POST https://localhost:5001/HelloGrpcService.GreetingsService/GetHello application/grpc
info: Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler[2]
      Successfully validated the token.
info: Microsoft.AspNetCore.Authorization.DefaultAuthorizationService[1]
      Authorization was successful.
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint &amp;#39;gRPC - /HelloGrpcService.GreetingsService/GetHello&amp;#39;
Request parameter 1
Request came from test-client-id
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint &amp;#39;gRPC - /HelloGrpcService.GreetingsService/GetHello&amp;#39;
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished in 5865.2411ms 200 application/grpc&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;7-can-you-call-the-service-from-a-browser&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-can-you-call-the-service-from-a-browser&quot; aria-label=&quot;7 can you call the service from a browser permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Can you call the service from a browser?&lt;/h3&gt;
&lt;p&gt;Currently, as it stands the answer is no, browsers don&apos;t offer fine-grained control over API requests to support GRPC. However, there is some light at the end of the tunnel.&lt;/p&gt;
&lt;p&gt;Back in 2016 Google started working on a specification for &quot;GRPC for the browser&quot;. You can read more about it &lt;a href=&quot;https://grpc.io/blog/state-of-grpc-web/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; but in essence,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic idea is to have the browser send normal HTTP requests (with Fetch or XHR) and have a small proxy in front of the gRPC server to translate the requests and responses to something the browser can use - grpc.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the C# world, Microsoft has an implementation of this specification in their docs, &lt;a href=&quot;https://docs.microsoft.com/en-gb/aspnet/core/grpc/browser?view=aspnetcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Use gRPC in browser apps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some disclaimers to this, as gRPC supports streaming and bidirectional requests this addition is only recommended for unary requests. Due to this limiting factor helpers are present to turn it on and off for services when setting up GRPC services in the startup,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;endpoints.MapGrpcService&amp;lt;HelloGrpcService&amp;gt;().EnableGrpcWeb().RequireCors(&amp;quot;AllowAll&amp;quot;);&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;What I find particularly interesting is that the problem grpc-web solves is similar to the problems we have with .net framework (https/2 is not supported). Could this perhaps be an answer to getting secure requests working? ... sadly not yet! at the moment its not possible as grpc-web was was built on .net standard 2.1 so .net framework is not supported. Perhaps there might be movement on this in time to come.&lt;/p&gt;
&lt;h2 id=&quot;things-i-missed-out&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#things-i-missed-out&quot; aria-label=&quot;things i missed out permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Things I missed out&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Integration Testing, im a big fan of using in memory testing with Test Server it would be interesting to see if this works with a GRPC service.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;useful-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useful-links&quot; aria-label=&quot;useful links permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Useful Links&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc/tree/master/src/csharp&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;C# Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grpc/grpc-dotnet/tree/master/examples&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;More c# examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Evolving your Windows Terminal using Powershell libraries]]></title><description><![CDATA[As a windows user the terminal experience has always been lacking, up till the new windows terminal was released. Incorporating WSL (Windows Subsystem for Lynx) really helped bridge that gap as it‚Ä¶]]></description><link>https://www.faesel.com/blog/evolving-windows-terminal</link><guid isPermaLink="true">https://www.faesel.com/blog/evolving-windows-terminal</guid><pubDate>Fri, 24 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As a windows user the terminal experience has always been lacking, up till the new &lt;a href=&quot;https://www.microsoft.com/en-gb/p/windows-terminal/9n0dx20hk701?rtc=1&amp;#x26;activetab=pivot:overviewtab&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;windows terminal&lt;/a&gt; was released. Incorporating &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;WSL (Windows Subsystem for Lynx)&lt;/a&gt; really helped bridge that gap as it opens up console experience that makes use of &lt;strong&gt;apt-get&lt;/strong&gt; use the plethora of packages available. &lt;/p&gt;
&lt;p&gt;Having tried using this for react apps I found the experience really slow when building apps. Running the same app in Powershell would start up in a fraction of the time. This got me thinking..&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I evolve my Powershell console experience in the same way I can with WSL?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at &lt;a href=&quot;https://www.powershellgallery.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Powershells Gallery&lt;/a&gt;, they have a total of &lt;strong&gt;7,091&lt;/strong&gt; unique packages. There must be some things here we can use.&lt;/p&gt;
&lt;p&gt;This article is about my journey from reading this blog post &lt;a href=&quot;https://www.hanselman.com/blog/HowToMakeAPrettyPromptInWindowsTerminalWithPowerlineNerdFontsCascadiaCodeWSLAndOhmyposh.aspx&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&quot;How to make a pretty prompt in Windows Terminal with Powerline, Nerd Fonts, Cascadia Code, WSL, and oh-my-posh&quot;&lt;/a&gt; by Scott Hanselman, to taking the experience one step further to evolve my terminal. Video on it here:&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/lu__oGZVT98?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prerequisites&quot; aria-label=&quot;prerequisites permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This article assumes you have already read Hanselman&apos;s article and kitted your terminal out with the following (if not do so):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added Cascadia Ligature Font, for more compact and expressive text.&lt;/li&gt;
&lt;li&gt;Added oh-my-posh, for better git branch information.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;making-use-of-your-powershell-profile&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#making-use-of-your-powershell-profile&quot; aria-label=&quot;making use of your powershell profile permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making use of your Powershell profile&lt;/h2&gt;
&lt;p&gt;Before your Powershell window starts, any code in your Powershell profile is executed first. You can find your profile directory location by typing the following in your console,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;$PROFILE&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;It&apos;s from this file we can begin importing in scripts and adding custom functions. If you followed the prerequisites, your profile file will be mostly empty except perhaps a command to set the theme in oh-my-posh.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Set-Theme Paradox&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;incorporating-packages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#incorporating-packages&quot; aria-label=&quot;incorporating packages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Incorporating packages&lt;/h2&gt;
&lt;p&gt;Before we start importing packages we need to get &lt;strong&gt;PowerShellGet&lt;/strong&gt; setup, installation steps can be found here &lt;a href=&quot;https://docs.microsoft.com/en-gb/powershell/scripting/gallery/installing-psget?view=powershell-7&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Installing PowerShellGet&lt;/a&gt;. Once complete you can start installing scripts like so,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name WifiTools &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;That&apos;s it, you can actually start checking your wifi signal with &lt;code&gt;Show-WifiState&lt;/code&gt; üì∂! Aside from wifi tools here are some choice selections, some of these are recommended as it helps create building blocks for your own custom scripts:&lt;/p&gt;
&lt;h3 id=&quot;1-terminal-icons&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-terminal-icons&quot; aria-label=&quot;1 terminal icons permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Terminal-Icons/0.1.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;1. Terminal Icons&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Terminal-Icons/0.1.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Terminal-Icons&lt;/a&gt; really helps improve visibility when navigating. It also allows you to format your directory list wide so that you can see all the files and folders without scrolling down.&lt;/p&gt;
&lt;p&gt;You can activate it in your Powershell profile by adding the following import&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Import-Module -Name Terminal-Icons&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;And that&apos;s it! witness the beauty:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5GsSsHw0n1zQ2ST9ItYIM6/1f8e2a1d08542fdfaa24acc1b35dbc02/terminal-icons.png&quot; alt=&quot;Terminal Icons&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-tree&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-tree&quot; aria-label=&quot;2 tree permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Tree/1.0.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;2. Tree&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/Tree/1.0.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tree&lt;/a&gt; helps with directory discover and searching by printing in (as the name suggests) a tree structure. I alias this package and mainly use it for listing and searching, below is what you need in your Powershell profile,&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name Tree &lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# Shows a tree structure of the current directory (excluding folders you want to ignore)
function treels {
    Get-ChildItemTree . -I &amp;#39;node_modules|bin|obj|.git|.vs&amp;#39;
}

# Searches the current directory for a pattern (wildcards * are accepted) and returns the tree view with matching files
function treef ([string] $pattern) {
    Get-ChildItemTree . -P $pattern -I &amp;#39;node_modules|bin|obj|.git|.vs&amp;#39;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Example showing a directory:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/2TiqouIH6bTQ4U6quojGO7/0c1d294bac92233dd453300b482afb93/TreeList.png&quot; alt=&quot;Tree Directory List&quot;&gt;&lt;/p&gt;
&lt;p&gt;Example search for a file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/p7NOrYHf5oRdLz9IqwDzR/7de6b06b6233dc5d308dead818926593/TreeSearch.png&quot; alt=&quot;Tree Search&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-burnt-toast&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-burnt-toast&quot; aria-label=&quot;3 burnt toast permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/BurntToast/0.7.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;3. Burnt Toast&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/BurntToast/0.7.1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;BurntToast&lt;/a&gt; great package to notify yourself of any long running tasks. It hooks into the native windows toast notification system and has a plethora of options. One ideal use for this is cloning a repo (I&apos;m talking about that repo dating back to the dinosaurs üêâ) since it lets you kick it off and automatically get a notification when done. &lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name BurntToast&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# clones a repo and notify with a toast
function clonem([string] $url) {
    git clone $url
    New-BurntToastNotification -AppLogo &amp;#39;C:\Icons\completed.png&amp;#39; -Text &amp;quot;Finished!&amp;quot;, &amp;#39;Finished cloning repo&amp;#39;
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;I also find it great for scheduling in reminders, this one is dependent on a function which I import at the top of the profile &lt;a href=&quot;https://github.com/Windos/BurntToast/blob/master/Examples/Example05/New-ToastReminder.ps1&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;code example found here&lt;/a&gt;.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# IMPORT CUSTOM FILES
. &amp;quot;C:\Users\faese\Documents\WindowsPowerShell\Custom\BurntToast.ps1&amp;quot;

# trigger a remind after x minuites with some custom text
function reminder([int]$minuites, [string]$text) {
    New-ToastReminder -AppLogo &amp;#39;C:\Icons\reminder.png&amp;#39; -Minutes $minuites -ReminderTitle &amp;#39;Reminder Reminder!&amp;#39; -ReminderText $text
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Example to ensure you never eggless,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4zg5SUqQ14zjuZE6QArrj0/6f2809c3942708f89aea47dd3c815bdb/reminder.png&quot; alt=&quot;Toast Reminder&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-coloredtext&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-coloredtext&quot; aria-label=&quot;4 coloredtext permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/ColoredText/1.0.6&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;4. ColoredText&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This library essentially allows you to print in different colours pure and simple. I mainly use this as a confirmation line when chaining together several commands so your eye just looks for coloured text to look for completion.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;Install-Module -Name ColoredText&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;# create a new branch
function newb([string]$branchName){
    git branch $branchName
    git checkout $branchName --track

    $message = &amp;quot;Finished creating branch: &amp;quot; + $branchName

    cprint black $message on rainbow print
}

# publish branch
function publish {
    $branchName = git rev-parse --abbrev-ref HEAD
    git push --set-upstream origin $branchName

    $message = &amp;quot;Finished publishing branch: &amp;quot; + $branchName

    cprint black $message on rainbow print
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/6IctC3h57SGaYFmQelmlx4/2840d80d68895fe0dde359b64328c345/coloredtext.png&quot; alt=&quot;Colored Text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;some-other-honourable-mentions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#some-other-honourable-mentions&quot; aria-label=&quot;some other honourable mentions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some other honourable mentions&lt;/h3&gt;
&lt;p&gt;Below are some other honourable mentions that I needed more time to investigate,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/ps-menu/1.0.6&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;PS Menu&lt;/a&gt;, allows you to create a multi-select menu of options.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.powershellgallery.com/packages/WTToolBox/1.6.0&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;WTToolBox&lt;/a&gt;, helps manage your windows terminal, I was mainly going to use this to get a list of shortcuts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;download-my-profile-code-here&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#download-my-profile-code-here&quot; aria-label=&quot;download my profile code here permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Download my profile code here&lt;/h2&gt;
&lt;p&gt;You can download my complete profile code &lt;a href=&quot;https://github.com/faesel/terminal-profile&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;I&apos;m still on a path of discovery with Powershell, I&apos;ve seen some great packages that can help make my terminal experience fast and efficient. However, I do feel I&apos;m at the very beginning of this journey and with the continued improvements to WSL, I may flip flop to the Linux side.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GatsbyJS SEO and Open Graph with Helmet]]></title><description><![CDATA[I recently recreated my blog in GatsbyJs, you can download a template of it here gatsby-techblog-starter. In the joy of sharing its simplicity to the world, I tweet about my intro article with a link‚Ä¶]]></description><link>https://www.faesel.com/blog/gatsby-seo-opengraph-helmet</link><guid isPermaLink="true">https://www.faesel.com/blog/gatsby-seo-opengraph-helmet</guid><pubDate>Sat, 11 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I recently recreated my blog in GatsbyJs, you can download a template of it here &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;gatsby-techblog-starter&lt;/a&gt;. In the joy of sharing its simplicity to the world, I tweet about my &lt;a href=&quot;https://www.faesel.com/blog/gatsby-tech-blog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;intro article&lt;/a&gt; with a link to my website. To my dismay, I noticed the tweet was lacking a lot of formatting and information on the link... would you even see that link üëÄ?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/37l0W6HYcNXrTDrAbMDJSn/04d9b245622621d5b0eafaf59657ea07/twitter-no-opengraph.png&quot; alt=&quot;Twitter without opengraph&quot;&gt;&lt;/p&gt;
&lt;p&gt;I realised the secret sauce I was missing was called &lt;strong&gt;Open Graph Protocol&lt;/strong&gt;. From the &lt;a href=&quot;https://ogp.me/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;specifications website&lt;/a&gt; itself, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In essence its the mata tags you see below, that sites like Twitter, Linked In, Facebook use to correctly render an enriched link of the page on their website,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;meta data-react-helmet=&amp;quot;true&amp;quot; name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;summary_large_image&amp;quot;&amp;gt;
&amp;lt;meta data-react-helmet=&amp;quot;true&amp;quot; name=&amp;quot;twitter:site&amp;quot; contact=&amp;quot;@faeselsaeed&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content=&amp;quot;&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:title&amp;quot; content=&amp;quot;Creating my dream tech blog with GatsbyJS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:description&amp;quot; content=&amp;quot;I&amp;#39;m someone who&amp;#39;s always had my own tech blog, I‚Ä¶&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content=&amp;quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;

&amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content=&amp;quot;&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:title&amp;quot; content=&amp;quot;Creating my dream tech blog with GatsbyJS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:url&amp;quot; content=&amp;quot;https://www.faesel.com/blog/gatsby-tech-blog-starter&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:description&amp;quot; content=&amp;quot;I&amp;#39;m someone who&amp;#39;s always had my own tech blog, I‚Ä¶&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:image&amp;quot; content=&amp;quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:image:alt&amp;quot; content=&amp;quot;Gatsby JS&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;meta property=&amp;quot;og:type&amp;quot; content=&amp;quot;article&amp;quot; data-react-helmet=&amp;quot;true&amp;quot;&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This article is about how I used &lt;a href=&quot;https://helmetjs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Helmet JS&lt;/a&gt; to improve my sites shareability and improving its SEO capabilities.&lt;/p&gt;
&lt;h2 id=&quot;step-1---install-those-dependencies&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---install-those-dependencies&quot; aria-label=&quot;step 1   install those dependencies permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Install those dependencies&lt;/h2&gt;
&lt;p&gt;The dependencies we are interested in are as follows:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;npm intall gatsby-plugin-react-helmet react-helmet&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;You can read more about the gatsby plugin &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-react-helmet/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; along with more detailed information on Helmet js and all its supported tabs &lt;a href=&quot;https://github.com/nfl/react-helmet&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-2---store-your-constants-in-your-gatsby-config&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---store-your-constants-in-your-gatsby-config&quot; aria-label=&quot;step 2   store your constants in your gatsby config permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Store your constant&apos;s in your gatsby config&lt;/h2&gt;
&lt;p&gt;When creating a Gatsby website we always have a config file in the root of the project called &lt;strong&gt;gatsby-config.js&lt;/strong&gt;, from here we can add various plugins like so,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    plugins: [
        &amp;#39;gatsby-plugin-react-helmet&amp;#39;
    ]
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;This config file is also the place to store all you common reusable information in Gatsby&apos;s predefined &lt;strong&gt;siteMetadata&lt;/strong&gt; tag (this tag makes it accessible through GraphQl). We will be using this later on to populate our head with various information.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;json&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    siteMetadata: {
        title: &amp;#39;FAESEL.COM&amp;#39;,
        author: &amp;#39;Faesel Saeed&amp;#39;,
        description: &amp;#39;Personal blog of Faesel Saeed&amp;#39;,
        siteUrl: &amp;#39;https://www.faesel.com&amp;#39;,
        social: {
            linkedin: &amp;#39;https://www.linkedin.com/in/faesel-saeed-a97b1614&amp;#39;,
            twitter: &amp;#39;https://twitter.com/@faeselsaeed&amp;#39;,
            twitterUsername: &amp;#39;@faeselsaeed&amp;#39;,
            github: &amp;#39;https://github.com/faesel&amp;#39;,
            flickr: &amp;#39;https://www.flickr.com/photos/faesel/&amp;#39;,
            email: &amp;#39;faesel@outlook.com&amp;#39;
        },
        rssFeedUrl: &amp;#39;/rss.xml&amp;#39;
    },
    ...
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-3---create-your-head-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---create-your-head-component&quot; aria-label=&quot;step 3   create your head component permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Create your head component&lt;/h2&gt;
&lt;p&gt;Now that we have all our static information in the config we can query this out using GraphQl through the objects &gt; &lt;strong&gt;site&lt;/strong&gt; &gt; &lt;strong&gt;siteMetadata&lt;/strong&gt;. We can also import in &lt;strong&gt;Helmet&lt;/strong&gt; and start building up our Head meta data. My Head component looks like this,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;#39;react&amp;#39;
import { Helmet } from &amp;#39;react-helmet&amp;#39;
import { useStaticQuery, graphql } from &amp;#39;gatsby&amp;#39;

import favicon from &amp;#39;../../static/favicon.ico&amp;#39;

const Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type datePublished }) =&amp;gt; {
    const data = useStaticQuery(graphql`
        query {
            site {
                siteMetadata {
                    siteUrl,
                    title,
                    author,
                    social {
                        twitterUsername
                    }
                }
            }
        }
    `)

    return (
        &amp;lt;&amp;gt;
            &amp;lt;Helmet title={`${pageTitle} | ${data.site.siteMetadata.title}`} /&amp;gt;
            &amp;lt;Helmet&amp;gt;
                &amp;lt;link rel=&amp;quot;icon&amp;quot; href={favicon} /&amp;gt;

                &amp;lt;meta name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;summary_large_image&amp;quot;&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:site&amp;quot; contact={data.site.siteMetadata.social.twitterUsername}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content={data.site.siteMetadata.twitterUsername}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:title&amp;quot; content={title}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:description&amp;quot; content={description}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content={imageUrl}&amp;gt;&amp;lt;/meta&amp;gt;

                &amp;lt;meta property=&amp;quot;og:locale&amp;quot; content=&amp;quot;en_GB&amp;quot; /&amp;gt;
                &amp;lt;meta property=&amp;quot;og:site_name&amp;quot; content={data.site.siteMetadata.title} /&amp;gt;
                &amp;lt;meta property=&amp;quot;og:title&amp;quot; content={title}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:url&amp;quot; content={url}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:description&amp;quot; content={description}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:image&amp;quot; content={imageUrl}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:image:alt&amp;quot; content={imageAlt}&amp;gt;&amp;lt;/meta&amp;gt;
                &amp;lt;meta property=&amp;quot;og:type&amp;quot; content={type} /&amp;gt;
            &amp;lt;/Helmet&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Head&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;(Note some of the properties get fleshed out later on in the article)&lt;/p&gt;
&lt;p&gt;The Helmet component injects in HTML tags into the head of the HTML document. To understand what the tags represent within the Helmet component, and to see a full range of what&apos;s available use the following two links.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ogp.me/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tags from Open Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Tags from Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-3---using-your-head-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---using-your-head-component&quot; aria-label=&quot;step 3   using your head component permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Using your head component&lt;/h2&gt;
&lt;p&gt;Using your head component is quite straight forward, its more a case of working out where to source all your properties. Here&apos;s what my page looks like,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;quot;react&amp;quot;
import { graphql } from &amp;quot;gatsby&amp;quot;
import Layout from &amp;quot;../components/layout&amp;quot;
import Head from &amp;quot;../components/head&amp;quot;

// Add some code here to get all your data from markdown, cms etc.

const Blog = props =&amp;gt; {
  return (
    &amp;lt;Layout&amp;gt;
      &amp;lt;Head 
        pageTitle={props.data.title}
        title={props.data.title}
        description={props.data.bodym.childMarkdownRemark.excerpt}
        url={`${props.data.site.siteMetadata.siteUrl}/blog/${props.data.slug}`}
        imageUrl={props.data.hero.file.url}
        imageAlt={props.data.hero.title} 
        type=&amp;#39;article&amp;#39; 
        datePublished={props.data.contentfulBlog.iso8601DatePublished}/&amp;gt;

      &amp;lt;h1&amp;gt;My Great Blog Post&amp;lt;/h1&amp;gt;
      ...
    &amp;lt;/Layout&amp;gt;
  )
}

export default Blog&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-4---go-further-with-json-ld-and-linked-data&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---go-further-with-json-ld-and-linked-data&quot; aria-label=&quot;step 4   go further with json ld and linked data permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Go further with JSON-LD and Linked data&lt;/h2&gt;
&lt;p&gt;So far so great, we have enough here for most social media sites to understand the structure of our data and to use this to correctly format the information on a consuming website. But what do search engines use?&lt;/p&gt;
&lt;p&gt;The answer is &lt;a href=&quot;https://json-ld.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Json-ld and linked data&lt;/a&gt;, best explained by the specs website itself,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON-LD is a lightweight Linked Data format. It is easy for humans to read and write. It is based on the already successful JSON format and provides a way to help JSON data interoperate at Web-scale. JSON-LD is an ideal data format for programming environments, REST Web services, and unstructured databases such as Apache CouchDB and MongoDB.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linked Data empowers people that publish and use information on the Web. It is a way to create a network of standards-based, machine-readable data across Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To sum it up in one sentence &lt;em&gt;we are using JSON data to create structured information so that websites can deep link with each other&lt;/em&gt;. With this in mind our head component looks like this:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;javascript&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;import React from &amp;#39;react&amp;#39;
import { Helmet } from &amp;#39;react-helmet&amp;#39;
import { useStaticQuery, graphql } from &amp;#39;gatsby&amp;#39;

const Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type, datePublished }) =&amp;gt; {
    const data = useStaticQuery(graphql`
        query {
            site {
                siteMetadata {
                    siteUrl,
                    title,
                    author,
                    social {
                        twitterUsername
                    }
                }
            }
        }
    `)

    const ldJsonBreadcrumb = {
        &amp;#39;@context&amp;#39;: &amp;#39;https://schema.org&amp;#39;,
        &amp;#39;@type&amp;#39;: &amp;#39;BreadcrumbList&amp;#39;,
        &amp;#39;itemListElement&amp;#39;: [{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 1,
            &amp;#39;name&amp;#39;: &amp;#39;Home&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/home`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 2,
            &amp;#39;name&amp;#39;: &amp;#39;Blog&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/blog`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 3,
            &amp;#39;name&amp;#39;: &amp;#39;Projects&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/projects`
        },{
            &amp;#39;@type&amp;#39;: &amp;#39;ListItem&amp;#39;,
            &amp;#39;position&amp;#39;: 4,
            &amp;#39;name&amp;#39;: &amp;#39;Contact&amp;#39;,
            &amp;#39;item&amp;#39;: `${data.site.siteMetadata.siteUrl}/contact`
        }]
      };

    const jsonldArticle = {
        &amp;#39;@context&amp;#39;: &amp;#39;http://schema.org&amp;#39;,
        &amp;#39;@type&amp;#39;: `${type}`,
        &amp;#39;description&amp;#39;: `${description}`,
        &amp;#39;image&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;ImageObject&amp;#39;,
            &amp;#39;url&amp;#39;: `${imageUrl}`
        },
        &amp;#39;mainEntityOfPage&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;WebPage&amp;#39;,
            &amp;#39;@id&amp;#39;: `${data.site.siteMetadata.siteUrl}`
         },
        &amp;#39;inLanguage&amp;#39;: &amp;#39;en&amp;#39;,
        &amp;#39;name&amp;#39;: `${title}`,
        &amp;#39;headline&amp;#39;: `${title}`,
        &amp;#39;url&amp;#39;: `${url}`,
        &amp;#39;datePublished&amp;#39;: `${datePublished}`,
        &amp;#39;dateModified&amp;#39;: `${datePublished}`,
        &amp;#39;author&amp;#39;: {
            &amp;#39;@type&amp;#39;: &amp;#39;Person&amp;#39;,
            &amp;#39;name&amp;#39;: `${data.site.siteMetadata.author}`
        },
        &amp;#39;publisher&amp;#39; : {
            &amp;#39;@type&amp;#39;: &amp;#39;Organization&amp;#39;,
            &amp;#39;name&amp;#39;: `${data.site.siteMetadata.author}`,
            &amp;#39;logo&amp;#39;: {
                &amp;#39;@type&amp;#39;: &amp;#39;ImageObject&amp;#39;,
                &amp;#39;url&amp;#39;: `https://images.ctfassets.net/wjg1udsw901v/4RI5COhSqeYFCbvzYFeFZW/af52277ab41da56c1be5f72f316befe9/logo.png`
            }
        }
    };

    return (
        &amp;lt;&amp;gt;
            &amp;lt;Helmet&amp;gt;
                {/* other head elements go here */}
      
                &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;
                    {JSON.stringify(ldJsonBreadcrumb)}
                &amp;lt;/script&amp;gt;
                
                {type === &amp;#39;article&amp;#39; &amp;amp;&amp;amp; (
                   &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;
                        {JSON.stringify(jsonldArticle)}
                    &amp;lt;/script&amp;gt;
                )}
  
                {/* Meta properties go here */}
                
            &amp;lt;/Helmet&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Head&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;For more information on the structure you can read up on the &lt;a href=&quot;https://www.w3.org/2018/jsonld-cg-reports/json-ld/#introduction&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;W3C Json-LD specification document&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get an idea of the full range of tags available take a look at these two links (in the case of my website I only use &lt;strong&gt;BreadcrumbList&lt;/strong&gt; and &lt;strong&gt;Article&lt;/strong&gt; types depending on what content you have you may show something else).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://schema.org/BreadcrumbList&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;BreadcrumbList&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://schema.org/Article&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Article&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do note for the property &lt;strong&gt;datePublished&lt;/strong&gt; you need to format your dates in &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;ISO-8601&lt;/a&gt; format. To save you a trip in google this up you can use the GraphQl query snippet below. The format definition comes from &lt;a href=&quot;https://momentjs.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Moment JS&lt;/a&gt; which Gatsby is using under the hood.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;iso8601DatePublished: datePublished(formatString: &amp;quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&amp;quot;)&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h2 id=&quot;step-5---validating-your-tags&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---validating-your-tags&quot; aria-label=&quot;step 5   validating your tags permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Validating your tags&lt;/h2&gt;
&lt;p&gt;There are actually various websites we can use to validate your tags and data. When building my website I used the following sources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cards-dev.twitter.com/validator&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Twitters Card testing tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.google.com/structured-data/testing-tool/u/0/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Googles link for testing json-ld&lt;/a&gt;, testing and validating tool for JSON-LD. It goes as far as telling you if there are any missing tags.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://metatags.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Matatags.io&lt;/a&gt;, great for previewing how you website links will render on all the social media websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TIP üòé! If your implementing this retrospectively twitter will update all your previous tweets with with extra formatting, but it does take about a week. If you want to refresh it quicker, you can use the &lt;strong&gt;Twitters Card testing tool&lt;/strong&gt; mentioned above to clear out the cache for an individual post.&lt;/p&gt;
&lt;p&gt;After that you can begin to tweet with confidence üòÅ&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/2ojzLoP0kubfHc6NdpTiIz/483dd1458ab941764b34ba1e3d5e67e9/TweetFormat.png&quot; alt=&quot;Tweet Format&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating my dream tech blog with GatsbyJS]]></title><description><![CDATA[I'm someone who's always had my own tech blog, I've gone through two revisions already with the last revision updating out of a 1997 style book. How much I contribute to the blog has always depended‚Ä¶]]></description><link>https://www.faesel.com/blog/gatsby-tech-blog-starter</link><guid isPermaLink="true">https://www.faesel.com/blog/gatsby-tech-blog-starter</guid><pubDate>Tue, 07 Jul 2020 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m someone who&apos;s always had my own tech blog, I&apos;ve gone through two revisions already with the last revision updating out of a 1997 style book. How much I contribute to the blog has always depended on how much friction and effort it takes to write content, manage and upload photos and paste in code. &lt;/p&gt;
&lt;p&gt;My previous revisions at its core have always been dependent on using opensource wysiwyg editors. Which for me have been deficient in several ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Behind the scenes, they produce HTML which always contains ghost üëª spaces.&lt;/li&gt;
&lt;li&gt;You always have to build in your own system to upload and manage photos.&lt;/li&gt;
&lt;li&gt;Pasting in code and getting it to format correctly has always been difficult.
The content I write belongs to the actual website, so every time I change or rebuild my website I have to migrate all my content across.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With all this in mind, I wanted a solution that leverages a content management system that supports markdown. Is free and open source, and easily extendable using a modern JavaScript framework. The combination I chose contains the following,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gatsby&lt;/strong&gt; Framework built on React that creates a really fast experience and is easily extendable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contentful&lt;/strong&gt; One of the leading content management systems that support markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disqus&lt;/strong&gt; One of the most popular commenting systems mainly chose this as a continuation from my previous website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Github Pages&lt;/strong&gt; Free hosting by the GitHub guys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Due to everything being either free or opensource, you can download the source code &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;, follow the steps in the readme or below in this article and get started with your own tech blog.&lt;/p&gt;
&lt;h2 id=&quot;why-use-contentful&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-contentful&quot; aria-label=&quot;why use contentful permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Contentful?&lt;/h2&gt;
&lt;p&gt;If your someone like me and you don&apos;t want to be restricted to the world of WordPress websites, Contentful is the next best thing. As the name describes its a repository for your content and nothing else. Where Contentful really shines is in how easy it is to get your content out. Everything is API accessible and in a JSON format, so if I ever decide to build v4 its just a case of hooking up the CMS.&lt;/p&gt;
&lt;p&gt;Contentful also supports writing in markdown format which is absolutely crucial if you&apos;re going to be pasting in code (as markdown supports syntax highlighting you will get the most accurate code colours when rendering).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/107DfGPIMth9cXJcd7aXNf/73b9fa04c61fbb34a5f33efda16e82d4/contentful.png&quot; alt=&quot;Contentful UI&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-use-disqus&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-disqus&quot; aria-label=&quot;why use disqus permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Disqus?&lt;/h2&gt;
&lt;p&gt;As mentioned Disqus was mainly a continuation from the previous version of my website, there are however some plus points to using Disqus. Namely the popularity (See image below), Disqus is by far the most popular commenting system out there, its also incredibly easy to get set up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/4y1BkGbHeRGvzMNEX6D0lO/d92bb715335b7119b10d8352da2e1c5e/disqus-vs-commento.png&quot; alt=&quot;Disqus vs Commento&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are some annoyances however, namely the lack of markdown support, which could be an issue if a commenter wants to post a code snippet.&lt;/p&gt;
&lt;p&gt;Perhaps at some point I will migrate to using &lt;a href=&quot;https://commento.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Commento&lt;/a&gt;, theres a great article comparing the two &lt;a href=&quot;https://victorzhou.com/blog/replacing-disqus/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-github-pages&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-github-pages&quot; aria-label=&quot;why github pages permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why GitHub pages?&lt;/h2&gt;
&lt;p&gt;Firstly it&apos;s free hosting! What more do you want...&lt;/p&gt;
&lt;p&gt;I have always relied on using Azure to host my pages but unless you got a Biztalk account there&apos;s a cost in doing so. Github allows you to host content on their website for absolutely free, its got two forms of public pages. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Personal pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This sits under your personal repository path, so in my case my username is faesel (&lt;a href=&quot;https://github.com/faesel/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://github.com/faesel/&lt;/a&gt;), when creating a repository called &apos;faesel&apos; and enabling pages. GitHub gives you the domain &lt;a href=&quot;https://faesel.github.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://faesel.github.io&lt;/a&gt;. What&apos;s amazing is (provided your DNS is setup correctly) they also handle SSL certificates for your behalf.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Project pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github also supports project pages which sit under a subdomain of your repository, for example a repository with the link &lt;a href=&quot;https://github.com/faesel/faesel-blog&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://github.com/faesel/faesel-blog&lt;/a&gt; would resolve into public page URL for &lt;a href=&quot;https://faesel.github.io/faesel-blog&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://faesel.github.io/faesel-blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For my blog option 1 was chosen. There is one caveat to personal pages, your published output needs to reside in master and your actual source code needs to be in another branch. The Gatsby template I have created, uses master and source as the two main branches as you can see &lt;a href=&quot;https://github.com/faesel/faesel.github.io/branches&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-use-gatsby&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-use-gatsby&quot; aria-label=&quot;why use gatsby permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why use Gatsby?&lt;/h2&gt;
&lt;p&gt;Gatsby lightning fast when it comes to rendering pages, behind the scenes it builds up static pages which you deploy to your website. As it&apos;s designed to be a progressive web app, pre-fetching is built it, so when your cycles through different pages on your website the load times are instant.&lt;/p&gt;
&lt;p&gt;Gatsby supports a wide range of plugins, &lt;strong&gt;2162&lt;/strong&gt; at the time of writing this article. Admittedly some of them are duplicates, but overall they have enough coverage to integrate the vast majority of 3rd party platforms. Below are some plugins I used for my blog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-feed&lt;/strong&gt; Used for generating an RSS feed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-sitemap&lt;/strong&gt; Used for generating a sitemap xml file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-gtag&lt;/strong&gt; Used for integrating google analytics into your blog&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-react-helmet&lt;/strong&gt; SEO plugin used for setting titles and metadata&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-plugin-sass&lt;/strong&gt; Integrating sass&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-remark-highlight-code&lt;/strong&gt; Used for highlighting code syntax&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-source-contentful&lt;/strong&gt; Used for getting data from Contentful&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gatsby-transformer-remark&lt;/strong&gt; Used for transforming markdown into HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full list of their plugins can be found &lt;a href=&quot;https://www.gatsbyjs.org/plugins/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As Gatsby is built on top of React which means extending your website&apos;s functionality is easy. In addition to this data access is all powered through GraphQL which really helps tailor the requests for data in accordance with your UI. All this is setup for you right out the box.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-the-blog-template-to-create-my-own-tech-blog&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-to-use-the-blog-template-to-create-my-own-tech-blog&quot; aria-label=&quot;how to use the blog template to create my own tech blog permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How to use the blog template to create my own tech blog?&lt;/h2&gt;
&lt;p&gt;As mentioned I have created a Gatsby blog template that you can clone yourself, setup and host all at no cost at all. The code can be found &lt;a href=&quot;https://github.com/faesel/gatsby-techblog-starter&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some pre-requisites we need to get through before we can begin, mainly creating accounts in the following 3rd partys.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.contentful.com/sign-up/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Contentful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://analytics.google.com/analytics/web/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;step-1---configuring-contentful&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---configuring-contentful&quot; aria-label=&quot;step 1   configuring contentful permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Configuring Contentful&lt;/h3&gt;
&lt;p&gt;The first step is to configure Contentful by creating a content model. A content model represents all the building blocks required to represent a single blog post. Below is a screenshot of the content model needed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/leOFhubn56i1CiN7MeIjK/442336bb18392148c6ac4e16ed496375/content-model.png&quot; alt=&quot;Gatsby blog content model&quot;&gt;&lt;/p&gt;
&lt;p&gt;If your creating it manually do remember to set the field &apos;BodyM&apos; as a markdown field. Once this model is in place, you can begin writing up your first markdown post. To create this model programatically you can run the following command:&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;npm run setup SPACE_ID CONTENTFUL_MANAGEMENT_TOKEN&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;The management token can be sourced from &lt;strong&gt;Settings&lt;/strong&gt; &gt; &lt;strong&gt;API Keys&lt;/strong&gt; &gt; &lt;strong&gt;Content management tokens&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two settings we need to take a note of that are needed for &lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Space Id&lt;/li&gt;
&lt;li&gt;Space Access Token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these can be sourced from &lt;strong&gt;Settings&lt;/strong&gt; &gt; &lt;strong&gt;API Keys&lt;/strong&gt; &gt; &lt;strong&gt;Content delivery / preview tokens&lt;/strong&gt;, &lt;/p&gt;
&lt;h3 id=&quot;step-2---configuring-environment-variables&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---configuring-environment-variables&quot; aria-label=&quot;step 2   configuring environment variables permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Configuring Environment Variables&lt;/h3&gt;
&lt;p&gt;The next step is to populate your environment variables, the two Contentful keys can be accessed by following Step 1. Setting up google and Discus is optional.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;CONTENTFUL_SPACE_ID=
CONTENTFUL_ACCESS_TOKEN=
GOOGLE_TRACKING_ID=
GATSBY_DISQUS_NAME=&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h3 id=&quot;step-3---configuring-your-gatsby-config&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---configuring-your-gatsby-config&quot; aria-label=&quot;step 3   configuring your gatsby config permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Configuring your gatsby config&lt;/h3&gt;
&lt;p&gt;The gatsby config file is at the root of this project, it contains all the plugins installed into this project.&lt;/p&gt;

        &lt;deckgo-highlight-code   terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;module.exports = {
    siteMetadata: {
        title: &amp;#39;FAESEL.COM&amp;#39;,
        author: &amp;#39;Faesel Saeed&amp;#39;,
        description: &amp;#39;Welcome to my great blog&amp;#39;,
        siteUrl: &amp;#39;https://www.faesel.com&amp;#39;, //Use the fully qualified url
        social: {
            twitter: &amp;#39;https://twitter.com/@faeselsaeed&amp;#39;, //Use the fully qualified url
            linkedin: &amp;#39;https://www.linkedin.com/....&amp;#39;,
            github: &amp;#39;https://github.com/....&amp;#39;,
            flickr: &amp;#39;https://www.flickr.com/....&amp;#39;, //Feel free to remove this :)
            email: &amp;#39;someone@gmail.com&amp;#39;
        },
    },
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Once This is filled in your all set to run the project!&lt;/p&gt;
&lt;h3 id=&quot;step-4---running-the-project&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---running-the-project&quot; aria-label=&quot;step 4   running the project permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Running the project&lt;/h3&gt;
&lt;p&gt;Begin by installing dependencies: &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm install&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Followed by running the website:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm run develop&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-5---deployment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---deployment&quot; aria-label=&quot;step 5   deployment permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Deployment&lt;/h2&gt;
&lt;p&gt;To deploy the project begin by creating a repository containing your GitHub username &quot;faesel.github.io&quot;.&lt;/p&gt;
&lt;p&gt;Copy all your code into a branch called &lt;strong&gt;source&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Run the following command&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;npm run publish&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The command will publish all the static files Gatsby generates into the &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;p&gt;To enable github pages navigate to the &lt;strong&gt;Repository&lt;/strong&gt; &gt; &lt;strong&gt;Settings&lt;/strong&gt; &gt; Scroll down to github pages and select the source branch as &lt;strong&gt;master&lt;/strong&gt;. Also at this step if you can enter in your custom domain. Once setup it should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/1Yc9sjRgkxBBCaHx8svVIq/5f94cf13095287375f58e96648ee799f/github_pages.png&quot; alt=&quot;Github Pages&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h2&gt;
&lt;p&gt;Its as easy as that, you know have a blog whos content is powered by Contentful! ... time to blog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5jtQ1A9KGisfOeDCLQqPdT/49d682dbf90be3495ca0c6ad31ab85e1/website.png&quot; alt=&quot;Gatsby blog template&quot;&gt;&lt;/p&gt;
&lt;p&gt;As with all things in tech, there are some improvements that got taken off the bucket list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate deployments by making use of webhooks triggered when publishing content.&lt;/li&gt;
&lt;li&gt;Add a plugin to allow embeding content like tweets, youtube posts ect.&lt;/li&gt;
&lt;li&gt;Add a searching mechanism&lt;/li&gt;
&lt;li&gt;Add pagination&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-honourable-mention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#the-honourable-mention&quot; aria-label=&quot;the honourable mention permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Honourable mention&lt;/h2&gt;
&lt;p&gt;This article and the project was inspired by Andrew Mead&apos;s &lt;a href=&quot;https://www.youtube.com/watch?v=kzWIUX3CpuI&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;strong&gt;&apos;The Great Gatsby Bootcamp&apos;&lt;/strong&gt;&lt;/a&gt; course which I highly recommend in learning the basics.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;100%&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/kzWIUX3CpuI?rel=0&quot; frameBorder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowFullScreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Making a Azure poison queue Slack notifier]]></title><description><![CDATA[I'm currently working at a place were we are using queue triggered Webjobs to handle the sending of messages like email and SMS (using Send Grid and Twilio). Using a queue based system for this is‚Ä¶]]></description><link>https://www.faesel.com/blog/azure-poison-queue-notifier</link><guid isPermaLink="true">https://www.faesel.com/blog/azure-poison-queue-notifier</guid><pubDate>Fri, 22 Sep 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;m currently working at a place were we are using queue triggered Webjobs to handle the sending of messages like email and SMS (using Send Grid and Twilio). Using a queue based system for this is great because it allows us to replay any queue messages, should one of the 3rd party&apos;s (or our code) fail to send the message. &lt;/p&gt;
&lt;p&gt;Since we are connecting into 3rd party&apos;s you can almost guarantee there&apos;s going to be some form of failure. So its always good practice to leverage on this type of architecture to handle the unknown. We have the following setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Website¬†&gt; Storage Queue¬†&gt; Web Job¬†&gt; Send Grid&lt;/li&gt;
&lt;li&gt;Website¬†&gt; Storage Queue¬†&gt; Web Job¬†&gt; Twillio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a failure occurs, queue messages are automatically moved from the
message queue into a poison queue,¬†these queues¬†are always suffixed with &quot;poison&quot; (MS really wanted to highlight how toxic your problems are) like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email - For normal operation&lt;/li&gt;
&lt;li&gt;email-poison - Messages moved here when a failure occurs&lt;/li&gt;
&lt;li&gt;sms&lt;/li&gt;
&lt;li&gt;sms-poison&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gaining visibility of what&apos;s in a poison queue is really important in knowing
the health of your system. So I embarked upon a task in seeking out an
alert setting buried deep somewhere in¬†the Azure portal to help¬†surface
any messages going into the poison queue. I knew this would be a metric
alert of some kind either in the &apos;Storage Account&apos;, &apos;Alerts&apos; or perhaps
even &apos;Application Insights&apos; blade. &lt;/p&gt;
&lt;p&gt;After having spent a while searching for it as well as posting this Stack Overflow¬†question (it wasn&apos;t a popular one..), I started doubting whether it even existed!&lt;/p&gt;
&lt;p&gt;I even tried the search box at the top of the azure dashboard as a last ditch effort, hoping it will provide answers. You think this would
exists somewhere (if it does and my eyes have deceived me please do get
in touch) or at the very least be visible and easily findable? Alas this was not the case..&lt;/p&gt;
&lt;p&gt;So I decided to do something about it, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why not have an Azure function that takes a storage account and looks through all the queues to check if any poison queue messages exist. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst were at it we could also check if messages are stacking up in the non-poison queues (just in-case a Webjob has been turned off or cant process a certain message), and even provide the content of a problematic queue message. Since our team uses slack for communication I decided to send the notification to Slack. Below are the steps I took:&lt;/p&gt;
&lt;h1 id=&quot;step-1---setting-up-slack&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1---setting-up-slack&quot; aria-label=&quot;step 1   setting up slack permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 - Setting up slack&lt;/h1&gt;
&lt;p&gt;Setting up slack is quick and easy, just create a &apos;poison-queue&apos; channel, and create a new integration in the custom integrations section (Note your gonna have to get admin access to do this (I have provided a link at the bottom of this article as its nested deep in their UI). An integration is essentially a web hook endpoint for us to post JSON data to (I have added a link for Slacks JSON format below too, as well as a message builder to help customise the look and feel).&lt;/p&gt;
&lt;p&gt;The picture below show where you can get your web hook URL from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/1y3YcZQRnN6yhsilboTyhL/5c9fad66a9601cc851c9377d26198258/slackwebhook.jpg&quot; alt=&quot;Azure Queue Notifier - Slack Integration&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;step-2---create-your-azure-function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2---create-your-azure-function&quot; aria-label=&quot;step 2   create your azure function permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 - Create your Azure Function&lt;/h1&gt;
&lt;p&gt;Since this is not a tutorial on Azure Functions, I&apos;m going to skip going into detail here. Microsoft however have provided some great documentation on this (with pictures!) to help you out. Links are at the end until MS break them. By the way your gonna need a cron expression to define the timeframe for this function to work in, if you hate cron as much as I do worry not! Use my cron expression for a daily sobering alert at 9:00 - 0 0 9 * * *&lt;/p&gt;
&lt;h1 id=&quot;step-3---create-your-slack-message-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3---create-your-slack-message-structure&quot; aria-label=&quot;step 3   create your slack message structure permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 - Create your slack message structure&lt;/h1&gt;
&lt;p&gt;Next we can create the basic structure needed for our Slack message, expressed as a C# class. My class is actually quite simple and missing quite a few properties, to get a sense of all the customisations Slack offers have a look at the links below.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Newtonsoft.Json&amp;quot;

#load &amp;quot;Attachments.csx&amp;quot;

using Newtonsoft.Json;
using System.Collections.Generic;

public sealed class SlackMessage
{
    public SlackMessage()
    {
        Attachments = new List&amp;lt;Attachments&amp;gt;();
    }

    [JsonProperty(&amp;quot;channel&amp;quot;)]
    public string Channel { get; set; }

    [JsonProperty(&amp;quot;username&amp;quot;)]
    public string UserName { get; set; }

    [JsonProperty(&amp;quot;text&amp;quot;)]
    public string Text { get; set; }

    [JsonProperty(&amp;quot;attachments&amp;quot;)]
    public List&amp;lt;Attachments&amp;gt; Attachments { get; set; }

    [JsonProperty(&amp;quot;icon_emoji&amp;quot;)]
    public string Icon
    {
        get { return &amp;quot;:computer:&amp;quot;; }
    }
}

#r &amp;quot;Newtonsoft.Json&amp;quot;

using Newtonsoft.Json;

public class Attachments
{
    [JsonProperty(&amp;quot;color&amp;quot;)]
    public string Colour { get; set; }

    [JsonProperty(&amp;quot;title&amp;quot;)]
    public string Title { get; set; }

    [JsonProperty(&amp;quot;text&amp;quot;)]
    public string Text { get; set; }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Remember to create these classes as .csx files for the Azure function to understand them.&lt;/p&gt;
&lt;h1 id=&quot;step-4---create-a-slack-client-to-post-the-message&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4---create-a-slack-client-to-post-the-message&quot; aria-label=&quot;step 4   create a slack client to post the message permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 - Create a slack client to post the message&lt;/h1&gt;
&lt;p&gt;Now that we have our message structure we can create a class to serialize and post the JSON to Slack using the Webhook created in &lt;strong&gt;Step 1&lt;/strong&gt;, below is the code to do this,&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Newtonsoft.Json&amp;quot;
#r &amp;quot;System.Web.Extensions&amp;quot;
#r &amp;quot;System.Web&amp;quot;

#load &amp;quot;SlackMessage.csx&amp;quot;
#load &amp;quot;Attachments.csx&amp;quot;

using System.Net;
using Newtonsoft.Json;
using System.Collections.Specialized;

public class SlackClient
{
    public static readonly string WebHook = @&amp;quot;https://hooks.slack.com/services/XXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;quot;;

    public void SendMessage(SlackMessage message)
    {
        string payloadJson = JsonConvert.SerializeObject(message);
        
        using (WebClient client = new WebClient())
        {
            NameValueCollection data = new NameValueCollection();
            data[&amp;quot;payload&amp;quot;] = payloadJson;
            client.UploadValues(WebHook, &amp;quot;POST&amp;quot;, data);
        }
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Its good practice to move the Webhook URL into the settings file, for simplicity I have included it into this class.&lt;/p&gt;
&lt;h1 id=&quot;step-5---queue-checker&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5---queue-checker&quot; aria-label=&quot;step 5   queue checker permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 - Queue Checker&lt;/h1&gt;
&lt;p&gt;Next we need to add code to loop through any connections string we pass it, check all the queues and send messages if we think there&apos;s something wrong.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#r &amp;quot;Microsoft.WindowsAzure.Storage&amp;quot;

#load &amp;quot;SlackClient.csx&amp;quot;
#load &amp;quot;SlackMessage.csx&amp;quot;
#load &amp;quot;Attachments.csx&amp;quot;

using System.Collections.Generic;
using System.Linq;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;

public class PoisonQueueChecker
{
    public void CheckPoisonQueues(Dictionary&amp;lt;string, string&amp;gt; storageConnectionStrings)
    {
        var slackClient = new SlackClient();
        var slackMessage = new SlackMessage { Text = &amp;quot;Poison Queue Alerts&amp;quot;, Channel = &amp;quot;poison-queue&amp;quot; };

        foreach (var storageConnectionString in storageConnectionStrings)
        {
            var storageCredentials = new StorageCredentials(storageConnectionString.Key, storageConnectionString.Value);
            var storageAccount = new CloudStorageAccount(storageCredentials, true);
            var queueClient = storageAccount.CreateCloudQueueClient();

            var queues = queueClient.ListQueues();
            foreach (var queue in queues)
            {
                queue.FetchAttributes();
                //Gets the total messages in the queue
                var queueCount = queue.ApproximateMessageCount;

                if (queueCount &amp;gt; 0)
                {
                    var isPoisonQueue = queue.Name.EndsWith(&amp;quot;poison&amp;quot;);
                    var attachment = new Attachments();
                    attachment.Title = $&amp;quot;Queue: {queue.Name}, Message Count: {queueCount}&amp;quot;;
                    attachment.Colour = isPoisonQueue ? &amp;quot;danger&amp;quot; : &amp;quot;warning&amp;quot;;

                    //Note the peek function will not dequeue the message
                    var message = queue.PeekMessage();
                    attachment.Text = $@&amp;quot;Insertion Time: {message.InsertionTime}, Sample Contents:\n&amp;quot; +
                                        $&amp;quot; {message.AsString}&amp;quot;;                        

                    slackMessage.Attachments.Add(attachment);
                }
            }

            //Add a message showing all is well
            if (!slackMessage.Attachments.Any())
            {
                slackMessage.Attachments.Add(new Attachments { Title = &amp;quot;All queues are operational and empty&amp;quot;, Colour = &amp;quot;good&amp;quot; });
            }
        }

        slackClient.SendMessage(slackMessage);
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;h1 id=&quot;step-6---being-it-all-together&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-6---being-it-all-together&quot; aria-label=&quot;step 6   being it all together permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 6 - Being it all together&lt;/h1&gt;
&lt;p&gt;Final step is to hook up the functions run method like so:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;#load &amp;quot;PoisonQueueChecker.csx&amp;quot;

using System;
using System.Collections.Generic;

public static void Run(TimerInfo myTimer, TraceWriter log)
{
    log.Info($&amp;quot;C# Timer trigger function executed at: {DateTime.Now}&amp;quot;);

    var storageConnectionStrings = new Dictionary();
    storageConnectionStrings.Add(&amp;quot;storagename&amp;quot;, &amp;quot;storagekey&amp;quot;);

    var poisonQueueChecker = new PoisonQueueChecker();
    poisonQueueChecker.CheckPoisonQueues(storageConnectionStrings);
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;And that&apos;s it, 9 O&apos;clock tomorrow you can finally start gaining visibility of those poison queues and start worrying about those dodgy lines of code causing your messages to be poisoned.&lt;/p&gt;
&lt;h1 id=&quot;helpful-links&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#helpful-links&quot; aria-label=&quot;helpful links permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Helpful Links&lt;/h1&gt;
&lt;p&gt;Custom Integrations&lt;/p&gt;
&lt;p&gt;https://&amp;#x3C;&lt;yourslackgroupname&gt;&gt;.slack.com/apps/manage/custom-integrations&lt;/p&gt;
&lt;p&gt;Customising your slack message&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.slack.com/docs/messages/builder&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://api.slack.com/docs/messages/builder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to send a slack message to your web hook:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://api.slack.com/custom-integrations/incoming-webhooks&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://api.slack.com/custom-integrations/incoming-webhooks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to create a azure function:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to code up a azure function:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-csharp&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Fix poor project structure with Convention Based Programming]]></title><description><![CDATA[Having looked at a number of projects in my lifetime, I always come across classes named something like "CustomerService" with similar variations (usually in the same project calling each other‚Ä¶]]></description><link>https://www.faesel.com/blog/convention-based-programming</link><guid isPermaLink="true">https://www.faesel.com/blog/convention-based-programming</guid><pubDate>Sat, 19 Aug 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Having looked at a number of projects in my lifetime, I always come across classes named something like &quot;CustomerService&quot; with similar variations (usually in the same project calling each other) ranging from &quot;CustomerProvider / Helper /Manager / Store / etc...&quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors - PhilKarlton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a new developer working on a project it becomes really hard to figure out what the structure is, and in the case of adding code what to name classes. Naming and structure always seem to be a developers achilles heel(almost akin to superman and kryptonite).&lt;/p&gt;
&lt;p&gt;So, I wanted to come up with a solution to the problem, something more structured that helps facilitate better naming and structuring and the way I decided to do this is through dependency injection. &lt;/p&gt;
&lt;p&gt;By now we are all familiar with Inversion of control, and comfortable using it to decouple dependencies within our applications. Most of us have dabbled with the usual suspects CastleWindsor, AutoFaq, Ninject to name a few. &lt;/p&gt;
&lt;p&gt;One thing people don‚Äôt realise is we can also utilise these frameworks to enforce good structure as well as unit test the structure itself to ensure new developers don‚Äôt stray from the named path. For the examples below I&apos;m going to use Castle Windsor.&lt;/p&gt;
&lt;h1 id=&quot;step-1--define-the-structure-and-start-naming-the-onion-layers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1--define-the-structure-and-start-naming-the-onion-layers&quot; aria-label=&quot;step 1  define the structure and start naming the onion layers permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1 ‚Äì Define the structure and start naming the onion layers&lt;/h1&gt;
&lt;p&gt;The codebases of yester-year were usually architected using a n-tier structure typically following the pattern: &lt;/p&gt;
&lt;p&gt;Presentation Layer (Controller) &gt; Business Layer (Service) &gt; Data Layer (Repository)&lt;/p&gt;
&lt;p&gt;As time progressed new patterns emerged the structure became more complex however we still try to adopt some form of onion layering within the application. Whether it‚Äôs one onion or many within a single solution we should always strive to define what the layers are in the application.&lt;/p&gt;
&lt;p&gt;So, to start we should define:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What the onion layer is named (forming groups of similar classes).&lt;/li&gt;
&lt;li&gt;What the responsibility of each layer is.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;step-2--create-your-conventions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2--create-your-conventions&quot; aria-label=&quot;step 2  create your conventions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2 ‚Äì Create your conventions&lt;/h1&gt;
&lt;p&gt;Now that we have some understanding of the layers, we can start defining them in code. I use an empty interface to do this. Note Castle distinguishes these layers as &apos;Conventions&apos;.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains business logic, it also does not directly access any data source.
public interface IService
{
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Note the interface has no bearing on logic, and does not alter how the app behaves. It‚Äôs simply used as a marker to distinguish the layers of the application. A small description is also provided to define what the responsibility of the layer is. These conventions are also a way to document the structure of the application.&lt;/p&gt;
&lt;h1 id=&quot;step-3--install-all-dependencys-using-the-convention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3--install-all-dependencys-using-the-convention&quot; aria-label=&quot;step 3  install all dependencys using the convention permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3 ‚Äì Install all dependency‚Äôs using the convention.&lt;/h1&gt;
&lt;p&gt;Now that we have a convention we can blanket install all classes subscribing to that convention, if your using castle Windsor there is a slight difference in how this is done depending on whether you apply the convention directly on the class itself or if you apply it to another interface.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applying it to an interface&lt;/strong&gt;&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains business logic, it also does not directly access any data source.
public interface IService
{
}

/// Blanket install all IServies
container.Register(Classes.FromAssembly(Assembly.Load(&amp;quot;Assembly name goes here&amp;quot;))
    .BasedOn(IService)
    .WithService.AllInterfaces()
    .LifestyleSingleton());

/// Example usage
public interface ICustomerService : IService
public class CustomerService : ICustomerService&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;&lt;strong&gt;Applying it to a class&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When applying it to class the installation has a slight difference.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;/// A class that contains a business rule, it validates whether the rule has been met
public interface IRule
{
 string ApplyRule();
}

container.Register(Classes.FromAssembly(Assembly.Load(&amp;quot;Assembly name goes here&amp;quot;))
 .BasedOn(IRule)
 .WithService.Base()
 .LifestyleSingleton());

public class CustomerRule : IRule&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;When creating a new class that fits within a pre-defined convention installation becomes a walk in the park, just apply the convention interface and you‚Äôre done.&lt;/p&gt;
&lt;h1 id=&quot;step-4--unit-testing-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-4--unit-testing-structure&quot; aria-label=&quot;step 4  unit testing structure permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 4 ‚Äì Unit testing structure&lt;/h1&gt;
&lt;p&gt;Now that we have our convention setup and we are installing all classes with that convention we can apply a unit tests that will check against the structure. We are testing on two things here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only Services should have a‚ÄòService‚Äô Suffix&lt;/li&gt;
&lt;li&gt;Only Services should exist in a ‚ÄòService‚Äô namespace&lt;/li&gt;
&lt;/ol&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[TestFixture]
public class TestSolutionConventionTests
{
    [SetUp]
    public void Setup()
    {
        // Register all dependencys in the project using castle
        RegisterDependencies(); 
    }

    [Test]
    public void OnlyServices_HaveServiceSuffix()
    {
        // Get access to IWindsorContainer
        var container = DependencyResolver.Container; 
        // Get all classes in the application where the name ends with Service (using reflection).
        var allServices = GetPublicClassesFromApplicationAssembly(c =&amp;gt; c.Name.EndsWith(&amp;quot;Service&amp;quot;), &amp;quot;Assembly name where service exists goes here&amp;quot;);
        // Get all services installed within castles container that use the interface IService
        var registeredServices = GetImplementationTypesFor(typeof(IService), container);

        // Assert the names all match and are equal
        allServices.ToList().Should().Equal(registeredManagers, (ac, rc) =&amp;gt; ac.Name == rc.Name);
    }

    [Test]
    public void OnlyServices_LiveInServicesNamespace()
    {
        var container = DependencyResolver.Container; 
        // Get all classes in the application where the namespace contains Service
        var allServices = GetPublicClassesFromApplicationAssembly(c =&amp;gt; c.Namespace.Contains(&amp;quot;Service&amp;quot;), &amp;quot;Assembly name where service exists goes here&amp;quot;);
        var registeredServices = GetImplementationTypesFor(typeof(IService), container);

        allServices.ToList().Should().Equal(registeredManager, (ac, rc) =&amp;gt; ac.Name == rc.Name);
    }

    private Type[] GetPublicClassesFromApplicationAssembly(Predicate where, string assemblyName)
    {
        return Assembly.Load(assemblyName).GetExportedTypes()
            .Where(t =&amp;gt; t.IsClass)
            .Where(t =&amp;gt; t.IsAbstract == false)
            .Where(where.Invoke)
            .OrderBy(t =&amp;gt; t.Name)
            .ToArray();
    }

    private Type[] GetImplementationTypesFor(Type type, IWindsorContainer container)
    {
        return container.Kernel.GetAssignableHandlers(type)
            .Select(h =&amp;gt; h.ComponentModel.Implementation)
            .OrderBy(t =&amp;gt; t.Name)
            .ToArray();
    }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Picture below describes what these unit tests protect against:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/5DsNc00VzOuEgttxz02Wh0/a5d882981f31c1fad410cea2e30af5dd/conventionexample.jpg&quot; alt=&quot;Convention Based Programming - Unit tests&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;step-5--introducing-new-conventions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-5--introducing-new-conventions&quot; aria-label=&quot;step 5  introducing new conventions permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 5 ‚Äì Introducing new conventions&lt;/h1&gt;
&lt;p&gt;As your solution evolves you‚Äôre going to come across certain scenarios where the responsibilities of a class don‚Äôt fit into the conventions defined (as we have a list of conventions with descriptions it‚Äôs easy to distinguish if a new convention is needed). These scenarios will mainly occur at the beginning phase of a new application (as its rapidly evolving) and as conventions get defined you will find that having to define a new one will become an increasingly rare activity.&lt;/p&gt;
&lt;p&gt;This process should mitigate the scenario of having a customer/service/manager/provider‚Ä¶&lt;/p&gt;
&lt;h1 id=&quot;step-6--sharing-conventions-across-projects-unified-code-base&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-6--sharing-conventions-across-projects-unified-code-base&quot; aria-label=&quot;step 6  sharing conventions across projects unified code base permalink&quot; class=&quot;auto-link-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;40&quot; width=&quot;40&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 6 ‚Äì Sharing conventions across projects unified code base&lt;/h1&gt;
&lt;p&gt;Once we‚Äôve established some conventions for a project we can easily extract these out into a separate project and package it as a NuGet package. This allows us to apply the conventions to other solutions giving us a unified structure that looks the same from one solution to another.&lt;/p&gt;
&lt;p&gt;New developers will surely appreciate this, and as a co-worker sitting next to them the wtf count will be below uncomfortable thresholds!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Splitting NUnit Unit Tests With TeamCity To Decrease CI Time]]></title><description><![CDATA[This is a quick guide on how to split unit tests into different categories to decrease the time it takes for your CI build to run. The categories can be used to distinguish different areas of your‚Ä¶]]></description><link>https://www.faesel.com/blog/nunit-test-ci-split</link><guid isPermaLink="true">https://www.faesel.com/blog/nunit-test-ci-split</guid><pubDate>Fri, 31 Mar 2017 23:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is a quick guide on how to split unit tests into different categories to decrease the time it takes for your CI build to run. The categories can be used to distinguish different areas of your tests to break down the CI Builds (typically used to run different categories in parallel) or to separate slow running tests into a separate build, all in the aim of speeding up the feedback cycle for developers. So to create a category you simple add a category attribute to either a test or a test fixture like so:&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[Category(&amp;quot;CategoryOne&amp;quot;)] 
[TestFixture] 
public void FunkyMethod() 
{ 
    string pointless = &amp;quot;this is code&amp;quot;; 
} 

[Category(&amp;quot;CategoryFour&amp;quot;)] 
[TestFixture] 
public class UpgradeControllerTests 
{ 
  ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;When segregating tests sometimes you will find a tests intersects multiple categories, in this case you can add multiple attributes. Later on we will see the different types of expressions you are able to enter when running the tests through TeamCity. Below is an example of using multiple categories&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[Category(&amp;quot;CategoryOne&amp;quot;)] 
[Category(&amp;quot;CategoryTwo&amp;quot;)] 
[Test] 
public void FunkyMethod() 
{ 
    string pointless = &amp;quot;this is code&amp;quot;; 
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;So far creating categories like this is fine however having magic strings all over your code is not great. So to fix this we can create a custom attribute which does exactly the same thing as shown below. The custom attribute inherits from CategoryAttribute.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;//Used for a test fixture 
[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] 
public sealed class CategoryFiveAttribute : CategoryAttribute { } 
//Used for a test 
[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] 
public sealed class CategoryThreeAttribute : CategoryAttribute { }&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;Now that we have the attributes ready we can use them like so.&lt;/p&gt;

        &lt;deckgo-highlight-code language=&quot;csharp&quot;  terminal=&quot;carbon&quot; line-numbers=&quot;true&quot; &gt;
          &lt;code slot=&quot;code&quot;&gt;[TestFixture, CategoryFiveAttribute] 
public class SignOutControllerTests 
{ 
  ...&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
      
&lt;p&gt;To configure team city to run certain categories is fairly straightforward. Start by creating a Build step with the runner type set to ‚ÄúNUnit‚Äù.  Under Run tests from select your test project dll file. And then under Nunit categories include list the categories you want to test out by writing&lt;/p&gt;
&lt;p&gt;/Include: CategoryOne&lt;/p&gt;
&lt;p&gt;Note that you can also do the inverse and exclude certain tests by adding the following in the section named Nunit categories exclude&lt;/p&gt;
&lt;p&gt;/Exclude: CategoryOne&lt;/p&gt;
&lt;p&gt;NUnit also supports quite complex expressions, to see a full list click here (section ‚ÄúSpecifying test categories to include or exclude‚Äù). &lt;/p&gt;
&lt;p&gt;A screenshot is included for a full list of settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/wjg1udsw901v/56EtPebPnDplF4gswxjpJH/f4ac2ffe01af7d3933838d4425d26bc8/teamcitytestcategory.png&quot; alt=&quot;Nunit Test - Teamcity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once you have this in place your unit tests will run with lightening speed.&lt;/p&gt;</content:encoded></item></channel></rss>