{"componentChunkName":"component---src-templates-blog-js","path":"/blog/deconstruct-objects-in-csharp-like-in-javascript","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.faesel.com"}},"contentfulBlog":{"title":"How to Deconstruct objects in C# like we do in Javascript","slug":"deconstruct-objects-in-csharp-like-in-javascript","tags":["c#","javascript","deconstruction","syntax",".net"],"hero":{"file":{"url":"//images.ctfassets.net/wjg1udsw901v/4l5ONHEazPnD41lO0henyW/d4cbb6edf21c40cdb3e340faf620a270/deconstruction.jpg"},"title":"Deconstruct"},"datePublished":"April 8th, 2021","iso8601DatePublished":"2021-04-08T23:00:00.000Z","bodym":{"childMarkdownRemark":{"excerpt":"I've been using C# for about a decade now, andâ€¦","timeToRead":1,"html":"<p>I've been using C# for about a decade now, and every now and again I discover something that surprises me. This week it's the ability to deconstruct as we do in Javascript (and I'm not talking about using Tuples!).</p>\n<p>Below is a simple example of deconstruction taking place to draw out the power, and defence property for our Trex object,</p>\n<deckgo-highlight-code   terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">const trex = {\n    statistics: {\n        power: 10,\n        defence: 2\n    },\n    name: &quot;T-Rex&quot;, \n};\n\nconst { power, defence } = trex.statistics;\n\nconsole.log(`Power ${power}, Defence ${defence}`);\n//Power 10, Defence 2\n\n//Better than doing:\n//const power = trex.statistics.power;\n//const defence = trex.statistics.defence;</code>\n        </deckgo-highlight-code>\n<p>As Mozilla's definition states,</p>\n<blockquote>\n<p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"nofollow\">Destructuring assignment</a>.</p>\n</blockquote>\n<p>It's a powerful syntactical sugar, especially in the scenarios where you have a nested object with long names. As deconstruction can lead to cleaner, more readable code its uses are great on large object types. Now let's take a look at the same thing but in C#,</p>\n<deckgo-highlight-code   terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">namespace deconstruction\n{\n    public record Statistics(int Power, int Defence);\n\n    public class Trex\n    {\n        public Statistics Statistics;\n        public string Name;\n\n        public Trex()\n        {\n            Name = &quot;T-Rex&quot;;\n            Statistics = new Statistics(10, 5);\n        }\n\n        // Return the first and last name.\n        public void Deconstruct(out int power, out int defence)\n        {\n            power = Statistics.Power;\n            defence = Statistics.Defence;\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>Ok admittedly it's not as elegant as its Javascript counterpart as we need to define what we want to deconstruct upfront as well as have a function for each combination ðŸ˜¬! but it's still got its uses... check it out,</p>\n<deckgo-highlight-code   terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">using System;\n\nnamespace deconstruction\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var trex = new Trex();\n            var (power, defence) = trex;\n\n            Console.WriteLine($&quot;Power: {power}, Defence: {defence}&quot;);\n            //Power: 10, Defence: 5\n\n            //Better than doing:\n            //var power = trex.statistics.power;\n            //var defence = trex.statistics.defence;\n        }\n    }\n}</code>\n        </deckgo-highlight-code>\n<p>Who knows what other hidden gems ðŸ’Ž lie buried with the Microsoft docs!</p>"}}},"related":{"edges":[{"node":{"title":".NET & GRPC What they forgot to tell you","slug":"dotnet-grpc-forgot-to-tell-you","hero":{"file":{"url":"//images.ctfassets.net/wjg1udsw901v/5m1MwxccFfmDxkLKcq3dBt/b54fc31b09d0a266a3d8cd5082839976/grpc-logojpg.jpg"},"title":"GRPC Logo"}}}]}},"pageContext":{"slug":"deconstruct-objects-in-csharp-like-in-javascript","tags":["c#","javascript","deconstruction","syntax",".net"]}},"staticQueryHashes":["2040261982","2833800349","3159585216"]}