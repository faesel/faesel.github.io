{"componentChunkName":"component---src-templates-blog-js","path":"/blog/electron-newrelic-integration-using-open-telemetry","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.faesel.com"}},"contentfulBlog":{"title":"Electron & New Relic Integration Using Open Telemetry","slug":"electron-newrelic-integration-using-open-telemetry","tags":["electron","new-relic","open-telemetry","tracing","logging","jaeger","otlp","ipc-channel"],"hero":{"file":{"url":"//images.ctfassets.net/wjg1udsw901v/4N5m97m5WfdJi5u7D8I4tX/00d1a21ab7ce8db54af5fa6f84f89e9d/article-banner.jpg"},"title":"electron-newrelic-opentelemetry"},"datePublished":"March 17th, 2023","iso8601DatePublished":"2023-03-17T00:00:00.000Z","bodym":{"childMarkdownRemark":{"excerpt":"Introduction Recently I encountered a scenarioâ€¦","timeToRead":7,"html":"<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>Recently I encountered a scenario where I needed to integrate New Relic into my Electron application. New Relic supports a number of integration types our the box, some of the more heavily used ones are,</p>\n<ul>\n<li>APM Agents - Primary used for backend tracking, most of the documentation will point to integrating in this style.</li>\n<li>Browser Agent - Used for front end client side logging.</li>\n</ul>\n<p>Integrating the browser agent was a simple task of adding a logging script to the HTML page hosting the app ... easy so far. Because Electron is effectively loading up a chromium browser, the browser agent should work as normal. The APM Agent on the other hand was a different story, after having scoured the internet I found that its currently not supported with Electron. In fact if you look at the documentation for Electron, there is a suspicious absence of logging documentation. This might be down to the unique way Electrons IPC channels (inter-process-communication, allows for backend and front end communication using an event based model) work.</p>\n<p>Due to this I knew we would require a manual approach to logging, this is where Open Telemetry comes into play. Using Open Telemetry we can bootstrap the app on startup and start manually adding tracing logs in any backend IPC handler. Since most logging providers now support Open Telemetry, including New Relic we have a mechanism to export out logs out.</p>\n<p>This article was created as a complete guide to the approach mentioned above. Due to the lack of examples and documentation online I hope this article comes in use for someone. In the example below I was using Electron with Vite and Typescript.</p>\n<h1 id=\"installing-dependencies\" style=\"position:relative;\"><a href=\"#installing-dependencies\" aria-label=\"installing dependencies permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Installing Dependencies</h1>\n<p>To get started open telemetry has a couple of packages that need installing,</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">npm install @opentelemetry/api\nnpm install @opentelemetry/auto-instrumentations-node\nnpm install @opentelemetry/exporter-trace-otlp-http\nnpm install @opentelemetry/instrumentation\nnpm install @opentelemetry/resources\nnpm install @opentelemetry/semantic-conventions</code>\n        </deckgo-highlight-code>\n<h1 id=\"bootstrapping-the-app\" style=\"position:relative;\"><a href=\"#bootstrapping-the-app\" aria-label=\"bootstrapping the app permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bootstrapping the App</h1>\n<p>The first step to integration is to connect into the startup process of Electron and instrument our Open Telemetry tracer. As Open Telemetry allows you to export your logs to multiple 3rd parties the example below will first show you how to get started with Jaeger an open source tracing sink and then expand this to New Relic.</p>\n<h2 id=\"hooking-into-startup\" style=\"position:relative;\"><a href=\"#hooking-into-startup\" aria-label=\"hooking into startup permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooking into Startup</h2>\n<p>The first part of coding is to hook into the startup process your application. Electron conveniently has a <code>whenReady()</code> function that is called when electron has finished initialising. We can make use of this function to register our tracer.</p>\n<p>Let's first start by creating a <code>tracing.ts</code> file in the root of the application. In this file we will have two functions, one to register a tracer and another to get the tracer. We are also going to pass through some useful information to the tracer like the application version, and operating system so that all our logs have some base information they can relay back to New Relic.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">export const registerTracer = (appVersion: string, operatingSystem: string): void =&gt; {\n\t//Registration code here\n}\n\nexport const getTracer = (): Tracer =&gt; {\n\t//Code to get tracer here\n}</code>\n        </deckgo-highlight-code>\n<p>Next we can call the register function on startup,</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">import { app } from &quot;electron&quot;\n\napp.whenReady().then(() =&gt; {\n\t//For me this is the version defined in my package.json\n\tconst appVersion = app.getVersion();\n\t//Part of NodeJS&#39;s way of detirmining the platform\n\tconst operatingSystem = process.platform;\n\n\tregisterTracer(appVersion, operatingSystem);\n});</code>\n        </deckgo-highlight-code>\n<h2 id=\"configuring-the-tracer\" style=\"position:relative;\"><a href=\"#configuring-the-tracer\" aria-label=\"configuring the tracer permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the Tracer</h2>\n<p>Now that we have some functions to hook into we can flesh them out with our configuration. For ease of copy and paste im going to first code dump and the file then explain each part.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">/*tracing.ts*/\nimport { BatchSpanProcessor } from &quot;@opentelemetry/sdk-trace-base&quot;;\nimport { Resource } from &quot;@opentelemetry/resources&quot;;\nimport { SemanticResourceAttributes } from &quot;@opentelemetry/semantic-conventions&quot;;\nimport {\n  NodeTracerProvider,\n  SimpleSpanProcessor,\n} from &quot;@opentelemetry/sdk-trace-node&quot;;\nimport { registerInstrumentations } from &quot;@opentelemetry/instrumentation&quot;;\nimport { OTLPTraceExporter } from &quot;@opentelemetry/exporter-trace-otlp-http&quot;;\n\nimport opentelemetry, { Tracer } from &quot;@opentelemetry/api&quot;;\nimport { getNodeAutoInstrumentations } from &quot;@opentelemetry/auto-instrumentations-node&quot;;\n\nconst NEWRELIC_APP_NAME = &quot;APP NAME GOES HERE&quot;;\nconst IS_DEVELOPMENT = import.meta.env.DEV;\n\nexport const registerTracer = (appVersion: string, operatingSystem: string): void =&gt; {\n  registerInstrumentations({\n    instrumentations: [\n      getNodeAutoInstrumentations(),\n      //TODO: Add an instrumentation library here when electron is supported\n    ],\n  });\n\n  const resource = Resource.default().merge(\n    new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: NEWRELIC_APP_NAME,\n      [SemanticResourceAttributes.SERVICE_VERSION]: appVersion,\n      [SemanticResourceAttributes.OS_NAME]: operatingSystem,\n    })\n  );\n\n  const provider = new NodeTracerProvider({\n    resource: resource,\n  });\n\n  const otlpExporter = new OTLPTraceExporter({\n\t//Jaeger tracing url\n\turl: &#39;http://localhost:4318/v1/traces&#39;\n  });\n\n  const processor = IS_DEVELOPMENT\n    ? new SimpleSpanProcessor(otlpExporter)\n    : new BatchSpanProcessor(otlpExporter);\n\n  provider.addSpanProcessor(processor);\n  provider.register();\n};</code>\n        </deckgo-highlight-code>\n<p><em>Note <code>import.meta.env</code> is just Vite's way of getting hold of environment variables.</em></p>\n<p>You might firstly notice that there is a <code>TODO</code> in the code, if and when Electron supports a plugin style integration with open telemetry, the <code>instrumentations</code> array will be the place to add it. For now we are manually instrumenting the app.</p>\n<p>The resources section is given to use using the <code>@opentelemetry/resources</code> and <code>@opentelemetry/semantic-conventions</code> packages. It allows us to define some base properties we want to show in all our tracing logs. Obvious things like the app version, and operating systems (especially if your targeting multiple systems) are really useful bits of information to add. There are also some built in attributes for Kubernetes and oddly enough AWS (with some generic ones for other cloud providers).</p>\n<p>In terms of the <code>OTLPTraceExporter</code> block, as we opted to do our tracing using HTTP (GRPC is also an option) with the package <code>@opentelemetry/exporter-trace-otlp-http</code> i have added some basic settings for Jaeger. Note that you can add a number of exporters here, and we will also be extending this to include New Relic.</p>\n<p>The final part in question is the processors themselves, open telemetry has a few options on how you might want to push your logs to 3rd parties. Ive opted to use a <code>SimpleSpanProcessor</code> when running the app locally so that my logs are immediately pushed to the servers when testing things out. However in production im making use of a <code>BatchSpanProcessor</code> that batches a group of logs and then pushes them in one go. This helps reduce network traffic of the app.</p>\n<h2 id=\"exposing-a-tracer\" style=\"position:relative;\"><a href=\"#exposing-a-tracer\" aria-label=\"exposing a tracer permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exposing a Tracer</h2>\n<p>In order to get an actual tracer we can get an instance from the global tracing provider using the <code>getTracer()</code> function. This tracer object then allows us to create logs in the shape of a <code>snap</code>. It is advised to call <code>getTracer</code> every time you need to start logging as opposed to maintaining your own instance.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">export const GetTracer = () : Tracer =&gt; {\n  return opentelemetry.trace.getTracer(NEWRELIC_APP_NAME);\n}</code>\n        </deckgo-highlight-code>\n<h1 id=\"adding-a-tracing-example\" style=\"position:relative;\"><a href=\"#adding-a-tracing-example\" aria-label=\"adding a tracing example permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a Tracing Example</h1>\n<p>Now that we have added all our logging code we can finally create an actual log entry. To do this we can create a new span, in which we can raise new events and record exceptions. In the example below i've added some logging to an IPC handler.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">import { ipcMain } from &#39;electron&#39;\nimport { GetTracer } from &#39;./tracing&#39;\n\nconst createWindow = () =&gt; {\n\t//Create new browser window\n\tipcMain.handle(&quot;getDinosaurs&quot;, async () =&gt; {\n\t\tawait GetTracer().startActiveSpan(&quot;getDinosaurs&quot;, async (span) =&gt; {\n\t\t\t//await getDinosaurs()\n\n\t\t\t//Record one or many events in your code blocks\n\t\t\tspan.addEvent(&quot;receivedDinosaur&quot;, { name: dinoName  });\n\t\t\t//Record exceptions in your code block\n\t\t\tspan.recordException(new Error(`Ops their all extinct!`));\n\t\t\tspan.end();\n\t\t});\n\t});\n}</code>\n        </deckgo-highlight-code>\n<h1 id=\"testing-with-jaeger\" style=\"position:relative;\"><a href=\"#testing-with-jaeger\" aria-label=\"testing with jaeger permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing with Jaeger</h1>\n<p>To test this out with Jaeger you can first execute the following docker command to create a new instance of Jaeger with OTLP enabled.</p>\n<deckgo-highlight-code language=\"bash\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">docker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest</code>\n        </deckgo-highlight-code>\n<p>Once up and running you can navigate to the default UI url <a href=\"http://localhost:16686/\" target=\"_blank\" rel=\"nofollow\">http://localhost:16686/</a> to start viewing your logs. It order to get something showing up you will need to run the app and begin pushing some logs to Jaeger.</p>\n<h1 id=\"setting-up-new-relic\" style=\"position:relative;\"><a href=\"#setting-up-new-relic\" aria-label=\"setting up new relic permalink\" class=\"auto-link-header before\"><svg aria-hidden=\"true\" height=\"40\" width=\"40\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up New Relic</h1>\n<p>Everything is now setup from a code perspective, its time to create everything we need in New Relic. This step is quite quick and painless, a new key can be created from the API Keys section. Once there follow the <strong>Create a Key</strong> button. The form requires the following,</p>\n<ul>\n<li>Account - Set this to whatever you want</li>\n<li>Key Type - Set this to <strong>Ingest - Licence</strong></li>\n<li>Name - Set this to whatever you want, however it does make sense to match this up with the service name set in the section \"Configuring the Tracer\"</li>\n</ul>\n<p><img src=\"//images.ctfassets.net/wjg1udsw901v/3Eg3DL2escQx6jZdQsZYBQ/973a748bad74f91ecac6bd711f31f37a/new-relic-adding-new-api-key.png\" alt=\"new-relic-adding-new-api-key\"></p>\n<p>Once thats created you should get an option to copy the key which is passed into your <code>OTLPTraceExporter</code>. As for the URL you can find New Relics OTLP endpoints on this <a href=\"https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/get-started/opentelemetry-set-up-your-app/\" target=\"_blank\" rel=\"nofollow\">link</a>. Now that we have the settings needed we can change the <code>OTLPTraceExporter</code> to include the New Relic settings.</p>\n<deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">const otlpExporter = new OTLPTraceExporter({\n\turl: &#39;https://otlp.nr-data.net:443&#39;,\n\theaders: {\n\t  &quot;api-key&quot;: `API KEY GOES HERE`,\n\t},\n});</code>\n        </deckgo-highlight-code>\n<p>Once setup you will need to send your first log before anything appears in New Relic. Once you have results will show up in APM &#x26; Services > Services - OpenTelemetry > Click on your app name > Distributed Tracing. You can drill down to view the span events and attributes.</p>\n<p>New Relic also has a second method of viewing your logs through the use of NRQL queries. You can query your data by visiting <strong>Query Your Data</strong> and entering the following query,</p>\n<deckgo-highlight-code language=\"sql\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">SELECT *\nFROM SpanEvent WHERE span.id IN ( \n\tSELECT id FROM Span WHERE otel.library.name = &#39;YOUR APP NAME HERE&#39;\n)</code>\n        </deckgo-highlight-code>\n<p>And thats it, hope this was useful for someone! Before you get integrating note that there might be some logging providers that have a much easier integration with New Relic, <a href=\"https://docs.sentry.io/platforms/javascript/guides/electron/\" target=\"_blank\" rel=\"nofollow\">sentry.io</a> seems like one of them.</p>"}}},"related":{"edges":[{"node":{"title":"ASP.NET GraphQL server with Hot Chocolate","slug":"aspnet-graphql-server-with-hot-chocolate","hero":{"file":{"url":"//images.ctfassets.net/wjg1udsw901v/74JrRnpexhOnSAsBwNOPV7/635bc389cea0de36f3158df45483ae85/graphql.jpg"},"title":"GraphQL With Hot Chocolate"}}}]}},"pageContext":{"slug":"electron-newrelic-integration-using-open-telemetry","tags":["electron","new-relic","open-telemetry","tracing","logging","jaeger","otlp","ipc-channel"]}},"staticQueryHashes":["2040261982","2833800349","3159585216"]}