{"componentChunkName":"component---src-templates-blog-js","path":"/blog/gatsby-seo-opengraph-helmet","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.faesel.com"}},"contentfulBlog":{"title":"GatsbyJS SEO and Open Graph with Helmet","slug":"gatsby-seo-opengraph-helmet","tags":["helmet","twitter","seo","linked-data","gatsbyjs","json-ld","open-graph"],"hero":{"file":{"url":"//images.ctfassets.net/wjg1udsw901v/6BwwZovIUzXkE7j7ZeVxM6/f7eed6871e869df95a84ef57d8df7ed6/gladiator-1931077_1280.jpg"},"title":"Helmet"},"datePublished":"July 11th, 2020","iso8601DatePublished":"2020-07-11T23:00:00.000Z","bodym":{"childMarkdownRemark":{"excerpt":"I recently recreated my blog in GatsbyJs, you can…","timeToRead":8,"html":"<p>I recently recreated my blog in GatsbyJs, you can download a template of it here <a href=\"https://github.com/faesel/gatsby-techblog-starter\">gatsby-techblog-starter</a>. In the joy of sharing its simplicity to the world, I tweet about my <a href=\"https://www.faesel.com/blog/gatsby-tech-blog-starter\">intro article</a> with a link to my website. To my dismay, I noticed the tweet was lacking a lot of formatting and information on the link... would you even see that link 👀?</p>\n<p><img src=\"//images.ctfassets.net/wjg1udsw901v/37l0W6HYcNXrTDrAbMDJSn/04d9b245622621d5b0eafaf59657ea07/twitter-no-opengraph.png\" alt=\"Twitter without opengraph\"></p>\n<p>I realised the secret sauce I was missing was called <strong>Open Graph Protocol</strong>. From the <a href=\"https://ogp.me/\">specifications website</a> itself, </p>\n<blockquote>\n<p>The Open Graph protocol enables any web page to become a rich object in a social graph. For instance, this is used on Facebook to allow any web page to have the same functionality as any other object on Facebook.</p>\n</blockquote>\n<p>In essence its the mata tags you see below, that sites like Twitter, Linked In, Facebook use to correctly render an enriched link of the page on their website,</p>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">&lt;meta data-react-helmet=&quot;true&quot; name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;\n&lt;meta data-react-helmet=&quot;true&quot; name=&quot;twitter:site&quot; contact=&quot;@faeselsaeed&quot;&gt;\n&lt;meta name=&quot;twitter:creator&quot; content=&quot;&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta name=&quot;twitter:title&quot; content=&quot;Creating my dream tech blog with GatsbyJS&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta name=&quot;twitter:description&quot; content=&quot;I&#39;m someone who&#39;s always had my own tech blog, I…&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta name=&quot;twitter:image&quot; content=&quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&quot; data-react-helmet=&quot;true&quot;&gt;\n\n&lt;meta property=&quot;og:site_name&quot; content=&quot;&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:title&quot; content=&quot;Creating my dream tech blog with GatsbyJS&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:url&quot; content=&quot;https://www.faesel.com/blog/gatsby-tech-blog-starter&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:description&quot; content=&quot;I&#39;m someone who&#39;s always had my own tech blog, I…&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:image&quot; content=&quot;//images.ctfassets.net/wjg1udsw901v/6hjsGXkoyitmyiEuBdeTP2/c77e74af9235ac775f18836e2de07cac/gatsby-logo.jpg&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:image:alt&quot; content=&quot;Gatsby JS&quot; data-react-helmet=&quot;true&quot;&gt;\n&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; data-react-helmet=&quot;true&quot;&gt;</code>\n        </deckgo-highlight-code>\n      \n<p>This article is about how I used <a href=\"https://helmetjs.github.io/\">Helmet JS</a> to improve my sites shareability and improving its SEO capabilities.</p>\n<h2>Step 1 - Install those dependencies</h2>\n<p>The dependencies we are interested in are as follows:</p>\n\n        <deckgo-highlight-code   terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">npm intall gatsby-plugin-react-helmet react-helmet</code>\n        </deckgo-highlight-code>\n      \n<p>You can read more about the gatsby plugin <a href=\"https://www.gatsbyjs.org/packages/gatsby-plugin-react-helmet/\">here</a> along with more detailed information on Helmet js and all its supported tabs <a href=\"https://github.com/nfl/react-helmet\">here</a></p>\n<h2>Step 2 - Store your constant's in your gatsby config</h2>\n<p>When creating a Gatsby website we always have a config file in the root of the project called <strong>gatsby-config.js</strong>, from here we can add various plugins like so,</p>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">module.exports = {\n    plugins: [\n        &#39;gatsby-plugin-react-helmet&#39;\n    ]\n}</code>\n        </deckgo-highlight-code>\n      \n<p>This config file is also the place to store all you common reusable information in Gatsby's predefined <strong>siteMetadata</strong> tag (this tag makes it accessible through GraphQl). We will be using this later on to populate our head with various information.</p>\n\n        <deckgo-highlight-code language=\"json\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">module.exports = {\n    siteMetadata: {\n        title: &#39;FAESEL.COM&#39;,\n        author: &#39;Faesel Saeed&#39;,\n        description: &#39;Personal blog of Faesel Saeed&#39;,\n        siteUrl: &#39;https://www.faesel.com&#39;,\n        social: {\n            linkedin: &#39;https://www.linkedin.com/in/faesel-saeed-a97b1614&#39;,\n            twitter: &#39;https://twitter.com/@faeselsaeed&#39;,\n            twitterUsername: &#39;@faeselsaeed&#39;,\n            github: &#39;https://github.com/faesel&#39;,\n            flickr: &#39;https://www.flickr.com/photos/faesel/&#39;,\n            email: &#39;faesel@outlook.com&#39;\n        },\n        rssFeedUrl: &#39;/rss.xml&#39;\n    },\n    ...\n}</code>\n        </deckgo-highlight-code>\n      \n<h2>Step 3 - Create your head component</h2>\n<p>Now that we have all our static information in the config we can query this out using GraphQl through the objects > <strong>site</strong> > <strong>siteMetadata</strong>. We can also import in <strong>Helmet</strong> and start building up our Head meta data. My Head component looks like this,</p>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">import React from &#39;react&#39;\nimport { Helmet } from &#39;react-helmet&#39;\nimport { useStaticQuery, graphql } from &#39;gatsby&#39;\n\nimport favicon from &#39;../../static/favicon.ico&#39;\n\nconst Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type datePublished }) =&gt; {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    siteUrl,\n                    title,\n                    author,\n                    social {\n                        twitterUsername\n                    }\n                }\n            }\n        }\n    `)\n\n    return (\n        &lt;&gt;\n            &lt;Helmet title={`${pageTitle} | ${data.site.siteMetadata.title}`} /&gt;\n            &lt;Helmet&gt;\n                &lt;link rel=&quot;icon&quot; href={favicon} /&gt;\n\n                &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;&lt;/meta&gt;\n                &lt;meta name=&quot;twitter:site&quot; contact={data.site.siteMetadata.social.twitterUsername}&gt;&lt;/meta&gt;\n                &lt;meta name=&quot;twitter:creator&quot; content={data.site.siteMetadata.twitterUsername}&gt;&lt;/meta&gt;\n                &lt;meta name=&quot;twitter:title&quot; content={title}&gt;&lt;/meta&gt;\n                &lt;meta name=&quot;twitter:description&quot; content={description}&gt;&lt;/meta&gt;\n                &lt;meta name=&quot;twitter:image&quot; content={imageUrl}&gt;&lt;/meta&gt;\n\n                &lt;meta property=&quot;og:locale&quot; content=&quot;en_GB&quot; /&gt;\n                &lt;meta property=&quot;og:site_name&quot; content={data.site.siteMetadata.title} /&gt;\n                &lt;meta property=&quot;og:title&quot; content={title}&gt;&lt;/meta&gt;\n                &lt;meta property=&quot;og:url&quot; content={url}&gt;&lt;/meta&gt;\n                &lt;meta property=&quot;og:description&quot; content={description}&gt;&lt;/meta&gt;\n                &lt;meta property=&quot;og:image&quot; content={imageUrl}&gt;&lt;/meta&gt;\n                &lt;meta property=&quot;og:image:alt&quot; content={imageAlt}&gt;&lt;/meta&gt;\n                &lt;meta property=&quot;og:type&quot; content={type} /&gt;\n            &lt;/Helmet&gt;\n        &lt;/&gt;\n    )\n}\n\nexport default Head</code>\n        </deckgo-highlight-code>\n      \n<p>(Note some of the properties get fleshed out later on in the article)</p>\n<p>The Helmet component injects in HTML tags into the head of the HTML document. To understand what the tags represent within the Helmet component, and to see a full range of what's available use the following two links.</p>\n<ol>\n<li><a href=\"https://ogp.me/\">Tags from Open Graph</a></li>\n<li><a href=\"https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup\">Tags from Twitter</a></li>\n</ol>\n<h2>Step 3 - Using your head component</h2>\n<p>Using your head component is quite straight forward, its more a case of working out where to source all your properties. Here's what my page looks like,</p>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">import React from &quot;react&quot;\nimport { graphql } from &quot;gatsby&quot;\nimport Layout from &quot;../components/layout&quot;\nimport Head from &quot;../components/head&quot;\n\n// Add some code here to get all your data from markdown, cms etc.\n\nconst Blog = props =&gt; {\n  return (\n    &lt;Layout&gt;\n      &lt;Head \n        pageTitle={props.data.title}\n        title={props.data.title}\n        description={props.data.bodym.childMarkdownRemark.excerpt}\n        url={`${props.data.site.siteMetadata.siteUrl}/blog/${props.data.slug}`}\n        imageUrl={props.data.hero.file.url}\n        imageAlt={props.data.hero.title} \n        type=&#39;article&#39; \n        datePublished={props.data.contentfulBlog.iso8601DatePublished}/&gt;\n\n      &lt;h1&gt;My Great Blog Post&lt;/h1&gt;\n      ...\n    &lt;/Layout&gt;\n  )\n}\n\nexport default Blog</code>\n        </deckgo-highlight-code>\n      \n<h2>Step 4 - Go further with JSON-LD and Linked data</h2>\n<p>So far so great, we have enough here for most social media sites to understand the structure of our data and to use this to correctly format the information on a consuming website. But what do search engines use?</p>\n<p>The answer is <a href=\"https://json-ld.org/\">Json-ld and linked data</a>, best explained by the specs website itself,</p>\n<blockquote>\n<p>JSON-LD is a lightweight Linked Data format. It is easy for humans to read and write. It is based on the already successful JSON format and provides a way to help JSON data interoperate at Web-scale. JSON-LD is an ideal data format for programming environments, REST Web services, and unstructured databases such as Apache CouchDB and MongoDB.</p>\n</blockquote>\n<p>and,</p>\n<blockquote>\n<p>Linked Data empowers people that publish and use information on the Web. It is a way to create a network of standards-based, machine-readable data across Web sites. It allows an application to start at one piece of Linked Data, and follow embedded links to other pieces of Linked Data that are hosted on different sites across the Web. </p>\n</blockquote>\n<p>To sum it up in one sentence <em>we are using JSON data to create structured information so that websites can deep link with each other</em>. With this in mind our head component looks like this:</p>\n\n        <deckgo-highlight-code language=\"javascript\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">import React from &#39;react&#39;\nimport { Helmet } from &#39;react-helmet&#39;\nimport { useStaticQuery, graphql } from &#39;gatsby&#39;\n\nconst Head = ({ pageTitle, title, url, description, imageUrl, imageAlt, type, datePublished }) =&gt; {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    siteUrl,\n                    title,\n                    author,\n                    social {\n                        twitterUsername\n                    }\n                }\n            }\n        }\n    `)\n\n    const ldJsonBreadcrumb = {\n        &#39;@context&#39;: &#39;https://schema.org&#39;,\n        &#39;@type&#39;: &#39;BreadcrumbList&#39;,\n        &#39;itemListElement&#39;: [{\n            &#39;@type&#39;: &#39;ListItem&#39;,\n            &#39;position&#39;: 1,\n            &#39;name&#39;: &#39;Home&#39;,\n            &#39;item&#39;: `${data.site.siteMetadata.siteUrl}/home`\n        },{\n            &#39;@type&#39;: &#39;ListItem&#39;,\n            &#39;position&#39;: 2,\n            &#39;name&#39;: &#39;Blog&#39;,\n            &#39;item&#39;: `${data.site.siteMetadata.siteUrl}/blog`\n        },{\n            &#39;@type&#39;: &#39;ListItem&#39;,\n            &#39;position&#39;: 3,\n            &#39;name&#39;: &#39;Projects&#39;,\n            &#39;item&#39;: `${data.site.siteMetadata.siteUrl}/projects`\n        },{\n            &#39;@type&#39;: &#39;ListItem&#39;,\n            &#39;position&#39;: 4,\n            &#39;name&#39;: &#39;Contact&#39;,\n            &#39;item&#39;: `${data.site.siteMetadata.siteUrl}/contact`\n        }]\n      };\n\n    const jsonldArticle = {\n        &#39;@context&#39;: &#39;http://schema.org&#39;,\n        &#39;@type&#39;: `${type}`,\n        &#39;description&#39;: `${description}`,\n        &#39;image&#39;: {\n            &#39;@type&#39;: &#39;ImageObject&#39;,\n            &#39;url&#39;: `${imageUrl}`\n        },\n        &#39;mainEntityOfPage&#39;: {\n            &#39;@type&#39;: &#39;WebPage&#39;,\n            &#39;@id&#39;: `${data.site.siteMetadata.siteUrl}`\n         },\n        &#39;inLanguage&#39;: &#39;en&#39;,\n        &#39;name&#39;: `${title}`,\n        &#39;headline&#39;: `${title}`,\n        &#39;url&#39;: `${url}`,\n        &#39;datePublished&#39;: `${datePublished}`,\n        &#39;dateModified&#39;: `${datePublished}`,\n        &#39;author&#39;: {\n            &#39;@type&#39;: &#39;Person&#39;,\n            &#39;name&#39;: `${data.site.siteMetadata.author}`\n        },\n        &#39;publisher&#39; : {\n            &#39;@type&#39;: &#39;Organization&#39;,\n            &#39;name&#39;: `${data.site.siteMetadata.author}`,\n            &#39;logo&#39;: {\n                &#39;@type&#39;: &#39;ImageObject&#39;,\n                &#39;url&#39;: `https://images.ctfassets.net/wjg1udsw901v/4RI5COhSqeYFCbvzYFeFZW/af52277ab41da56c1be5f72f316befe9/logo.png`\n            }\n        }\n    };\n\n    return (\n        &lt;&gt;\n            &lt;Helmet&gt;\n                {/* other head elements go here */}\n      \n                &lt;script type=&quot;application/ld+json&quot;&gt;\n                    {JSON.stringify(ldJsonBreadcrumb)}\n                &lt;/script&gt;\n                \n                {type === &#39;article&#39; &amp;&amp; (\n                   &lt;script type=&quot;application/ld+json&quot;&gt;\n                        {JSON.stringify(jsonldArticle)}\n                    &lt;/script&gt;\n                )}\n  \n                {/* Meta properties go here */}\n                \n            &lt;/Helmet&gt;\n        &lt;/&gt;\n    )\n}\n\nexport default Head</code>\n        </deckgo-highlight-code>\n      \n<p>For more information on the structure you can read up on the <a href=\"https://www.w3.org/2018/jsonld-cg-reports/json-ld/#introduction\">W3C Json-LD specification document</a></p>\n<p>To get an idea of the full range of tags available take a look at these two links (in the case of my website I only use <strong>BreadcrumbList</strong> and <strong>Article</strong> types depending on what content you have you may show something else).</p>\n<ol>\n<li><a href=\"https://schema.org/BreadcrumbList\">BreadcrumbList</a></li>\n<li><a href=\"https://schema.org/Article\">Article</a></li>\n</ol>\n<p>Do note for the property <strong>datePublished</strong> you need to format your dates in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO-8601</a> format. To save you a trip in google this up you can use the GraphQl query snippet below. The format definition comes from <a href=\"https://momentjs.com/\">Moment JS</a> which Gatsby is using under the hood.</p>\n\n        <deckgo-highlight-code   terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">iso8601DatePublished: datePublished(formatString: &quot;YYYY-MM-DD[T]HH:mm:ss.SSS[Z]&quot;)</code>\n        </deckgo-highlight-code>\n      \n<h2>Step 5 - Validating your tags</h2>\n<p>There are actually various websites we can use to validate your tags and data. When building my website I used the following sources.</p>\n<ul>\n<li><a href=\"https://cards-dev.twitter.com/validator\">Twitters Card Testing Took</a></li>\n<li><a href=\"https://search.google.com/structured-data/testing-tool/u/0/\">Googles link for testing json-ld</a>, testing and validating tool for JSON-LD. It goes as far as telling you if there are any missing tags.</li>\n<li><a href=\"https://metatags.io/\">Matatags.io</a>, great for previewing how you website links will render on all the social media websites</li>\n</ul>\n<p>After that you can begin to tweet with confidence 😁</p>\n<p><img src=\"//images.ctfassets.net/wjg1udsw901v/2ojzLoP0kubfHc6NdpTiIz/483dd1458ab941764b34ba1e3d5e67e9/TweetFormat.png\" alt=\"Tweet Format\"></p>"}}}},"pageContext":{"slug":"gatsby-seo-opengraph-helmet"}}}