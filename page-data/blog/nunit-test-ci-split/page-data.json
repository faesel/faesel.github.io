{"componentChunkName":"component---src-templates-blog-js","path":"/blog/nunit-test-ci-split","result":{"data":{"contentfulBlog":{"title":"Splitting NUnit Unit Tests With TeamCity To Decrease CI Time","datePublished":"March 31st, 2017","bodym":{"childMarkdownRemark":{"html":"<p>This is a quick guide on how to split unit tests into different categories to decrease the time it takes for your CI build to run. The categories can be used to distinguish different areas of your tests to break down the CI Builds (typically used to run different categories in parallel) or to separate slow running tests into a separate build, all in the aim of speeding up the feedback cycle for developers. So to create a category you simple add a category attribute to either a test or a test fixture like so:</p>\n\n        <deckgo-highlight-code language=\"csharp\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">[Category(&quot;CategoryOne&quot;)] \n[TestFixture] \npublic void FunkyMethod() \n{ \n    string pointless = &quot;this is code&quot;; \n} \n\n[Category(&quot;CategoryFour&quot;)] \n[TestFixture] \npublic class UpgradeControllerTests \n{ \n  ...</code>\n        </deckgo-highlight-code>\n      \n<p>When segregating tests sometimes you will find a tests intersects multiple categories, in this case you can add multiple attributes. Later on we will see the different types of expressions you are able to enter when running the tests through TeamCity. Below is an example of using multiple categories</p>\n\n        <deckgo-highlight-code language=\"csharp\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">[Category(&quot;CategoryOne&quot;)] \n[Category(&quot;CategoryTwo&quot;)] \n[Test] \npublic void FunkyMethod() \n{ \n    string pointless = &quot;this is code&quot;; \n}</code>\n        </deckgo-highlight-code>\n      \n<p>So far creating categories like this is fine however having magic strings all over your code is not great. So to fix this we can create a custom attribute which does exactly the same thing as shown below. The custom attribute inherits from CategoryAttribute.</p>\n\n        <deckgo-highlight-code language=\"csharp\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">//Used for a test fixture \n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] \npublic sealed class CategoryFiveAttribute : CategoryAttribute { } \n//Used for a test \n[AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] \npublic sealed class CategoryThreeAttribute : CategoryAttribute { }</code>\n        </deckgo-highlight-code>\n      \n<p>Now that we have the attributes ready we can use them like so.</p>\n\n        <deckgo-highlight-code language=\"csharp\"  terminal=\"carbon\" line-numbers=\"true\" >\n          <code slot=\"code\">[TestFixture, CategoryFiveAttribute] \npublic class SignOutControllerTests \n{ \n  ...</code>\n        </deckgo-highlight-code>\n      \n<p>To configure team city to run certain categories is fairly straightforward. Start by creating a Build step with the runner type set to “NUnit”.  Under Run tests from select your test project dll file. And then under Nunit categories include list the categories you want to test out by writing</p>\n<p>/Include: CategoryOne</p>\n<p>Note that you can also do the inverse and exclude certain tests by adding the following in the section named Nunit categories exclude</p>\n<p>/Exclude: CategoryOne</p>\n<p>NUnit also supports quite complex expressions, to see a full list click here (section “Specifying test categories to include or exclude”). </p>\n<p>A screenshot is included for a full list of settings.</p>\n<p><img src=\"//images.ctfassets.net/wjg1udsw901v/56EtPebPnDplF4gswxjpJH/f4ac2ffe01af7d3933838d4425d26bc8/teamcitytestcategory.png\" alt=\"Nunit Test - Teamcity\"></p>\n<p>Once you have this in place your unit tests will run with lightening speed.</p>"}}}},"pageContext":{"slug":"nunit-test-ci-split"}}}